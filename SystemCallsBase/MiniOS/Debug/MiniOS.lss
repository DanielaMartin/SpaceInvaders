
MiniOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000482c  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040482c  0040482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c94  20000000  00404834  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000003ac  20000c94  004054c8  00020c94  2**2
                  ALLOC
  4 .stack        00003000  20001040  00405874  00020c94  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020c94  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020cbe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ddd4  00000000  00000000  00020d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004cdb  00000000  00000000  0003eaeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000113d4  00000000  00000000  000437c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001348  00000000  00000000  00054ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001420  00000000  00000000  00055ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bbab  00000000  00000000  00057308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019a8f  00000000  00000000  00072eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005e52e  00000000  00000000  0008c942  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003270  00000000  00000000  000eae70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20004040 	.word	0x20004040
  400004:	00402d01 	.word	0x00402d01
  400008:	00402cfd 	.word	0x00402cfd
  40000c:	00402cfd 	.word	0x00402cfd
  400010:	00402cfd 	.word	0x00402cfd
  400014:	00402cfd 	.word	0x00402cfd
  400018:	00402cfd 	.word	0x00402cfd
	...
  40002c:	00400231 	.word	0x00400231
  400030:	00402cfd 	.word	0x00402cfd
  400034:	00000000 	.word	0x00000000
  400038:	00402cfd 	.word	0x00402cfd
  40003c:	004001b1 	.word	0x004001b1
  400040:	00402cfd 	.word	0x00402cfd
  400044:	00402cfd 	.word	0x00402cfd
  400048:	00402cfd 	.word	0x00402cfd
  40004c:	00400425 	.word	0x00400425
  400050:	00402cfd 	.word	0x00402cfd
  400054:	00402cfd 	.word	0x00402cfd
  400058:	00402cfd 	.word	0x00402cfd
  40005c:	00402cfd 	.word	0x00402cfd
  400060:	00402cfd 	.word	0x00402cfd
  400064:	00400a65 	.word	0x00400a65
  400068:	00000000 	.word	0x00000000
  40006c:	004023c9 	.word	0x004023c9
  400070:	004023dd 	.word	0x004023dd
  400074:	004023f1 	.word	0x004023f1
  400078:	00402cfd 	.word	0x00402cfd
  40007c:	00400aa1 	.word	0x00400aa1
	...
  400088:	00402cfd 	.word	0x00402cfd
  40008c:	00402cfd 	.word	0x00402cfd
  400090:	00402cfd 	.word	0x00402cfd
  400094:	00402cfd 	.word	0x00402cfd
  400098:	00402cfd 	.word	0x00402cfd
  40009c:	00402cfd 	.word	0x00402cfd
  4000a0:	00402cfd 	.word	0x00402cfd
  4000a4:	00402cfd 	.word	0x00402cfd
  4000a8:	00402cfd 	.word	0x00402cfd
  4000ac:	00402cfd 	.word	0x00402cfd
  4000b0:	00402cfd 	.word	0x00402cfd
  4000b4:	00402cfd 	.word	0x00402cfd
  4000b8:	00402cfd 	.word	0x00402cfd
  4000bc:	00402cfd 	.word	0x00402cfd
  4000c0:	00402cfd 	.word	0x00402cfd
  4000c4:	00402cfd 	.word	0x00402cfd
  4000c8:	00402cfd 	.word	0x00402cfd

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000c94 	.word	0x20000c94
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404834 	.word	0x00404834

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000c98 	.word	0x20000c98
  40011c:	00404834 	.word	0x00404834
  400120:	00404834 	.word	0x00404834
  400124:	00000000 	.word	0x00000000

00400128 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400128:	4b03      	ldr	r3, [pc, #12]	; (400138 <rtt_init+0x10>)
  40012a:	681b      	ldr	r3, [r3, #0]
  40012c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400130:	4319      	orrs	r1, r3
  400132:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400134:	2000      	movs	r0, #0
  400136:	4770      	bx	lr
  400138:	20000cb0 	.word	0x20000cb0

0040013c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40013c:	b141      	cbz	r1, 400150 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  40013e:	4a09      	ldr	r2, [pc, #36]	; (400164 <rtt_sel_source+0x28>)
  400140:	6813      	ldr	r3, [r2, #0]
  400142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400146:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400148:	6802      	ldr	r2, [r0, #0]
  40014a:	4313      	orrs	r3, r2
  40014c:	6003      	str	r3, [r0, #0]
  40014e:	4770      	bx	lr
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400150:	4a04      	ldr	r2, [pc, #16]	; (400164 <rtt_sel_source+0x28>)
  400152:	6813      	ldr	r3, [r2, #0]
  400154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400158:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40015a:	6802      	ldr	r2, [r0, #0]
  40015c:	4313      	orrs	r3, r2
  40015e:	6003      	str	r3, [r0, #0]
  400160:	4770      	bx	lr
  400162:	bf00      	nop
  400164:	20000cb0 	.word	0x20000cb0

00400168 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400168:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40016a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <rtt_disable_interrupt+0x10>)
  400170:	681b      	ldr	r3, [r3, #0]
  400172:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400174:	6001      	str	r1, [r0, #0]
  400176:	4770      	bx	lr
  400178:	20000cb0 	.word	0x20000cb0

0040017c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  40017c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  40017e:	6883      	ldr	r3, [r0, #8]
  400180:	429a      	cmp	r2, r3
  400182:	d003      	beq.n	40018c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400184:	6883      	ldr	r3, [r0, #8]
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;

	while (rtt_val != p_rtt->RTT_VR) {
  400186:	6882      	ldr	r2, [r0, #8]
  400188:	429a      	cmp	r2, r3
  40018a:	d1fb      	bne.n	400184 <rtt_read_timer_value+0x8>
		rtt_val = p_rtt->RTT_VR;
	}

	return rtt_val;
}
  40018c:	4618      	mov	r0, r3
  40018e:	4770      	bx	lr

00400190 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400190:	68c0      	ldr	r0, [r0, #12]
}
  400192:	4770      	bx	lr

00400194 <console_init>:
static uint8_t* newline; 

/*
*
*/
void console_init( ){
  400194:	4770      	bx	lr
  400196:	bf00      	nop

00400198 <hal_cpu_init>:
*
*	Initializes the CPU. This function must be called before 
*	HAL IO Init. That is: hal_cpu_init(); hal_io_init(); 
*
*/
void hal_cpu_init(void){	
  400198:	b508      	push	{r3, lr}
	sysclk_init();  //initialize clocks
  40019a:	4b01      	ldr	r3, [pc, #4]	; (4001a0 <hal_cpu_init+0x8>)
  40019c:	4798      	blx	r3
  40019e:	bd08      	pop	{r3, pc}
  4001a0:	00401b7d 	.word	0x00401b7d

004001a4 <hal_svc_start>:
*	execution of an SVC instruction
*
*	@param callback the function that gets called on supervisor calls
*/
void hal_svc_start( void(*callback)(void) ){
	svc_callback = callback; //SVC Handler definition is in hal_cpu_asm.s
  4001a4:	4b01      	ldr	r3, [pc, #4]	; (4001ac <hal_svc_start+0x8>)
  4001a6:	6018      	str	r0, [r3, #0]
  4001a8:	4770      	bx	lr
  4001aa:	bf00      	nop
  4001ac:	20000fec 	.word	0x20000fec

004001b0 <SysTick_Handler>:
	SysTick_Config( ms_to_ticks(tick_freq_in_ms) );
}

//The actual handler in the vector table entry
//(careful with the capital T in SysTick)
void SysTick_Handler(void){
  4001b0:	b508      	push	{r3, lr}
	(*systick_callback)();
  4001b2:	4b02      	ldr	r3, [pc, #8]	; (4001bc <SysTick_Handler+0xc>)
  4001b4:	681b      	ldr	r3, [r3, #0]
  4001b6:	4798      	blx	r3
  4001b8:	bd08      	pop	{r3, pc}
  4001ba:	bf00      	nop
  4001bc:	20000fe8 	.word	0x20000fe8

004001c0 <hal_delay>:
*
*	Busy-waiting delay
*
*	@param delay_in_ms delay in milliseconds
*/
void hal_delay(uint32_t delay_in_ms){
  4001c0:	b538      	push	{r3, r4, r5, lr}
	delay_ms(delay_in_ms);
  4001c2:	b368      	cbz	r0, 400220 <hal_delay+0x60>
  4001c4:	4604      	mov	r4, r0
  4001c6:	00e0      	lsls	r0, r4, #3
  4001c8:	0f61      	lsrs	r1, r4, #29
  4001ca:	014b      	lsls	r3, r1, #5
  4001cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
  4001d0:	0142      	lsls	r2, r0, #5
  4001d2:	1a10      	subs	r0, r2, r0
  4001d4:	eb63 0101 	sbc.w	r1, r3, r1
  4001d8:	018b      	lsls	r3, r1, #6
  4001da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
  4001de:	0182      	lsls	r2, r0, #6
  4001e0:	1a10      	subs	r0, r2, r0
  4001e2:	eb63 0101 	sbc.w	r1, r3, r1
  4001e6:	1900      	adds	r0, r0, r4
  4001e8:	f141 0100 	adc.w	r1, r1, #0
  4001ec:	010b      	lsls	r3, r1, #4
  4001ee:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
  4001f2:	0102      	lsls	r2, r0, #4
  4001f4:	1a10      	subs	r0, r2, r0
  4001f6:	eb63 0101 	sbc.w	r1, r3, r1
  4001fa:	024b      	lsls	r3, r1, #9
  4001fc:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
  400200:	0242      	lsls	r2, r0, #9
  400202:	4610      	mov	r0, r2
  400204:	4619      	mov	r1, r3
  400206:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40020a:	2300      	movs	r3, #0
  40020c:	f243 64af 	movw	r4, #13999	; 0x36af
  400210:	2500      	movs	r5, #0
  400212:	1900      	adds	r0, r0, r4
  400214:	4169      	adcs	r1, r5
  400216:	4c04      	ldr	r4, [pc, #16]	; (400228 <hal_delay+0x68>)
  400218:	47a0      	blx	r4
  40021a:	4b04      	ldr	r3, [pc, #16]	; (40022c <hal_delay+0x6c>)
  40021c:	4798      	blx	r3
  40021e:	bd38      	pop	{r3, r4, r5, pc}
  400220:	2009      	movs	r0, #9
  400222:	4b02      	ldr	r3, [pc, #8]	; (40022c <hal_delay+0x6c>)
  400224:	4798      	blx	r3
  400226:	bd38      	pop	{r3, r4, r5, pc}
  400228:	00403a45 	.word	0x00403a45
  40022c:	20000001 	.word	0x20000001

00400230 <SVC_Handler>:
  400230:	4b0d      	ldr	r3, [pc, #52]	; (400268 <hal_cpu_set_psp+0x8>)
  400232:	681b      	ldr	r3, [r3, #0]
  400234:	4718      	bx	r3

00400236 <hal_cpu_get_psp>:
  400236:	f3ef 8009 	mrs	r0, PSP
  40023a:	4770      	bx	lr

0040023c <hal_cpu_set_unprivileged>:
  40023c:	f3ef 8314 	mrs	r3, CONTROL
  400240:	f043 0301 	orr.w	r3, r3, #1
  400244:	f383 8814 	msr	CONTROL, r3
  400248:	f3bf 8f6f 	isb	sy
  40024c:	4770      	bx	lr

0040024e <hal_cpu_set_psp_active>:
  40024e:	f3ef 8314 	mrs	r3, CONTROL
  400252:	f043 0302 	orr.w	r3, r3, #2
  400256:	f383 8814 	msr	CONTROL, r3
  40025a:	f3bf 8f6f 	isb	sy
  40025e:	4770      	bx	lr

00400260 <hal_cpu_set_psp>:
  400260:	f380 8809 	msr	PSP, r0
  400264:	4770      	bx	lr
  400266:	0000      	.short	0x0000
  400268:	20000fec 	.word	0x20000fec

0040026c <button_handler>:
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, buttons_irq_priority);
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
}

//The Button interrupt service routine (ISR)
static void button_handler(uint32_t id, uint32_t mask){
  40026c:	b508      	push	{r3, lr}
	
	if((PIN_PUSHBUTTON_0_ID == id) && (PIN_PUSHBUTTON_0_MASK == mask)){
  40026e:	280b      	cmp	r0, #11
  400270:	d10d      	bne.n	40028e <button_handler+0x22>
  400272:	2904      	cmp	r1, #4
  400274:	d104      	bne.n	400280 <button_handler+0x14>
		//Button 0 was pressed
		(*button_callback)(0);	
  400276:	4b0f      	ldr	r3, [pc, #60]	; (4002b4 <button_handler+0x48>)
  400278:	681b      	ldr	r3, [r3, #0]
  40027a:	2000      	movs	r0, #0
  40027c:	4798      	blx	r3
  40027e:	bd08      	pop	{r3, pc}
	}
	else if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask)){
  400280:	2901      	cmp	r1, #1
  400282:	d115      	bne.n	4002b0 <button_handler+0x44>
		//Button 1 was pressed
		(*button_callback)(1);
  400284:	4b0b      	ldr	r3, [pc, #44]	; (4002b4 <button_handler+0x48>)
  400286:	681b      	ldr	r3, [r3, #0]
  400288:	2001      	movs	r0, #1
  40028a:	4798      	blx	r3
  40028c:	bd08      	pop	{r3, pc}
	}
	else if((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask)){
  40028e:	280d      	cmp	r0, #13
  400290:	d10e      	bne.n	4002b0 <button_handler+0x44>
  400292:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400296:	d104      	bne.n	4002a2 <button_handler+0x36>
		//Button 2 was pressed
		(*button_callback)(2);
  400298:	4b06      	ldr	r3, [pc, #24]	; (4002b4 <button_handler+0x48>)
  40029a:	681b      	ldr	r3, [r3, #0]
  40029c:	2002      	movs	r0, #2
  40029e:	4798      	blx	r3
  4002a0:	bd08      	pop	{r3, pc}
	}
	else if((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask)){
  4002a2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  4002a6:	d103      	bne.n	4002b0 <button_handler+0x44>
		//Button 3 was pressed
		(*button_callback)(3);
  4002a8:	4b02      	ldr	r3, [pc, #8]	; (4002b4 <button_handler+0x48>)
  4002aa:	681b      	ldr	r3, [r3, #0]
  4002ac:	2003      	movs	r0, #3
  4002ae:	4798      	blx	r3
  4002b0:	bd08      	pop	{r3, pc}
  4002b2:	bf00      	nop
  4002b4:	20000cbc 	.word	0x20000cbc

004002b8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  4002b8:	b570      	push	{r4, r5, r6, lr}
  4002ba:	b082      	sub	sp, #8
  4002bc:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4002be:	ac02      	add	r4, sp, #8
  4002c0:	2302      	movs	r3, #2
  4002c2:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4002c6:	4d09      	ldr	r5, [pc, #36]	; (4002ec <ssd1306_write_command+0x34>)
  4002c8:	4621      	mov	r1, r4
  4002ca:	4628      	mov	r0, r5
  4002cc:	4b08      	ldr	r3, [pc, #32]	; (4002f0 <ssd1306_write_command+0x38>)
  4002ce:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4002d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002d4:	4b07      	ldr	r3, [pc, #28]	; (4002f4 <ssd1306_write_command+0x3c>)
  4002d6:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4002d8:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  4002da:	2056      	movs	r0, #86	; 0x56
  4002dc:	4b06      	ldr	r3, [pc, #24]	; (4002f8 <ssd1306_write_command+0x40>)
  4002de:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4002e0:	4621      	mov	r1, r4
  4002e2:	4628      	mov	r0, r5
  4002e4:	4b05      	ldr	r3, [pc, #20]	; (4002fc <ssd1306_write_command+0x44>)
  4002e6:	4798      	blx	r3
#endif
}
  4002e8:	b002      	add	sp, #8
  4002ea:	bd70      	pop	{r4, r5, r6, pc}
  4002ec:	40008000 	.word	0x40008000
  4002f0:	00401cb5 	.word	0x00401cb5
  4002f4:	400e1200 	.word	0x400e1200
  4002f8:	20000001 	.word	0x20000001
  4002fc:	00401ce1 	.word	0x00401ce1

00400300 <configure_uart1>:
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
	NVIC_EnableIRQ(USART1_IRQn);
}


void configure_uart1(uint32_t baudrate){
  400300:	b530      	push	{r4, r5, lr}
  400302:	b085      	sub	sp, #20
  400304:	4604      	mov	r4, r0
	pio_configure(PINS_UART1_PIO, PINS_UART1_TYPE, PINS_UART1_MASK, PINS_UART1_ATTR);
  400306:	2300      	movs	r3, #0
  400308:	220c      	movs	r2, #12
  40030a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40030e:	480c      	ldr	r0, [pc, #48]	; (400340 <configure_uart1+0x40>)
  400310:	4d0c      	ldr	r5, [pc, #48]	; (400344 <configure_uart1+0x44>)
  400312:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART1);
  400314:	2009      	movs	r0, #9
  400316:	4b0c      	ldr	r3, [pc, #48]	; (400348 <configure_uart1+0x48>)
  400318:	4798      	blx	r3
	
	const sam_uart_opt_t uart1_sett = { sysclk_get_cpu_hz(), baudrate, UART_SERIAL_MODE };
  40031a:	4b0c      	ldr	r3, [pc, #48]	; (40034c <configure_uart1+0x4c>)
  40031c:	9301      	str	r3, [sp, #4]
  40031e:	9402      	str	r4, [sp, #8]
  400320:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400324:	9303      	str	r3, [sp, #12]
	uart_init(UART1,&uart1_sett);
  400326:	4c0a      	ldr	r4, [pc, #40]	; (400350 <configure_uart1+0x50>)
  400328:	a901      	add	r1, sp, #4
  40032a:	4620      	mov	r0, r4
  40032c:	4b09      	ldr	r3, [pc, #36]	; (400354 <configure_uart1+0x54>)
  40032e:	4798      	blx	r3
	uart_enable_tx(UART1);
  400330:	4620      	mov	r0, r4
  400332:	4b09      	ldr	r3, [pc, #36]	; (400358 <configure_uart1+0x58>)
  400334:	4798      	blx	r3
	uart_enable_rx(UART1);
  400336:	4620      	mov	r0, r4
  400338:	4b08      	ldr	r3, [pc, #32]	; (40035c <configure_uart1+0x5c>)
  40033a:	4798      	blx	r3
}
  40033c:	b005      	add	sp, #20
  40033e:	bd30      	pop	{r4, r5, pc}
  400340:	400e1000 	.word	0x400e1000
  400344:	00402009 	.word	0x00402009
  400348:	004025b5 	.word	0x004025b5
  40034c:	07270e00 	.word	0x07270e00
  400350:	400e0800 	.word	0x400e0800
  400354:	00402b61 	.word	0x00402b61
  400358:	00402b99 	.word	0x00402b99
  40035c:	00402ba1 	.word	0x00402ba1

00400360 <configure_usart1>:

void configure_usart1(uint32_t baudrate){
  400360:	b530      	push	{r4, r5, lr}
  400362:	b087      	sub	sp, #28
  400364:	4605      	mov	r5, r0
	pio_configure(PINS_USART1_PIO, PINS_USART1_TYPE, PINS_USART1_MASK, PINS_USART1_ATTR);
  400366:	2300      	movs	r3, #0
  400368:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  40036c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400370:	480f      	ldr	r0, [pc, #60]	; (4003b0 <configure_usart1+0x50>)
  400372:	4c10      	ldr	r4, [pc, #64]	; (4003b4 <configure_usart1+0x54>)
  400374:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_USART1);
  400376:	200f      	movs	r0, #15
  400378:	4c0f      	ldr	r4, [pc, #60]	; (4003b8 <configure_usart1+0x58>)
  40037a:	47a0      	blx	r4

	const sam_usart_opt_t usart_console_settings = {
  40037c:	2300      	movs	r3, #0
  40037e:	9303      	str	r3, [sp, #12]
  400380:	9304      	str	r3, [sp, #16]
  400382:	9305      	str	r3, [sp, #20]
  400384:	9500      	str	r5, [sp, #0]
  400386:	23c0      	movs	r3, #192	; 0xc0
  400388:	9301      	str	r3, [sp, #4]
  40038a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40038e:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400390:	200f      	movs	r0, #15
  400392:	47a0      	blx	r4
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};

	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	usart_init_rs232(USART_SERIAL, &usart_console_settings, sysclk_get_peripheral_hz());
  400394:	4c09      	ldr	r4, [pc, #36]	; (4003bc <configure_usart1+0x5c>)
  400396:	4a0a      	ldr	r2, [pc, #40]	; (4003c0 <configure_usart1+0x60>)
  400398:	4669      	mov	r1, sp
  40039a:	4620      	mov	r0, r4
  40039c:	4b09      	ldr	r3, [pc, #36]	; (4003c4 <configure_usart1+0x64>)
  40039e:	4798      	blx	r3
	usart_enable_tx(USART_SERIAL);
  4003a0:	4620      	mov	r0, r4
  4003a2:	4b09      	ldr	r3, [pc, #36]	; (4003c8 <configure_usart1+0x68>)
  4003a4:	4798      	blx	r3
	usart_enable_rx(USART_SERIAL);
  4003a6:	4620      	mov	r0, r4
  4003a8:	4b08      	ldr	r3, [pc, #32]	; (4003cc <configure_usart1+0x6c>)
  4003aa:	4798      	blx	r3
}
  4003ac:	b007      	add	sp, #28
  4003ae:	bd30      	pop	{r4, r5, pc}
  4003b0:	400e0e00 	.word	0x400e0e00
  4003b4:	00402009 	.word	0x00402009
  4003b8:	004025b5 	.word	0x004025b5
  4003bc:	40028000 	.word	0x40028000
  4003c0:	07270e00 	.word	0x07270e00
  4003c4:	00402c61 	.word	0x00402c61
  4003c8:	00402cb5 	.word	0x00402cb5
  4003cc:	00402cbd 	.word	0x00402cbd

004003d0 <hal_io_init>:
*
*	Initializes the board and IO pins. This function must be called before
*	any other call to an IO device. Example: hal_io_init(); hal_mtimer_Start();...
*
*/
void hal_io_init(void){
  4003d0:	b510      	push	{r4, lr}
	board_init();		//initialize board pins
  4003d2:	4b05      	ldr	r3, [pc, #20]	; (4003e8 <hal_io_init+0x18>)
  4003d4:	4798      	blx	r3
  4003d6:	200b      	movs	r0, #11
  4003d8:	4c04      	ldr	r4, [pc, #16]	; (4003ec <hal_io_init+0x1c>)
  4003da:	47a0      	blx	r4
  4003dc:	200c      	movs	r0, #12
  4003de:	47a0      	blx	r4
  4003e0:	200d      	movs	r0, #13
  4003e2:	47a0      	blx	r4
  4003e4:	bd10      	pop	{r4, pc}
  4003e6:	bf00      	nop
  4003e8:	00401d89 	.word	0x00401d89
  4003ec:	004025b5 	.word	0x004025b5

004003f0 <hal_mtimer_start>:
*	maximum ms_Step is 1000.
*
*	@param ms_steps steps needed to increment the timer by one
*/
#define RTT_MAX_VAL	32768
void hal_mtimer_start( uint32_t ms_steps ){
  4003f0:	b538      	push	{r3, r4, r5, lr}
  4003f2:	4604      	mov	r4, r0
	// The RTT counts in steps of ~30us (1/2^15 seconds or  1/32768 seconds). 
	// 33 steps are 1.007ms (close enough)	
	uint32_t steps = ms_steps*33 > RTT_MAX_VAL ? RTT_MAX_VAL : ms_steps*33; 
	
	rtt_sel_source(RTT, false);
  4003f4:	4d08      	ldr	r5, [pc, #32]	; (400418 <hal_mtimer_start+0x28>)
  4003f6:	2100      	movs	r1, #0
  4003f8:	4628      	mov	r0, r5
  4003fa:	4b08      	ldr	r3, [pc, #32]	; (40041c <hal_mtimer_start+0x2c>)
  4003fc:	4798      	blx	r3
	rtt_init(RTT, steps ); 
  4003fe:	eb04 1444 	add.w	r4, r4, r4, lsl #5
  400402:	4621      	mov	r1, r4
  400404:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  400408:	bf28      	it	cs
  40040a:	f44f 4100 	movcs.w	r1, #32768	; 0x8000
  40040e:	b289      	uxth	r1, r1
  400410:	4628      	mov	r0, r5
  400412:	4b03      	ldr	r3, [pc, #12]	; (400420 <hal_mtimer_start+0x30>)
  400414:	4798      	blx	r3
  400416:	bd38      	pop	{r3, r4, r5, pc}
  400418:	400e1430 	.word	0x400e1430
  40041c:	0040013d 	.word	0x0040013d
  400420:	00400129 	.word	0x00400129

00400424 <RTT_Handler>:
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
}

//The Timer ISR. What in upper layers is called timer, here is implemented as an RTT
void RTT_Handler(void){
  400424:	b508      	push	{r3, lr}
	uint32_t ul_status = rtt_get_status(RTT);
  400426:	4805      	ldr	r0, [pc, #20]	; (40043c <RTT_Handler+0x18>)
  400428:	4b05      	ldr	r3, [pc, #20]	; (400440 <RTT_Handler+0x1c>)
  40042a:	4798      	blx	r3
	
	//Check whether the Timer has been incremented since the last read
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
  40042c:	f010 0f02 	tst.w	r0, #2
  400430:	d002      	beq.n	400438 <RTT_Handler+0x14>
		(*timer_callback)(); //call registered callback
  400432:	4b04      	ldr	r3, [pc, #16]	; (400444 <RTT_Handler+0x20>)
  400434:	681b      	ldr	r3, [r3, #0]
  400436:	4798      	blx	r3
  400438:	bd08      	pop	{r3, pc}
  40043a:	bf00      	nop
  40043c:	400e1430 	.word	0x400e1430
  400440:	00400191 	.word	0x00400191
  400444:	20000cc0 	.word	0x20000cc0

00400448 <hal_mtimer_stop>:
/**
*	MIllisecond Timer Stop
*
*	Stops the Timer
*/
void hal_mtimer_stop(void){
  400448:	b508      	push	{r3, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40044a:	4b06      	ldr	r3, [pc, #24]	; (400464 <hal_mtimer_stop+0x1c>)
  40044c:	2208      	movs	r2, #8
  40044e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400452:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_DisableIRQ(RTT_IRQn);
	NVIC_ClearPendingIRQ(RTT_IRQn);
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN);
  400456:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40045a:	4803      	ldr	r0, [pc, #12]	; (400468 <hal_mtimer_stop+0x20>)
  40045c:	4b03      	ldr	r3, [pc, #12]	; (40046c <hal_mtimer_stop+0x24>)
  40045e:	4798      	blx	r3
  400460:	bd08      	pop	{r3, pc}
  400462:	bf00      	nop
  400464:	e000e100 	.word	0xe000e100
  400468:	400e1430 	.word	0x400e1430
  40046c:	00400169 	.word	0x00400169

00400470 <hal_mtimer_read>:
*
*	Returns the counter value in the millisecond timer
*
*	@return the count so far
*/
uint32_t hal_mtimer_read( void ){
  400470:	b508      	push	{r3, lr}
	return rtt_read_timer_value (RTT);
  400472:	4802      	ldr	r0, [pc, #8]	; (40047c <hal_mtimer_read+0xc>)
  400474:	4b02      	ldr	r3, [pc, #8]	; (400480 <hal_mtimer_read+0x10>)
  400476:	4798      	blx	r3
}
  400478:	bd08      	pop	{r3, pc}
  40047a:	bf00      	nop
  40047c:	400e1430 	.word	0x400e1430
  400480:	0040017d 	.word	0x0040017d

00400484 <hal_led_start>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400484:	4b0f      	ldr	r3, [pc, #60]	; (4004c4 <hal_led_start+0x40>)
  400486:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40048a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40048c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400490:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400494:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400496:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40049a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  40049e:	f5a2 32f9 	sub.w	r2, r2, #127488	; 0x1f200
  4004a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004a6:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004a8:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004b0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004ba:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4004c0:	4770      	bx	lr
  4004c2:	bf00      	nop
  4004c4:	400e1200 	.word	0x400e1200

004004c8 <hal_led_write>:
*	@param state on or off
*/
void hal_led_write( tLedNum  lednum, tLedState state ){
	uint32_t IOLine = 0;
	
	switch(lednum){
  4004c8:	2804      	cmp	r0, #4
  4004ca:	d80e      	bhi.n	4004ea <hal_led_write+0x22>
  4004cc:	e8df f000 	tbb	[pc, r0]
  4004d0:	09070503 	.word	0x09070503
  4004d4:	0b          	.byte	0x0b
  4004d5:	00          	.byte	0x00
		case Led0: IOLine = IOPORT_CREATE_PIN(PIOC, 23); break;
  4004d6:	2257      	movs	r2, #87	; 0x57
  4004d8:	e008      	b.n	4004ec <hal_led_write+0x24>
		case Led1: IOLine = IOPORT_CREATE_PIN(PIOC, 20); break;
  4004da:	2254      	movs	r2, #84	; 0x54
  4004dc:	e006      	b.n	4004ec <hal_led_write+0x24>
		case Led2: IOLine = IOPORT_CREATE_PIN(PIOA, 16); break;
  4004de:	2210      	movs	r2, #16
  4004e0:	e004      	b.n	4004ec <hal_led_write+0x24>
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
  4004e2:	2256      	movs	r2, #86	; 0x56
  4004e4:	e002      	b.n	4004ec <hal_led_write+0x24>
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
  4004e6:	2253      	movs	r2, #83	; 0x53
  4004e8:	e000      	b.n	4004ec <hal_led_write+0x24>
*
*	@param lednum the LED to be set
*	@param state on or off
*/
void hal_led_write( tLedNum  lednum, tLedState state ){
	uint32_t IOLine = 0;
  4004ea:	2200      	movs	r2, #0
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4004ec:	0953      	lsrs	r3, r2, #5
  4004ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004f2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004f6:	025b      	lsls	r3, r3, #9
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  4004f8:	b931      	cbnz	r1, 400508 <hal_led_write+0x40>
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4004fa:	f002 021f 	and.w	r2, r2, #31
  4004fe:	2101      	movs	r1, #1
  400500:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400504:	631a      	str	r2, [r3, #48]	; 0x30
  400506:	4770      	bx	lr
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400508:	f002 021f 	and.w	r2, r2, #31
  40050c:	2101      	movs	r1, #1
  40050e:	fa01 f202 	lsl.w	r2, r1, r2
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400512:	635a      	str	r2, [r3, #52]	; 0x34
  400514:	4770      	bx	lr
  400516:	bf00      	nop

00400518 <hal_led_read>:
*	@return the state of lednum
*/
tLedState hal_led_read( tLedNum lednum ){
	uint32_t IOLine = 0;
	
	switch(lednum){
  400518:	2804      	cmp	r0, #4
  40051a:	d80e      	bhi.n	40053a <hal_led_read+0x22>
  40051c:	e8df f000 	tbb	[pc, r0]
  400520:	09070503 	.word	0x09070503
  400524:	0b          	.byte	0x0b
  400525:	00          	.byte	0x00
		case Led0: IOLine = IOPORT_CREATE_PIN(PIOC, 23); break;
  400526:	2257      	movs	r2, #87	; 0x57
  400528:	e008      	b.n	40053c <hal_led_read+0x24>
		case Led1: IOLine = IOPORT_CREATE_PIN(PIOC, 20); break;
  40052a:	2254      	movs	r2, #84	; 0x54
  40052c:	e006      	b.n	40053c <hal_led_read+0x24>
		case Led2: IOLine = IOPORT_CREATE_PIN(PIOA, 16); break;
  40052e:	2210      	movs	r2, #16
  400530:	e004      	b.n	40053c <hal_led_read+0x24>
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
  400532:	2256      	movs	r2, #86	; 0x56
  400534:	e002      	b.n	40053c <hal_led_read+0x24>
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
  400536:	2253      	movs	r2, #83	; 0x53
  400538:	e000      	b.n	40053c <hal_led_read+0x24>
*	@param	lednum the LED to be read
*
*	@return the state of lednum
*/
tLedState hal_led_read( tLedNum lednum ){
	uint32_t IOLine = 0;
  40053a:	2200      	movs	r2, #0
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40053c:	0953      	lsrs	r3, r2, #5
  40053e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400542:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400546:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400548:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
		default: /* Error */ ;
	}

	return !ioport_get_pin_level(IOLine); //negated since pin levels and LEDs state are opposite
  40054a:	f002 021f 	and.w	r2, r2, #31
  40054e:	2301      	movs	r3, #1
  400550:	fa03 f202 	lsl.w	r2, r3, r2
  400554:	420a      	tst	r2, r1
}
  400556:	bf0c      	ite	eq
  400558:	4618      	moveq	r0, r3
  40055a:	2000      	movne	r0, #0
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <hal_clock_start>:
*	Clock Start
*
*	Starts and initializes the system clock's time
*
*/
void hal_clock_start( void ){
  400560:	b510      	push	{r4, lr}
	rtc_setup();
}

void rtc_setup(){
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400562:	2000      	movs	r0, #0
  400564:	4b05      	ldr	r3, [pc, #20]	; (40057c <hal_clock_start+0x1c>)
  400566:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  400568:	4c05      	ldr	r4, [pc, #20]	; (400580 <hal_clock_start+0x20>)
  40056a:	47a0      	blx	r4
  40056c:	2800      	cmp	r0, #0
  40056e:	d0fc      	beq.n	40056a <hal_clock_start+0xa>
	rtc_set_hour_mode(RTC, 0); //24-hrs mode by default
  400570:	2100      	movs	r1, #0
  400572:	4804      	ldr	r0, [pc, #16]	; (400584 <hal_clock_start+0x24>)
  400574:	4b04      	ldr	r3, [pc, #16]	; (400588 <hal_clock_start+0x28>)
  400576:	4798      	blx	r3
  400578:	bd10      	pop	{r4, pc}
  40057a:	bf00      	nop
  40057c:	004024ed 	.word	0x004024ed
  400580:	00402511 	.word	0x00402511
  400584:	400e1460 	.word	0x400e1460
  400588:	00402609 	.word	0x00402609

0040058c <hal_clock_write>:
*
*	Write the system clock's time
*
*	@param t a pointer to a tTime structure specifying the time
*/
void hal_clock_write( tTime* t ){
  40058c:	b570      	push	{r4, r5, r6, lr}
  40058e:	b082      	sub	sp, #8
  400590:	4604      	mov	r4, r0
	volatile tTime* t_ptr = t;
	rtc_set_date( RTC, t->year, t->month, t->day, 1 );	//not too sure how week works, but if week is
  400592:	4d08      	ldr	r5, [pc, #32]	; (4005b4 <hal_clock_write+0x28>)
  400594:	2301      	movs	r3, #1
  400596:	9300      	str	r3, [sp, #0]
  400598:	68c3      	ldr	r3, [r0, #12]
  40059a:	6902      	ldr	r2, [r0, #16]
  40059c:	6941      	ldr	r1, [r0, #20]
  40059e:	4628      	mov	r0, r5
  4005a0:	4e05      	ldr	r6, [pc, #20]	; (4005b8 <hal_clock_write+0x2c>)
  4005a2:	47b0      	blx	r6
														//set to 0, setting of the rest fails
	rtc_set_time( RTC, t->hours, t->minutes, t->seconds );
  4005a4:	6823      	ldr	r3, [r4, #0]
  4005a6:	6862      	ldr	r2, [r4, #4]
  4005a8:	68a1      	ldr	r1, [r4, #8]
  4005aa:	4628      	mov	r0, r5
  4005ac:	4c03      	ldr	r4, [pc, #12]	; (4005bc <hal_clock_write+0x30>)
  4005ae:	47a0      	blx	r4
}
  4005b0:	b002      	add	sp, #8
  4005b2:	bd70      	pop	{r4, r5, r6, pc}
  4005b4:	400e1460 	.word	0x400e1460
  4005b8:	00402785 	.word	0x00402785
  4005bc:	0040267d 	.word	0x0040267d

004005c0 <hal_clock_read>:
*
*	Reads the system's clock time
*
*	@param t a pointer to a tTime structure 
*/
void hal_clock_read( tTime* t ){
  4005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005c2:	b085      	sub	sp, #20
  4005c4:	4604      	mov	r4, r0
	uint32_t dummy_week = 0;
  4005c6:	ad04      	add	r5, sp, #16
  4005c8:	2300      	movs	r3, #0
  4005ca:	f845 3d04 	str.w	r3, [r5, #-4]!
	
	rtc_get_time(RTC, &(t->hours), &(t->minutes), &(t->seconds));
  4005ce:	4e0a      	ldr	r6, [pc, #40]	; (4005f8 <hal_clock_read+0x38>)
  4005d0:	4603      	mov	r3, r0
  4005d2:	1d02      	adds	r2, r0, #4
  4005d4:	f100 0108 	add.w	r1, r0, #8
  4005d8:	4630      	mov	r0, r6
  4005da:	4f08      	ldr	r7, [pc, #32]	; (4005fc <hal_clock_read+0x3c>)
  4005dc:	47b8      	blx	r7
	rtc_get_date(RTC, &(t->year), &(t->month), &(t->day), &dummy_week);
  4005de:	9500      	str	r5, [sp, #0]
  4005e0:	f104 030c 	add.w	r3, r4, #12
  4005e4:	f104 0210 	add.w	r2, r4, #16
  4005e8:	f104 0114 	add.w	r1, r4, #20
  4005ec:	4630      	mov	r0, r6
  4005ee:	4c04      	ldr	r4, [pc, #16]	; (400600 <hal_clock_read+0x40>)
  4005f0:	47a0      	blx	r4
}
  4005f2:	b005      	add	sp, #20
  4005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4005f6:	bf00      	nop
  4005f8:	400e1460 	.word	0x400e1460
  4005fc:	00402621 	.word	0x00402621
  400600:	00402711 	.word	0x00402711

00400604 <hal_display_start>:
/**
*	Display Start
*
*	Initializes and starts the board's display
*/
void hal_display_start(void){
  400604:	b508      	push	{r3, lr}
	ssd1306_init();	//on-board OLED
  400606:	4b01      	ldr	r3, [pc, #4]	; (40060c <hal_display_start+0x8>)
  400608:	4798      	blx	r3
  40060a:	bd08      	pop	{r3, pc}
  40060c:	00400ed5 	.word	0x00400ed5

00400610 <hal_display_putc>:
*
*	Writes a character to the display
*
*	@param character the character to be printed
*/
void hal_display_putc( uint8_t character ){
  400610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400614:	b082      	sub	sp, #8
	uint8_t *char_ptr, i=0;
	char_ptr = font_table[character - 32];
  400616:	3820      	subs	r0, #32
  400618:	4b1f      	ldr	r3, [pc, #124]	; (400698 <hal_display_putc+0x88>)
  40061a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
	
	for (i = 1; i <= char_ptr[0]; i++) {
  40061e:	783b      	ldrb	r3, [r7, #0]
  400620:	b303      	cbz	r3, 400664 <hal_display_putc+0x54>
  400622:	2401      	movs	r4, #1
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  400624:	4e1d      	ldr	r6, [pc, #116]	; (40069c <hal_display_putc+0x8c>)
  400626:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4006a8 <hal_display_putc+0x98>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40062a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4006ac <hal_display_putc+0x9c>
		ssd1306_write_data(char_ptr[i]);
  40062e:	f817 a004 	ldrb.w	sl, [r7, r4]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400632:	ad02      	add	r5, sp, #8
  400634:	2302      	movs	r3, #2
  400636:	f845 3d04 	str.w	r3, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40063a:	4629      	mov	r1, r5
  40063c:	4630      	mov	r0, r6
  40063e:	47c8      	blx	r9
  400640:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400644:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  400648:	f8c6 a00c 	str.w	sl, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  40064c:	2056      	movs	r0, #86	; 0x56
  40064e:	4b14      	ldr	r3, [pc, #80]	; (4006a0 <hal_display_putc+0x90>)
  400650:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400652:	4629      	mov	r1, r5
  400654:	4630      	mov	r0, r6
  400656:	4b13      	ldr	r3, [pc, #76]	; (4006a4 <hal_display_putc+0x94>)
  400658:	4798      	blx	r3
*/
void hal_display_putc( uint8_t character ){
	uint8_t *char_ptr, i=0;
	char_ptr = font_table[character - 32];
	
	for (i = 1; i <= char_ptr[0]; i++) {
  40065a:	3401      	adds	r4, #1
  40065c:	b2e4      	uxtb	r4, r4
  40065e:	783b      	ldrb	r3, [r7, #0]
  400660:	42a3      	cmp	r3, r4
  400662:	d2e4      	bcs.n	40062e <hal_display_putc+0x1e>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400664:	ac02      	add	r4, sp, #8
  400666:	2302      	movs	r3, #2
  400668:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40066c:	4d0b      	ldr	r5, [pc, #44]	; (40069c <hal_display_putc+0x8c>)
  40066e:	4621      	mov	r1, r4
  400670:	4628      	mov	r0, r5
  400672:	4b0d      	ldr	r3, [pc, #52]	; (4006a8 <hal_display_putc+0x98>)
  400674:	4798      	blx	r3
  400676:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40067a:	4b0c      	ldr	r3, [pc, #48]	; (4006ac <hal_display_putc+0x9c>)
  40067c:	631a      	str	r2, [r3, #48]	; 0x30
  40067e:	2300      	movs	r3, #0
  400680:	60eb      	str	r3, [r5, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  400682:	2056      	movs	r0, #86	; 0x56
  400684:	4b06      	ldr	r3, [pc, #24]	; (4006a0 <hal_display_putc+0x90>)
  400686:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400688:	4621      	mov	r1, r4
  40068a:	4628      	mov	r0, r5
  40068c:	4b05      	ldr	r3, [pc, #20]	; (4006a4 <hal_display_putc+0x94>)
  40068e:	4798      	blx	r3
		ssd1306_write_data(char_ptr[i]);
	}
	
	//put extra space between characters
	ssd1306_write_data(0x00); 
}
  400690:	b002      	add	sp, #8
  400692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400696:	bf00      	nop
  400698:	20000034 	.word	0x20000034
  40069c:	40008000 	.word	0x40008000
  4006a0:	20000001 	.word	0x20000001
  4006a4:	00401ce1 	.word	0x00401ce1
  4006a8:	00401cb5 	.word	0x00401cb5
  4006ac:	400e1200 	.word	0x400e1200

004006b0 <hal_display_cls>:
*
*	Clears the Display (like the old MS-DOS cls)
*
*	@param string the formatted output
*/
void hal_display_cls(void){
  4006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006b4:	b083      	sub	sp, #12
  4006b6:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4006ba:	f8df b078 	ldr.w	fp, [pc, #120]	; 400734 <hal_display_cls+0x84>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4006be:	4f1a      	ldr	r7, [pc, #104]	; (400728 <hal_display_cls+0x78>)
  4006c0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 400738 <hal_display_cls+0x88>
  4006c4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 40073c <hal_display_cls+0x8c>
  4006c8:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4006ca:	f00a 0007 	and.w	r0, sl, #7
  4006ce:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4006d2:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4006d4:	2010      	movs	r0, #16
  4006d6:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4006d8:	2000      	movs	r0, #0
  4006da:	47d8      	blx	fp
  4006dc:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4006de:	ac02      	add	r4, sp, #8
  4006e0:	2302      	movs	r3, #2
  4006e2:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4006e6:	4621      	mov	r1, r4
  4006e8:	4630      	mov	r0, r6
  4006ea:	47c8      	blx	r9
  4006ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4006f0:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  4006f4:	2300      	movs	r3, #0
  4006f6:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4006f8:	2056      	movs	r0, #86	; 0x56
  4006fa:	4b0c      	ldr	r3, [pc, #48]	; (40072c <hal_display_cls+0x7c>)
  4006fc:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4006fe:	4621      	mov	r1, r4
  400700:	4630      	mov	r0, r6
  400702:	4b0b      	ldr	r3, [pc, #44]	; (400730 <hal_display_cls+0x80>)
  400704:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  400706:	3d01      	subs	r5, #1
  400708:	d1e9      	bne.n	4006de <hal_display_cls+0x2e>
  40070a:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40070e:	f1ba 0f04 	cmp.w	sl, #4
  400712:	d1da      	bne.n	4006ca <hal_display_cls+0x1a>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400714:	20b0      	movs	r0, #176	; 0xb0
  400716:	4c07      	ldr	r4, [pc, #28]	; (400734 <hal_display_cls+0x84>)
  400718:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40071a:	2010      	movs	r0, #16
  40071c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40071e:	2000      	movs	r0, #0
  400720:	47a0      	blx	r4
	ssd1306_clear();
	ssd1306_set_page_address(0);
	ssd1306_set_column_address(0);
}
  400722:	b003      	add	sp, #12
  400724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400728:	40008000 	.word	0x40008000
  40072c:	20000001 	.word	0x20000001
  400730:	00401ce1 	.word	0x00401ce1
  400734:	004002b9 	.word	0x004002b9
  400738:	00401cb5 	.word	0x00401cb5
  40073c:	400e1200 	.word	0x400e1200

00400740 <hal_display_gotoxy>:
*	Sets the cursor in a given coordinate. (Like Borland's gotoxy)
*
*	@param x x coordinate
*	@param y y coordinate
*/
void hal_display_gotoxy( uint32_t x, uint32_t y ){
  400740:	b570      	push	{r4, r5, r6, lr}
  400742:	460d      	mov	r5, r1
	ssd1306_set_column_address(x);
  400744:	b2c6      	uxtb	r6, r0
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400746:	f3c6 1002 	ubfx	r0, r6, #4, #3
  40074a:	f040 0010 	orr.w	r0, r0, #16
  40074e:	4c05      	ldr	r4, [pc, #20]	; (400764 <hal_display_gotoxy+0x24>)
  400750:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400752:	f006 000f 	and.w	r0, r6, #15
  400756:	47a0      	blx	r4
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400758:	f005 0007 	and.w	r0, r5, #7
  40075c:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400760:	47a0      	blx	r4
  400762:	bd70      	pop	{r4, r5, r6, pc}
  400764:	004002b9 	.word	0x004002b9

00400768 <hal_display_numlines>:
*
*	@return number of lines in display
*/
uint32_t hal_display_numlines( void ){
	return 4; //4 lines in OLED
}
  400768:	2004      	movs	r0, #4
  40076a:	4770      	bx	lr

0040076c <hal_sensor_start>:
*
*	Initializes and starts a sensor
*
*	@param sensor the id of the sensor to be started
*/
void hal_sensor_start( tSensorId sensor_id ){
  40076c:	b538      	push	{r3, r4, r5, lr}
	switch( sensor_id ){
  40076e:	b110      	cbz	r0, 400776 <hal_sensor_start+0xa>
  400770:	2801      	cmp	r0, #1
  400772:	d01c      	beq.n	4007ae <hal_sensor_start+0x42>
  400774:	bd38      	pop	{r3, r4, r5, pc}
	return val;
}

static void light_start(void){
	//Configure ADC pin for light sensor
	gpio_configure_pin(LIGHT_SENSOR_GPIO, LIGHT_SENSOR_FLAGS);
  400776:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40077a:	2020      	movs	r0, #32
  40077c:	4b0d      	ldr	r3, [pc, #52]	; (4007b4 <hal_sensor_start+0x48>)
  40077e:	4798      	blx	r3
	
	//Enable ADC clock
	pmc_enable_periph_clk(ID_ADC);
  400780:	201d      	movs	r0, #29
  400782:	4b0d      	ldr	r3, [pc, #52]	; (4007b8 <hal_sensor_start+0x4c>)
  400784:	4798      	blx	r3
	
	//Configure ADC4 in free Running mode
	//(no need to use interrupts)
	adc_init(ADC, sysclk_get_cpu_hz(), 1000000, ADC_MR_STARTUP_SUT0);
  400786:	4c0d      	ldr	r4, [pc, #52]	; (4007bc <hal_sensor_start+0x50>)
  400788:	2300      	movs	r3, #0
  40078a:	4a0d      	ldr	r2, [pc, #52]	; (4007c0 <hal_sensor_start+0x54>)
  40078c:	490d      	ldr	r1, [pc, #52]	; (4007c4 <hal_sensor_start+0x58>)
  40078e:	4620      	mov	r0, r4
  400790:	4d0d      	ldr	r5, [pc, #52]	; (4007c8 <hal_sensor_start+0x5c>)
  400792:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_4);		//ADC channel 4
  400794:	2104      	movs	r1, #4
  400796:	4620      	mov	r0, r4
  400798:	4b0c      	ldr	r3, [pc, #48]	; (4007cc <hal_sensor_start+0x60>)
  40079a:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 1);	
  40079c:	2201      	movs	r2, #1
  40079e:	2100      	movs	r1, #0
  4007a0:	4620      	mov	r0, r4
  4007a2:	4b0b      	ldr	r3, [pc, #44]	; (4007d0 <hal_sensor_start+0x64>)
  4007a4:	4798      	blx	r3
	
	//Start 
	adc_start(ADC);		
  4007a6:	4620      	mov	r0, r4
  4007a8:	4b0a      	ldr	r3, [pc, #40]	; (4007d4 <hal_sensor_start+0x68>)
  4007aa:	4798      	blx	r3
  4007ac:	bd38      	pop	{r3, r4, r5, pc}
}

static void temp_start(void){
	at30tse_init();	
  4007ae:	4b0a      	ldr	r3, [pc, #40]	; (4007d8 <hal_sensor_start+0x6c>)
  4007b0:	4798      	blx	r3
  4007b2:	bd38      	pop	{r3, r4, r5, pc}
  4007b4:	004020f5 	.word	0x004020f5
  4007b8:	004025b5 	.word	0x004025b5
  4007bc:	40038000 	.word	0x40038000
  4007c0:	000f4240 	.word	0x000f4240
  4007c4:	07270e00 	.word	0x07270e00
  4007c8:	00401e99 	.word	0x00401e99
  4007cc:	00401ee5 	.word	0x00401ee5
  4007d0:	00401ecd 	.word	0x00401ecd
  4007d4:	00401edd 	.word	0x00401edd
  4007d8:	00400f8d 	.word	0x00400f8d
  4007dc:	00000000 	.word	0x00000000

004007e0 <hal_sensor_read>:
*
*	@param sensor the sensor to be read
*
*	@return the sensor reading
*/
uint32_t hal_sensor_read( tSensorId sensor_id ){
  4007e0:	b510      	push	{r4, lr}
  4007e2:	b084      	sub	sp, #16
	uint32_t val = 0;
	
	switch( sensor_id ){
  4007e4:	b110      	cbz	r0, 4007ec <hal_sensor_read+0xc>
  4007e6:	2801      	cmp	r0, #1
  4007e8:	d018      	beq.n	40081c <hal_sensor_read+0x3c>
  4007ea:	e033      	b.n	400854 <hal_sensor_read+0x74>
	return (uint32_t)ret_val; //return truncated temperature
}

static uint32_t light_read(void){
	//12-bit resolution read from channel 4
	return adc_get_channel_value(ADC, ADC_CHANNEL_4);
  4007ec:	2104      	movs	r1, #4
  4007ee:	481e      	ldr	r0, [pc, #120]	; (400868 <hal_sensor_read+0x88>)
  4007f0:	4b1e      	ldr	r3, [pc, #120]	; (40086c <hal_sensor_read+0x8c>)
  4007f2:	4798      	blx	r3
	uint32_t val = 0;
	
	switch( sensor_id ){
		case SensorLight:
			val = light_read();		
			val = 100 - ( val/4095.0 * 100 ); //normalize to 100, 0 being darkest
  4007f4:	4b1e      	ldr	r3, [pc, #120]	; (400870 <hal_sensor_read+0x90>)
  4007f6:	4798      	blx	r3
  4007f8:	a319      	add	r3, pc, #100	; (adr r3, 400860 <hal_sensor_read+0x80>)
  4007fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4007fe:	4c1d      	ldr	r4, [pc, #116]	; (400874 <hal_sensor_read+0x94>)
  400800:	47a0      	blx	r4
  400802:	2200      	movs	r2, #0
  400804:	4b1c      	ldr	r3, [pc, #112]	; (400878 <hal_sensor_read+0x98>)
  400806:	4c1d      	ldr	r4, [pc, #116]	; (40087c <hal_sensor_read+0x9c>)
  400808:	47a0      	blx	r4
  40080a:	4602      	mov	r2, r0
  40080c:	460b      	mov	r3, r1
  40080e:	2000      	movs	r0, #0
  400810:	4919      	ldr	r1, [pc, #100]	; (400878 <hal_sensor_read+0x98>)
  400812:	4c1b      	ldr	r4, [pc, #108]	; (400880 <hal_sensor_read+0xa0>)
  400814:	47a0      	blx	r4
  400816:	4b1b      	ldr	r3, [pc, #108]	; (400884 <hal_sensor_read+0xa4>)
  400818:	4798      	blx	r3
			break;
  40081a:	e01c      	b.n	400856 <hal_sensor_read+0x76>
static void temp_start(void){
	at30tse_init();	
}

static uint32_t temp_read(void){
	volatile double ret_val = 0;
  40081c:	2200      	movs	r2, #0
  40081e:	2300      	movs	r3, #0
  400820:	e9cd 2300 	strd	r2, r3, [sp]
	volatile uint64_t tries = 3;
  400824:	2203      	movs	r2, #3
  400826:	2300      	movs	r3, #0
  400828:	e9cd 2302 	strd	r2, r3, [sp, #8]
	
	//do three attempts to read temperature
	while( at30tse_read_temperature(&ret_val) != TWI_SUCCESS && tries++ <= 3);
  40082c:	4c16      	ldr	r4, [pc, #88]	; (400888 <hal_sensor_read+0xa8>)
  40082e:	4668      	mov	r0, sp
  400830:	47a0      	blx	r4
  400832:	b150      	cbz	r0, 40084a <hal_sensor_read+0x6a>
  400834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400838:	1c50      	adds	r0, r2, #1
  40083a:	f143 0100 	adc.w	r1, r3, #0
  40083e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400842:	2b00      	cmp	r3, #0
  400844:	bf08      	it	eq
  400846:	2a04      	cmpeq	r2, #4
  400848:	d3f1      	bcc.n	40082e <hal_sensor_read+0x4e>
	
	return (uint32_t)ret_val; //return truncated temperature
  40084a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40084e:	4b0d      	ldr	r3, [pc, #52]	; (400884 <hal_sensor_read+0xa4>)
  400850:	4798      	blx	r3
			val = light_read();		
			val = 100 - ( val/4095.0 * 100 ); //normalize to 100, 0 being darkest
			break;
		case SensorTemp:	
			val = temp_read();		
			break;
  400852:	e000      	b.n	400856 <hal_sensor_read+0x76>
*	@param sensor the sensor to be read
*
*	@return the sensor reading
*/
uint32_t hal_sensor_read( tSensorId sensor_id ){
	uint32_t val = 0;
  400854:	2000      	movs	r0, #0
			break;
		default:			/*Error*/;
	}
	
	return val;
}
  400856:	b004      	add	sp, #16
  400858:	bd10      	pop	{r4, pc}
  40085a:	bf00      	nop
  40085c:	f3af 8000 	nop.w
  400860:	00000000 	.word	0x00000000
  400864:	40affe00 	.word	0x40affe00
  400868:	40038000 	.word	0x40038000
  40086c:	00401ef1 	.word	0x00401ef1
  400870:	004034f5 	.word	0x004034f5
  400874:	00403835 	.word	0x00403835
  400878:	40590000 	.word	0x40590000
  40087c:	004035e1 	.word	0x004035e1
  400880:	00403279 	.word	0x00403279
  400884:	00403a05 	.word	0x00403a05
  400888:	00400ff9 	.word	0x00400ff9

0040088c <hal_button_start_int>:
*	Starts buttons in the board. Every time a button is pressed, the registered callback
*	is called. 
*
*	@param callback Button pressed callback
*/
void hal_button_start_int( void (*callback) (tButtonNum) ){
  40088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400890:	b083      	sub	sp, #12
	//NOTES:
	//	-Button interrupts trigger on raising edge (see PIN_PUSHBUTTON_x_ATTR)
	
	//set callback
	button_callback = callback; 
  400892:	4b38      	ldr	r3, [pc, #224]	; (400974 <hal_button_start_int+0xe8>)
  400894:	6018      	str	r0, [r3, #0]

	// Configure Pushbutton 0
	pmc_enable_periph_clk(PIN_PUSHBUTTON_0_ID);
  400896:	200b      	movs	r0, #11
  400898:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 400990 <hal_button_start_int+0x104>
  40089c:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_0_PIO, PIN_PUSHBUTTON_0_MASK, 10);
  40089e:	220a      	movs	r2, #10
  4008a0:	2104      	movs	r1, #4
  4008a2:	4835      	ldr	r0, [pc, #212]	; (400978 <hal_button_start_int+0xec>)
  4008a4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 400994 <hal_button_start_int+0x108>
  4008a8:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_0_PIO, PIN_PUSHBUTTON_0_ID,
  4008aa:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 400998 <hal_button_start_int+0x10c>
  4008ae:	f8cd 8000 	str.w	r8, [sp]
  4008b2:	2379      	movs	r3, #121	; 0x79
  4008b4:	2204      	movs	r2, #4
  4008b6:	210b      	movs	r1, #11
  4008b8:	482f      	ldr	r0, [pc, #188]	; (400978 <hal_button_start_int+0xec>)
  4008ba:	4f30      	ldr	r7, [pc, #192]	; (40097c <hal_button_start_int+0xf0>)
  4008bc:	47b8      	blx	r7
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4008be:	4e30      	ldr	r6, [pc, #192]	; (400980 <hal_button_start_int+0xf4>)
  4008c0:	f44f 6b00 	mov.w	fp, #2048	; 0x800
  4008c4:	f8c6 b000 	str.w	fp, [r6]
					PIN_PUSHBUTTON_0_MASK, PIN_PUSHBUTTON_0_ATTR, button_handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_0_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_0_PIO, (IRQn_Type) PIN_PUSHBUTTON_0_ID, buttons_irq_priority);
  4008c8:	2205      	movs	r2, #5
  4008ca:	210b      	movs	r1, #11
  4008cc:	482a      	ldr	r0, [pc, #168]	; (400978 <hal_button_start_int+0xec>)
  4008ce:	4d2d      	ldr	r5, [pc, #180]	; (400984 <hal_button_start_int+0xf8>)
  4008d0:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_0_PIO, PIN_PUSHBUTTON_0_MASK);
  4008d2:	2104      	movs	r1, #4
  4008d4:	4828      	ldr	r0, [pc, #160]	; (400978 <hal_button_start_int+0xec>)
  4008d6:	4c2c      	ldr	r4, [pc, #176]	; (400988 <hal_button_start_int+0xfc>)
  4008d8:	47a0      	blx	r4
	
	// Configure Pushbutton 1
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  4008da:	200b      	movs	r0, #11
  4008dc:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  4008de:	220a      	movs	r2, #10
  4008e0:	2101      	movs	r1, #1
  4008e2:	4825      	ldr	r0, [pc, #148]	; (400978 <hal_button_start_int+0xec>)
  4008e4:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  4008e6:	f8cd 8000 	str.w	r8, [sp]
  4008ea:	2379      	movs	r3, #121	; 0x79
  4008ec:	2201      	movs	r2, #1
  4008ee:	210b      	movs	r1, #11
  4008f0:	4821      	ldr	r0, [pc, #132]	; (400978 <hal_button_start_int+0xec>)
  4008f2:	47b8      	blx	r7
  4008f4:	f8c6 b000 	str.w	fp, [r6]
					PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, button_handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, buttons_irq_priority);
  4008f8:	2205      	movs	r2, #5
  4008fa:	210b      	movs	r1, #11
  4008fc:	481e      	ldr	r0, [pc, #120]	; (400978 <hal_button_start_int+0xec>)
  4008fe:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  400900:	2101      	movs	r1, #1
  400902:	481d      	ldr	r0, [pc, #116]	; (400978 <hal_button_start_int+0xec>)
  400904:	47a0      	blx	r4

	// Configure Pushbutton 2
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  400906:	200d      	movs	r0, #13
  400908:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  40090a:	220a      	movs	r2, #10
  40090c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400910:	481e      	ldr	r0, [pc, #120]	; (40098c <hal_button_start_int+0x100>)
  400912:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  400914:	f8cd 8000 	str.w	r8, [sp]
  400918:	2379      	movs	r3, #121	; 0x79
  40091a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40091e:	210d      	movs	r1, #13
  400920:	481a      	ldr	r0, [pc, #104]	; (40098c <hal_button_start_int+0x100>)
  400922:	47b8      	blx	r7
  400924:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  400928:	f8c6 b000 	str.w	fp, [r6]
					PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, button_handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, buttons_irq_priority);
  40092c:	2205      	movs	r2, #5
  40092e:	210d      	movs	r1, #13
  400930:	4816      	ldr	r0, [pc, #88]	; (40098c <hal_button_start_int+0x100>)
  400932:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  400934:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400938:	4814      	ldr	r0, [pc, #80]	; (40098c <hal_button_start_int+0x100>)
  40093a:	47a0      	blx	r4

	// Configure Pushbutton 3
	pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  40093c:	200d      	movs	r0, #13
  40093e:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  400940:	220a      	movs	r2, #10
  400942:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400946:	4811      	ldr	r0, [pc, #68]	; (40098c <hal_button_start_int+0x100>)
  400948:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  40094a:	f8cd 8000 	str.w	r8, [sp]
  40094e:	2379      	movs	r3, #121	; 0x79
  400950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400954:	210d      	movs	r1, #13
  400956:	480d      	ldr	r0, [pc, #52]	; (40098c <hal_button_start_int+0x100>)
  400958:	47b8      	blx	r7
  40095a:	f8c6 b000 	str.w	fp, [r6]
					PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, button_handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_3_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, buttons_irq_priority);
  40095e:	2205      	movs	r2, #5
  400960:	210d      	movs	r1, #13
  400962:	480a      	ldr	r0, [pc, #40]	; (40098c <hal_button_start_int+0x100>)
  400964:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  400966:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40096a:	4808      	ldr	r0, [pc, #32]	; (40098c <hal_button_start_int+0x100>)
  40096c:	47a0      	blx	r4
}
  40096e:	b003      	add	sp, #12
  400970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400974:	20000cbc 	.word	0x20000cbc
  400978:	400e0e00 	.word	0x400e0e00
  40097c:	0040235d 	.word	0x0040235d
  400980:	e000e100 	.word	0xe000e100
  400984:	00402405 	.word	0x00402405
  400988:	004020c9 	.word	0x004020c9
  40098c:	400e1200 	.word	0x400e1200
  400990:	004025b5 	.word	0x004025b5
  400994:	00401f01 	.word	0x00401f01
  400998:	0040026d 	.word	0x0040026d

0040099c <hal_serial_start>:
*	Starts a specified serial interface. By default 8-bit, no parity, 1 stop bit.
*
*	@param serial_id Serial interface Id: SerialA, SerialB, ... 
*	@param baudrate baud rate
*/
void hal_serial_start( tSerialId serial_id, uint32_t baudrate ){
  40099c:	b508      	push	{r3, lr}
	switch( serial_id ){
  40099e:	b110      	cbz	r0, 4009a6 <hal_serial_start+0xa>
  4009a0:	2801      	cmp	r0, #1
  4009a2:	d004      	beq.n	4009ae <hal_serial_start+0x12>
  4009a4:	bd08      	pop	{r3, pc}
		case SerialA:	configure_uart1(baudrate);	break;	//SerialA is UART1
  4009a6:	4608      	mov	r0, r1
  4009a8:	4b03      	ldr	r3, [pc, #12]	; (4009b8 <hal_serial_start+0x1c>)
  4009aa:	4798      	blx	r3
  4009ac:	bd08      	pop	{r3, pc}
		case SerialB:	configure_usart1(baudrate);	break;	//SerialB is USART1
  4009ae:	4608      	mov	r0, r1
  4009b0:	4b02      	ldr	r3, [pc, #8]	; (4009bc <hal_serial_start+0x20>)
  4009b2:	4798      	blx	r3
  4009b4:	bd08      	pop	{r3, pc}
  4009b6:	bf00      	nop
  4009b8:	00400301 	.word	0x00400301
  4009bc:	00400361 	.word	0x00400361

004009c0 <hal_serial_putc>:
*	until writing has successfully completed.
*
*	@param serial_id Serial interface Id: SerialA, SerialB, ...
*	@param c the character to be sent
*/
void hal_serial_putc( tSerialId serial_id, uint8_t c ){
  4009c0:	b508      	push	{r3, lr}
	switch( serial_id ){
  4009c2:	b110      	cbz	r0, 4009ca <hal_serial_putc+0xa>
  4009c4:	2801      	cmp	r0, #1
  4009c6:	d009      	beq.n	4009dc <hal_serial_putc+0x1c>
  4009c8:	bd08      	pop	{r3, pc}
	usart_enable_tx(USART_SERIAL);
	usart_enable_rx(USART_SERIAL);
}

static void uart1_putc( uint8_t c ){
	while ( !(UART1->UART_SR & UART_SR_TXRDY) ); //wait for Tx to be available
  4009ca:	4a09      	ldr	r2, [pc, #36]	; (4009f0 <hal_serial_putc+0x30>)
  4009cc:	6953      	ldr	r3, [r2, #20]
  4009ce:	f013 0f02 	tst.w	r3, #2
  4009d2:	d0fb      	beq.n	4009cc <hal_serial_putc+0xc>
	uart_write( UART1, c );						 //transmit
  4009d4:	4806      	ldr	r0, [pc, #24]	; (4009f0 <hal_serial_putc+0x30>)
  4009d6:	4b07      	ldr	r3, [pc, #28]	; (4009f4 <hal_serial_putc+0x34>)
  4009d8:	4798      	blx	r3
  4009da:	bd08      	pop	{r3, pc}
}

static void usart1_putc( uint8_t c ){
	while( !(USART_SERIAL->US_CSR & US_CSR_TXRDY) ); //wait until TX is ready
  4009dc:	4a06      	ldr	r2, [pc, #24]	; (4009f8 <hal_serial_putc+0x38>)
  4009de:	6953      	ldr	r3, [r2, #20]
  4009e0:	f013 0f02 	tst.w	r3, #2
  4009e4:	d0fb      	beq.n	4009de <hal_serial_putc+0x1e>
	usart_write( USART_SERIAL, c );					 //write
  4009e6:	4804      	ldr	r0, [pc, #16]	; (4009f8 <hal_serial_putc+0x38>)
  4009e8:	4b04      	ldr	r3, [pc, #16]	; (4009fc <hal_serial_putc+0x3c>)
  4009ea:	4798      	blx	r3
  4009ec:	bd08      	pop	{r3, pc}
  4009ee:	bf00      	nop
  4009f0:	400e0800 	.word	0x400e0800
  4009f4:	00402bad 	.word	0x00402bad
  4009f8:	40028000 	.word	0x40028000
  4009fc:	00402cc9 	.word	0x00402cc9

00400a00 <hal_serial_getc>:
*	Reads a character from the specified Serial Interface. This
*	function will not return until a character is available.
*
*	@return the read character
*/
uint8_t hal_serial_getc( tSerialId serial_id ){
  400a00:	b530      	push	{r4, r5, lr}
  400a02:	b083      	sub	sp, #12
	uint8_t buf = 0;
  400a04:	2300      	movs	r3, #0
  400a06:	f88d 3007 	strb.w	r3, [sp, #7]
	
	switch( serial_id ){
  400a0a:	b110      	cbz	r0, 400a12 <hal_serial_getc+0x12>
  400a0c:	2801      	cmp	r0, #1
  400a0e:	d00d      	beq.n	400a2c <hal_serial_getc+0x2c>
  400a10:	e018      	b.n	400a44 <hal_serial_getc+0x44>
	while( !(USART_SERIAL->US_CSR & US_CSR_TXRDY) ); //wait until TX is ready
	usart_write( USART_SERIAL, c );					 //write
}

static void uart1_getc( uint8_t* buf ){
	while( !(uart_get_status(UART1) & UART_SR_RXRDY) ); //wait until a character is ready
  400a12:	4d0e      	ldr	r5, [pc, #56]	; (400a4c <hal_serial_getc+0x4c>)
  400a14:	4c0e      	ldr	r4, [pc, #56]	; (400a50 <hal_serial_getc+0x50>)
  400a16:	4628      	mov	r0, r5
  400a18:	47a0      	blx	r4
  400a1a:	f010 0f01 	tst.w	r0, #1
  400a1e:	d0fa      	beq.n	400a16 <hal_serial_getc+0x16>
	uart_read( UART1, buf );							//read
  400a20:	f10d 0107 	add.w	r1, sp, #7
  400a24:	4809      	ldr	r0, [pc, #36]	; (400a4c <hal_serial_getc+0x4c>)
  400a26:	4b0b      	ldr	r3, [pc, #44]	; (400a54 <hal_serial_getc+0x54>)
  400a28:	4798      	blx	r3
  400a2a:	e00b      	b.n	400a44 <hal_serial_getc+0x44>
}

static void usart1_getc( uint8_t* buf ){
	while( !(usart_get_status(USART1) & US_CSR_RXRDY) ); //wait until a character is available
  400a2c:	4d0a      	ldr	r5, [pc, #40]	; (400a58 <hal_serial_getc+0x58>)
  400a2e:	4c0b      	ldr	r4, [pc, #44]	; (400a5c <hal_serial_getc+0x5c>)
  400a30:	4628      	mov	r0, r5
  400a32:	47a0      	blx	r4
  400a34:	f010 0f01 	tst.w	r0, #1
  400a38:	d0fa      	beq.n	400a30 <hal_serial_getc+0x30>
	usart_read(USART1, buf);							 //read
  400a3a:	f10d 0107 	add.w	r1, sp, #7
  400a3e:	4806      	ldr	r0, [pc, #24]	; (400a58 <hal_serial_getc+0x58>)
  400a40:	4b07      	ldr	r3, [pc, #28]	; (400a60 <hal_serial_getc+0x60>)
  400a42:	4798      	blx	r3
		case SerialB:	usart1_getc(&buf);	break;
		default:			/*Error*/;
	}
	
	return buf;
}
  400a44:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400a48:	b003      	add	sp, #12
  400a4a:	bd30      	pop	{r4, r5, pc}
  400a4c:	400e0800 	.word	0x400e0800
  400a50:	00402ba9 	.word	0x00402ba9
  400a54:	00402bbd 	.word	0x00402bbd
  400a58:	40028000 	.word	0x40028000
  400a5c:	00402cc5 	.word	0x00402cc5
  400a60:	00402cdd 	.word	0x00402cdd

00400a64 <UART1_Handler>:
	usart_read(USART1, buf);							 //read
}


//UART1 ISR
void UART1_Handler(){
  400a64:	b500      	push	{lr}
  400a66:	b083      	sub	sp, #12
	uint8_t rx_data;
	uint32_t status = uart_get_status(UART1);
  400a68:	4809      	ldr	r0, [pc, #36]	; (400a90 <UART1_Handler+0x2c>)
  400a6a:	4b0a      	ldr	r3, [pc, #40]	; (400a94 <UART1_Handler+0x30>)
  400a6c:	4798      	blx	r3
	
	if(status & UART_SR_RXRDY){
  400a6e:	f010 0f01 	tst.w	r0, #1
  400a72:	d009      	beq.n	400a88 <UART1_Handler+0x24>
		//read data received (1 byte)
		uart_read(UART1, &rx_data);
  400a74:	f10d 0107 	add.w	r1, sp, #7
  400a78:	4805      	ldr	r0, [pc, #20]	; (400a90 <UART1_Handler+0x2c>)
  400a7a:	4b07      	ldr	r3, [pc, #28]	; (400a98 <UART1_Handler+0x34>)
  400a7c:	4798      	blx	r3
		
		//pass to upper layer
		uart1_callback(rx_data);
  400a7e:	4b07      	ldr	r3, [pc, #28]	; (400a9c <UART1_Handler+0x38>)
  400a80:	681b      	ldr	r3, [r3, #0]
  400a82:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400a86:	4798      	blx	r3
	}
}
  400a88:	b003      	add	sp, #12
  400a8a:	f85d fb04 	ldr.w	pc, [sp], #4
  400a8e:	bf00      	nop
  400a90:	400e0800 	.word	0x400e0800
  400a94:	00402ba9 	.word	0x00402ba9
  400a98:	00402bbd 	.word	0x00402bbd
  400a9c:	20000cb4 	.word	0x20000cb4

00400aa0 <USART1_Handler>:

//USART1 ISR
void USART1_Handler(){
  400aa0:	b500      	push	{lr}
  400aa2:	b083      	sub	sp, #12
	uint8_t received_byte;
	uint32_t dw_status = usart_get_status(USART1);
  400aa4:	4809      	ldr	r0, [pc, #36]	; (400acc <USART1_Handler+0x2c>)
  400aa6:	4b0a      	ldr	r3, [pc, #40]	; (400ad0 <USART1_Handler+0x30>)
  400aa8:	4798      	blx	r3
	
	if (dw_status & US_CSR_RXRDY) {
  400aaa:	f010 0f01 	tst.w	r0, #1
  400aae:	d009      	beq.n	400ac4 <USART1_Handler+0x24>
		//read received byte
		usart_read(USART1, &received_byte);
  400ab0:	f10d 0107 	add.w	r1, sp, #7
  400ab4:	4805      	ldr	r0, [pc, #20]	; (400acc <USART1_Handler+0x2c>)
  400ab6:	4b07      	ldr	r3, [pc, #28]	; (400ad4 <USART1_Handler+0x34>)
  400ab8:	4798      	blx	r3
		
		//pass to upper layer
		usart1_callback(received_byte);
  400aba:	4b07      	ldr	r3, [pc, #28]	; (400ad8 <USART1_Handler+0x38>)
  400abc:	681b      	ldr	r3, [r3, #0]
  400abe:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400ac2:	4798      	blx	r3
	}
}
  400ac4:	b003      	add	sp, #12
  400ac6:	f85d fb04 	ldr.w	pc, [sp], #4
  400aca:	bf00      	nop
  400acc:	40028000 	.word	0x40028000
  400ad0:	00402cc5 	.word	0x00402cc5
  400ad4:	00402cdd 	.word	0x00402cdd
  400ad8:	20000cb8 	.word	0x20000cb8

00400adc <hal_memreg_init>:
*
*	Initializes Memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_mem_init();...
*
*/
void hal_memreg_init(void){
  400adc:	4770      	bx	lr
  400ade:	bf00      	nop

00400ae0 <hal_nvmem_init>:
*
*	Initializes Non-volatile memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_nvmem_init();...
*
*/
void hal_nvmem_init(void){
  400ae0:	4770      	bx	lr
  400ae2:	bf00      	nop

00400ae4 <hal_nvmem_start>:
*	@param mem_id id of the memory to be initialized
*
*	@return true if the memory was initialized correctly, false otherwise.
*/
bool hal_nvmem_start( tNVMemId mem_id ){
	switch(mem_id){
  400ae4:	2801      	cmp	r0, #1
  400ae6:	d117      	bne.n	400b18 <hal_nvmem_start+0x34>
*	
*	@param mem_id id of the memory to be initialized
*
*	@return true if the memory was initialized correctly, false otherwise.
*/
bool hal_nvmem_start( tNVMemId mem_id ){
  400ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(mem_id){
		case NVMemSDCardFAT:				//SD Card + FAT
			sdcard_fat_init = true;
  400aea:	2201      	movs	r2, #1
  400aec:	4b14      	ldr	r3, [pc, #80]	; (400b40 <hal_nvmem_start+0x5c>)
  400aee:	701a      	strb	r2, [r3, #0]
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
}

static bool sdcard_init( uint32_t num_attempts ){
	//check for SD Card to be inserted
	if( !gpio_pin_is_low(SD_MMC_0_CD_GPIO) ){
  400af0:	204c      	movs	r0, #76	; 0x4c
  400af2:	4b14      	ldr	r3, [pc, #80]	; (400b44 <hal_nvmem_start+0x60>)
  400af4:	4798      	blx	r3
  400af6:	bb00      	cbnz	r0, 400b3a <hal_nvmem_start+0x56>
		return false;
	}
	
	//Init SD/MMC Stack
	sd_mmc_init();
  400af8:	4b13      	ldr	r3, [pc, #76]	; (400b48 <hal_nvmem_start+0x64>)
  400afa:	4798      	blx	r3
  400afc:	240b      	movs	r4, #11
	
	//Initializes Card
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400afe:	4d13      	ldr	r5, [pc, #76]	; (400b4c <hal_nvmem_start+0x68>)
		if( num_attempts-- <= 0 ) return false;
		delay_ms(200);
  400b00:	4f13      	ldr	r7, [pc, #76]	; (400b50 <hal_nvmem_start+0x6c>)
  400b02:	4e14      	ldr	r6, [pc, #80]	; (400b54 <hal_nvmem_start+0x70>)
  400b04:	e003      	b.n	400b0e <hal_nvmem_start+0x2a>
	//Init SD/MMC Stack
	sd_mmc_init();
	
	//Initializes Card
	while (	sd_mmc_check(0) != SD_MMC_OK ){
		if( num_attempts-- <= 0 ) return false;
  400b06:	3c01      	subs	r4, #1
  400b08:	d017      	beq.n	400b3a <hal_nvmem_start+0x56>
		delay_ms(200);
  400b0a:	4638      	mov	r0, r7
  400b0c:	47b0      	blx	r6
	
	//Init SD/MMC Stack
	sd_mmc_init();
	
	//Initializes Card
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400b0e:	2000      	movs	r0, #0
  400b10:	47a8      	blx	r5
  400b12:	2800      	cmp	r0, #0
  400b14:	d1f7      	bne.n	400b06 <hal_nvmem_start+0x22>
  400b16:	e001      	b.n	400b1c <hal_nvmem_start+0x38>
bool hal_nvmem_start( tNVMemId mem_id ){
	switch(mem_id){
		case NVMemSDCardFAT:				//SD Card + FAT
			sdcard_fat_init = true;
			return sdcard_init(10) && fs_mount();	
		case NVMemSDCard:		return false;							//unimplemented (raw access to sd card)
  400b18:	2000      	movs	r0, #0
		case NVMemFlash:		return false;							//unimplemented (on board flash)
		default:			return false;							//error!
	}
}
  400b1a:	4770      	bx	lr
	
	return num_files;
}

static bool fs_mount(void){
	memset(&fs, 0, sizeof(FATFS));
  400b1c:	4c0e      	ldr	r4, [pc, #56]	; (400b58 <hal_nvmem_start+0x74>)
  400b1e:	f44f 720c 	mov.w	r2, #560	; 0x230
  400b22:	2100      	movs	r1, #0
  400b24:	4620      	mov	r0, r4
  400b26:	4b0d      	ldr	r3, [pc, #52]	; (400b5c <hal_nvmem_start+0x78>)
  400b28:	4798      	blx	r3
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
  400b2a:	4621      	mov	r1, r4
  400b2c:	2000      	movs	r0, #0
  400b2e:	4b0c      	ldr	r3, [pc, #48]	; (400b60 <hal_nvmem_start+0x7c>)
  400b30:	4798      	blx	r3
*/
bool hal_nvmem_start( tNVMemId mem_id ){
	switch(mem_id){
		case NVMemSDCardFAT:				//SD Card + FAT
			sdcard_fat_init = true;
			return sdcard_init(10) && fs_mount();	
  400b32:	fab0 f080 	clz	r0, r0
  400b36:	0940      	lsrs	r0, r0, #5
  400b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b3a:	2000      	movs	r0, #0
		case NVMemSDCard:		return false;							//unimplemented (raw access to sd card)
		case NVMemFlash:		return false;							//unimplemented (on board flash)
		default:			return false;							//error!
	}
}
  400b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b3e:	bf00      	nop
  400b40:	20000cc4 	.word	0x20000cc4
  400b44:	004020d9 	.word	0x004020d9
  400b48:	00401295 	.word	0x00401295
  400b4c:	004012c1 	.word	0x004012c1
  400b50:	001a286e 	.word	0x001a286e
  400b54:	20000001 	.word	0x20000001
  400b58:	20000cc8 	.word	0x20000cc8
  400b5c:	0040432d 	.word	0x0040432d
  400b60:	00402f8d 	.word	0x00402f8d

00400b64 <syscalls_entry_point>:
*	   2. Based on that extract the right SP (PSP or MSP)
*	   3. The rest is the same...
*
*	There' no reason to make a syscall from the kernel though, so it's all good.
*/
void syscalls_entry_point(void){
  400b64:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t sp = hal_cpu_get_psp();
  400b66:	4b2c      	ldr	r3, [pc, #176]	; (400c18 <syscalls_entry_point+0xb4>)
  400b68:	4798      	blx	r3
	
	//extract the number from the read instruction
	svc_number &= 0x00FF;
	
	//get arguments
	void* arg0 = ((uint32_t*)sp)[0];
  400b6a:	6804      	ldr	r4, [r0, #0]
	void* arg1 = ((uint32_t*)sp)[1];
  400b6c:	6845      	ldr	r5, [r0, #4]
	//exception entry (offset 6 from SP).
	//That stacked return address is the address of the instruction to
	//be executed on exception return (typically bx lr).
	//We know bx lr is a 16-bit instruction. So to get the SVC intruction
	//we just read 2 bytes before the specified address.
	uint32_t svc_number = ((uint16_t*) ((uint32_t*)sp)[6])[-1];
  400b6e:	6983      	ldr	r3, [r0, #24]
	void* arg1 = ((uint32_t*)sp)[1];
	void* arg2 = ((uint32_t*)sp)[2];
	void* arg3 = ((uint32_t*)sp)[3];
	
	//attend syscall
	switch(svc_number){
  400b70:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  400b74:	2b10      	cmp	r3, #16
  400b76:	d84e      	bhi.n	400c16 <syscalls_entry_point+0xb2>
  400b78:	e8df f003 	tbb	[pc, r3]
  400b7c:	19151009 	.word	0x19151009
  400b80:	2a26211d 	.word	0x2a26211d
  400b84:	3a36332e 	.word	0x3a36332e
  400b88:	474d433f 	.word	0x474d433f
  400b8c:	4a          	.byte	0x4a
  400b8d:	00          	.byte	0x00
		//LED
		case SVCLedWrite:
			hal_led_write( (tLedNum)arg0, (tLedState)arg1 );
  400b8e:	1c29      	adds	r1, r5, #0
  400b90:	bf18      	it	ne
  400b92:	2101      	movne	r1, #1
  400b94:	4620      	mov	r0, r4
  400b96:	4b21      	ldr	r3, [pc, #132]	; (400c1c <syscalls_entry_point+0xb8>)
  400b98:	4798      	blx	r3
			break;
  400b9a:	bd38      	pop	{r3, r4, r5, pc}
		case SVCLedRead:
			*((tLedState*)arg1) = hal_led_read((tLedNum)arg0);
  400b9c:	4620      	mov	r0, r4
  400b9e:	4b20      	ldr	r3, [pc, #128]	; (400c20 <syscalls_entry_point+0xbc>)
  400ba0:	4798      	blx	r3
  400ba2:	7028      	strb	r0, [r5, #0]
			break;
  400ba4:	bd38      	pop	{r3, r4, r5, pc}
		//Button
		case SVCButtonStartEv:
			hal_button_start_int((void(*)(tButtonNum)) arg0);
  400ba6:	4620      	mov	r0, r4
  400ba8:	4b1e      	ldr	r3, [pc, #120]	; (400c24 <syscalls_entry_point+0xc0>)
  400baa:	4798      	blx	r3
			break;
  400bac:	bd38      	pop	{r3, r4, r5, pc}
		//Clock
		case SVCClockRead:
			hal_clock_read((tTime*)arg0);
  400bae:	4620      	mov	r0, r4
  400bb0:	4b1d      	ldr	r3, [pc, #116]	; (400c28 <syscalls_entry_point+0xc4>)
  400bb2:	4798      	blx	r3
			break;
  400bb4:	bd38      	pop	{r3, r4, r5, pc}
		case SVCClockWrite:
			hal_clock_write((tTime*)arg0);
  400bb6:	4620      	mov	r0, r4
  400bb8:	4b1c      	ldr	r3, [pc, #112]	; (400c2c <syscalls_entry_point+0xc8>)
  400bba:	4798      	blx	r3
			break;
  400bbc:	bd38      	pop	{r3, r4, r5, pc}
		//Serial
		case SVCSerialPutc:
			hal_serial_putc((tSerialId)arg0, (uint8_t)arg1);
  400bbe:	b2e9      	uxtb	r1, r5
  400bc0:	4620      	mov	r0, r4
  400bc2:	4b1b      	ldr	r3, [pc, #108]	; (400c30 <syscalls_entry_point+0xcc>)
  400bc4:	4798      	blx	r3
			break;
  400bc6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSerialGetc:
			hal_serial_getc((tSerialId)arg0);
  400bc8:	4620      	mov	r0, r4
  400bca:	4b1a      	ldr	r3, [pc, #104]	; (400c34 <syscalls_entry_point+0xd0>)
  400bcc:	4798      	blx	r3
			break;
  400bce:	bd38      	pop	{r3, r4, r5, pc}
		//Sensor
		case SVCSensorStartEv:
			hal_sensor_start((tSensorId)arg0);
  400bd0:	4620      	mov	r0, r4
  400bd2:	4b19      	ldr	r3, [pc, #100]	; (400c38 <syscalls_entry_point+0xd4>)
  400bd4:	4798      	blx	r3
			break;
  400bd6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSensorRead:
			*((uint32_t*)arg1) = hal_sensor_read((tSensorId)arg0);
  400bd8:	4620      	mov	r0, r4
  400bda:	4b18      	ldr	r3, [pc, #96]	; (400c3c <syscalls_entry_point+0xd8>)
  400bdc:	4798      	blx	r3
  400bde:	6028      	str	r0, [r5, #0]
			break;
  400be0:	bd38      	pop	{r3, r4, r5, pc}
		//Display
		case SVCDisplayCls:
			hal_display_cls();
  400be2:	4b17      	ldr	r3, [pc, #92]	; (400c40 <syscalls_entry_point+0xdc>)
  400be4:	4798      	blx	r3
			break;
  400be6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayPutc:
			hal_display_putc((uint8_t)arg0);
  400be8:	b2e0      	uxtb	r0, r4
  400bea:	4b16      	ldr	r3, [pc, #88]	; (400c44 <syscalls_entry_point+0xe0>)
  400bec:	4798      	blx	r3
			break;
  400bee:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayGotoxy:
			hal_display_gotoxy((uint32_t)arg0, (uint32_t)arg1);
  400bf0:	4629      	mov	r1, r5
  400bf2:	4620      	mov	r0, r4
  400bf4:	4b14      	ldr	r3, [pc, #80]	; (400c48 <syscalls_entry_point+0xe4>)
  400bf6:	4798      	blx	r3
			break;
  400bf8:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayNumLines:
			*((uint32_t*)arg0) = hal_display_numlines();
  400bfa:	4b14      	ldr	r3, [pc, #80]	; (400c4c <syscalls_entry_point+0xe8>)
  400bfc:	4798      	blx	r3
  400bfe:	6020      	str	r0, [r4, #0]
			break;
  400c00:	bd38      	pop	{r3, r4, r5, pc}
		//Millisecond Timer
		case SVCMtimerStartEv:
			hal_mtimer_start((uint32_t)arg0);
  400c02:	4620      	mov	r0, r4
  400c04:	4b12      	ldr	r3, [pc, #72]	; (400c50 <syscalls_entry_point+0xec>)
  400c06:	4798      	blx	r3
			break;
  400c08:	bd38      	pop	{r3, r4, r5, pc}
		//case SVCMtimerStartPoll:
		//	hal_mtimer_start_int((uint32_t)arg0, ((void)*(void))arg1);
		//	break;
		case SVCMtimerStop:
			hal_mtimer_stop();
  400c0a:	4b12      	ldr	r3, [pc, #72]	; (400c54 <syscalls_entry_point+0xf0>)
  400c0c:	4798      	blx	r3
			break;
  400c0e:	bd38      	pop	{r3, r4, r5, pc}
		case SVCMtimerRead:
			*((uint32_t*)arg0) = hal_mtimer_read();
  400c10:	4b11      	ldr	r3, [pc, #68]	; (400c58 <syscalls_entry_point+0xf4>)
  400c12:	4798      	blx	r3
  400c14:	6020      	str	r0, [r4, #0]
  400c16:	bd38      	pop	{r3, r4, r5, pc}
  400c18:	00400237 	.word	0x00400237
  400c1c:	004004c9 	.word	0x004004c9
  400c20:	00400519 	.word	0x00400519
  400c24:	0040088d 	.word	0x0040088d
  400c28:	004005c1 	.word	0x004005c1
  400c2c:	0040058d 	.word	0x0040058d
  400c30:	004009c1 	.word	0x004009c1
  400c34:	00400a01 	.word	0x00400a01
  400c38:	0040076d 	.word	0x0040076d
  400c3c:	004007e1 	.word	0x004007e1
  400c40:	004006b1 	.word	0x004006b1
  400c44:	00400611 	.word	0x00400611
  400c48:	00400741 	.word	0x00400741
  400c4c:	00400769 	.word	0x00400769
  400c50:	004003f1 	.word	0x004003f1
  400c54:	00400449 	.word	0x00400449
  400c58:	00400471 	.word	0x00400471

00400c5c <syscalls_init>:
*	Syscalls Init
*
*	Initializes the system calls interface
*
*/
void syscalls_init(void){
  400c5c:	b508      	push	{r3, lr}
	//Starts SVCs (registers SVC callback)
	hal_svc_start( syscalls_entry_point );
  400c5e:	4802      	ldr	r0, [pc, #8]	; (400c68 <syscalls_init+0xc>)
  400c60:	4b02      	ldr	r3, [pc, #8]	; (400c6c <syscalls_init+0x10>)
  400c62:	4798      	blx	r3
  400c64:	bd08      	pop	{r3, pc}
  400c66:	bf00      	nop
  400c68:	00400b65 	.word	0x00400b65
  400c6c:	004001a5 	.word	0x004001a5

00400c70 <init_sequence>:
	//but first they blink momentarily
	init_sequence();

}

void init_sequence(void){
  400c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		
	//All LEDs On
	hal_led_write(Led0, LedOn);
  400c74:	2101      	movs	r1, #1
  400c76:	2000      	movs	r0, #0
  400c78:	4c1a      	ldr	r4, [pc, #104]	; (400ce4 <init_sequence+0x74>)
  400c7a:	47a0      	blx	r4
	hal_led_write(Led1, LedOn);
  400c7c:	2101      	movs	r1, #1
  400c7e:	4608      	mov	r0, r1
  400c80:	47a0      	blx	r4
	hal_led_write(Led2, LedOn);
  400c82:	2101      	movs	r1, #1
  400c84:	2002      	movs	r0, #2
  400c86:	47a0      	blx	r4
	hal_led_write(Led3, LedOn);
  400c88:	2101      	movs	r1, #1
  400c8a:	2003      	movs	r0, #3
  400c8c:	47a0      	blx	r4
	hal_led_write(Led4, LedOn);
  400c8e:	2101      	movs	r1, #1
  400c90:	2004      	movs	r0, #4
  400c92:	47a0      	blx	r4
		
	//Screen "on"
	for(uint32_t i=0; i<4; i++){	 //rows
  400c94:	2700      	movs	r7, #0
		hal_display_gotoxy(0, i);
  400c96:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400cf4 <init_sequence+0x84>
		for(uint32_t j=0; j<95; j++) //columns
		hal_display_putc('|');
  400c9a:	4e13      	ldr	r6, [pc, #76]	; (400ce8 <init_sequence+0x78>)
	hal_led_write(Led3, LedOn);
	hal_led_write(Led4, LedOn);
		
	//Screen "on"
	for(uint32_t i=0; i<4; i++){	 //rows
		hal_display_gotoxy(0, i);
  400c9c:	4639      	mov	r1, r7
  400c9e:	2000      	movs	r0, #0
  400ca0:	47c0      	blx	r8
  400ca2:	245f      	movs	r4, #95	; 0x5f
		for(uint32_t j=0; j<95; j++) //columns
		hal_display_putc('|');
  400ca4:	257c      	movs	r5, #124	; 0x7c
  400ca6:	4628      	mov	r0, r5
  400ca8:	47b0      	blx	r6
	hal_led_write(Led4, LedOn);
		
	//Screen "on"
	for(uint32_t i=0; i<4; i++){	 //rows
		hal_display_gotoxy(0, i);
		for(uint32_t j=0; j<95; j++) //columns
  400caa:	3c01      	subs	r4, #1
  400cac:	d1fb      	bne.n	400ca6 <init_sequence+0x36>
	hal_led_write(Led2, LedOn);
	hal_led_write(Led3, LedOn);
	hal_led_write(Led4, LedOn);
		
	//Screen "on"
	for(uint32_t i=0; i<4; i++){	 //rows
  400cae:	3701      	adds	r7, #1
  400cb0:	2f04      	cmp	r7, #4
  400cb2:	d1f3      	bne.n	400c9c <init_sequence+0x2c>
		for(uint32_t j=0; j<95; j++) //columns
		hal_display_putc('|');
	}

	//Wait...
	hal_delay(200);
  400cb4:	20c8      	movs	r0, #200	; 0xc8
  400cb6:	4b0d      	ldr	r3, [pc, #52]	; (400cec <init_sequence+0x7c>)
  400cb8:	4798      	blx	r3
	
	//All LEDs Off
	hal_led_write(Led0, LedOff);
  400cba:	2100      	movs	r1, #0
  400cbc:	4608      	mov	r0, r1
  400cbe:	4c09      	ldr	r4, [pc, #36]	; (400ce4 <init_sequence+0x74>)
  400cc0:	47a0      	blx	r4
	hal_led_write(Led1, LedOff);
  400cc2:	2100      	movs	r1, #0
  400cc4:	2001      	movs	r0, #1
  400cc6:	47a0      	blx	r4
	hal_led_write(Led2, LedOff);
  400cc8:	2100      	movs	r1, #0
  400cca:	2002      	movs	r0, #2
  400ccc:	47a0      	blx	r4
	hal_led_write(Led3, LedOff);
  400cce:	2100      	movs	r1, #0
  400cd0:	2003      	movs	r0, #3
  400cd2:	47a0      	blx	r4
	hal_led_write(Led4, LedOff);
  400cd4:	2100      	movs	r1, #0
  400cd6:	2004      	movs	r0, #4
  400cd8:	47a0      	blx	r4
		
	//clear screen
	hal_display_cls();
  400cda:	4b05      	ldr	r3, [pc, #20]	; (400cf0 <init_sequence+0x80>)
  400cdc:	4798      	blx	r3
  400cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ce2:	bf00      	nop
  400ce4:	004004c9 	.word	0x004004c9
  400ce8:	00400611 	.word	0x00400611
  400cec:	004001c1 	.word	0x004001c1
  400cf0:	004006b1 	.word	0x004006b1
  400cf4:	00400741 	.word	0x00400741

00400cf8 <io_init>:
	
	//Initializes the system calls interface
	syscalls_init();
}

void io_init(void){
  400cf8:	b530      	push	{r4, r5, lr}
  400cfa:	b087      	sub	sp, #28
	
	//Starts All IO devices
	hal_sensor_start( SensorLight );
  400cfc:	2000      	movs	r0, #0
  400cfe:	4c12      	ldr	r4, [pc, #72]	; (400d48 <io_init+0x50>)
  400d00:	47a0      	blx	r4
	hal_sensor_start( SensorTemp );
  400d02:	2001      	movs	r0, #1
  400d04:	47a0      	blx	r4
	hal_clock_start();
  400d06:	4b11      	ldr	r3, [pc, #68]	; (400d4c <io_init+0x54>)
  400d08:	4798      	blx	r3
	hal_display_start();
  400d0a:	4b11      	ldr	r3, [pc, #68]	; (400d50 <io_init+0x58>)
  400d0c:	4798      	blx	r3
	hal_serial_start( SerialA, SYS_CONF_SERIAL_A_BAUDRATE );
  400d0e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  400d12:	2000      	movs	r0, #0
  400d14:	4c0f      	ldr	r4, [pc, #60]	; (400d54 <io_init+0x5c>)
  400d16:	47a0      	blx	r4
	hal_serial_start( SerialB, SYS_CONF_SERIAL_A_BAUDRATE );
  400d18:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  400d1c:	2001      	movs	r0, #1
  400d1e:	47a0      	blx	r4
	hal_led_start();
  400d20:	4b0d      	ldr	r3, [pc, #52]	; (400d58 <io_init+0x60>)
  400d22:	4798      	blx	r3
	hal_nvmem_start( NVMemSDCardFAT );
  400d24:	2001      	movs	r0, #1
  400d26:	4b0d      	ldr	r3, [pc, #52]	; (400d5c <io_init+0x64>)
  400d28:	4798      	blx	r3
	
	//Clock starts in 00:13:00 July 14, 1991
	tTime time = {
  400d2a:	466c      	mov	r4, sp
  400d2c:	4d0c      	ldr	r5, [pc, #48]	; (400d60 <io_init+0x68>)
  400d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400d32:	e895 0003 	ldmia.w	r5, {r0, r1}
  400d36:	e884 0003 	stmia.w	r4, {r0, r1}
		
		0, 13, 0, 14, 7, 1991 //
	};
	hal_clock_write(&time);
  400d3a:	4668      	mov	r0, sp
  400d3c:	4b09      	ldr	r3, [pc, #36]	; (400d64 <io_init+0x6c>)
  400d3e:	4798      	blx	r3
	
	//All LEDS starts Off and Display starts empty in (0,0),
	//but first they blink momentarily
	init_sequence();
  400d40:	4b09      	ldr	r3, [pc, #36]	; (400d68 <io_init+0x70>)
  400d42:	4798      	blx	r3

}
  400d44:	b007      	add	sp, #28
  400d46:	bd30      	pop	{r4, r5, pc}
  400d48:	0040076d 	.word	0x0040076d
  400d4c:	00400561 	.word	0x00400561
  400d50:	00400605 	.word	0x00400605
  400d54:	0040099d 	.word	0x0040099d
  400d58:	00400485 	.word	0x00400485
  400d5c:	00400ae5 	.word	0x00400ae5
  400d60:	0040474c 	.word	0x0040474c
  400d64:	0040058d 	.word	0x0040058d
  400d68:	00400c71 	.word	0x00400c71

00400d6c <system_init>:
*	System Init
*
*	Initializes IO and CPU. Must be called before any other call
*
*/
void system_init(void){
  400d6c:	b508      	push	{r3, lr}
	
	//Initializes the HAL
	hal_cpu_init();			
  400d6e:	4b07      	ldr	r3, [pc, #28]	; (400d8c <system_init+0x20>)
  400d70:	4798      	blx	r3
	hal_io_init();		
  400d72:	4b07      	ldr	r3, [pc, #28]	; (400d90 <system_init+0x24>)
  400d74:	4798      	blx	r3
	hal_nvmem_init();
  400d76:	4b07      	ldr	r3, [pc, #28]	; (400d94 <system_init+0x28>)
  400d78:	4798      	blx	r3
	hal_memreg_init();
  400d7a:	4b07      	ldr	r3, [pc, #28]	; (400d98 <system_init+0x2c>)
  400d7c:	4798      	blx	r3

	//Initializes IO devices
	io_init();
  400d7e:	4b07      	ldr	r3, [pc, #28]	; (400d9c <system_init+0x30>)
  400d80:	4798      	blx	r3
	
	//Inits console
	console_init();
  400d82:	4b07      	ldr	r3, [pc, #28]	; (400da0 <system_init+0x34>)
  400d84:	4798      	blx	r3
	
	//Initializes the system calls interface
	syscalls_init();
  400d86:	4b07      	ldr	r3, [pc, #28]	; (400da4 <system_init+0x38>)
  400d88:	4798      	blx	r3
  400d8a:	bd08      	pop	{r3, pc}
  400d8c:	00400199 	.word	0x00400199
  400d90:	004003d1 	.word	0x004003d1
  400d94:	00400ae1 	.word	0x00400ae1
  400d98:	00400add 	.word	0x00400add
  400d9c:	00400cf9 	.word	0x00400cf9
  400da0:	00400195 	.word	0x00400195
  400da4:	00400c5d 	.word	0x00400c5d

00400da8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400da8:	b570      	push	{r4, r5, r6, lr}
  400daa:	b082      	sub	sp, #8
  400dac:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400dae:	ac02      	add	r4, sp, #8
  400db0:	2302      	movs	r3, #2
  400db2:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400db6:	4d09      	ldr	r5, [pc, #36]	; (400ddc <ssd1306_write_command+0x34>)
  400db8:	4621      	mov	r1, r4
  400dba:	4628      	mov	r0, r5
  400dbc:	4b08      	ldr	r3, [pc, #32]	; (400de0 <ssd1306_write_command+0x38>)
  400dbe:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400dc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dc4:	4b07      	ldr	r3, [pc, #28]	; (400de4 <ssd1306_write_command+0x3c>)
  400dc6:	635a      	str	r2, [r3, #52]	; 0x34
  400dc8:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  400dca:	2056      	movs	r0, #86	; 0x56
  400dcc:	4b06      	ldr	r3, [pc, #24]	; (400de8 <ssd1306_write_command+0x40>)
  400dce:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400dd0:	4621      	mov	r1, r4
  400dd2:	4628      	mov	r0, r5
  400dd4:	4b05      	ldr	r3, [pc, #20]	; (400dec <ssd1306_write_command+0x44>)
  400dd6:	4798      	blx	r3
#endif
}
  400dd8:	b002      	add	sp, #8
  400dda:	bd70      	pop	{r4, r5, r6, pc}
  400ddc:	40008000 	.word	0x40008000
  400de0:	00401cb5 	.word	0x00401cb5
  400de4:	400e1200 	.word	0x400e1200
  400de8:	20000001 	.word	0x20000001
  400dec:	00401ce1 	.word	0x00401ce1

00400df0 <make_shape>:
// test: try making shape
Shape make_shape(gfx_shape shp, uint16_t x, uint16_t y) {	
	Shape chshape;
	chshape.x = x;
	chshape.y = y;
	switch (shp) {
  400df0:	2901      	cmp	r1, #1
  400df2:	d007      	beq.n	400e04 <make_shape+0x14>
  400df4:	b121      	cbz	r1, 400e00 <make_shape+0x10>
		break;
		case ship:
		chshape.body = '!';
		break;
		case bullet:
		chshape.body = '$';
  400df6:	2902      	cmp	r1, #2
  400df8:	bf0c      	ite	eq
  400dfa:	2124      	moveq	r1, #36	; 0x24
  400dfc:	2100      	movne	r1, #0
  400dfe:	e002      	b.n	400e06 <make_shape+0x16>
	Shape chshape;
	chshape.x = x;
	chshape.y = y;
	switch (shp) {
		case alien:
		chshape.body = '"';
  400e00:	2122      	movs	r1, #34	; 0x22
  400e02:	e000      	b.n	400e06 <make_shape+0x16>
		break;
		case ship:
		chshape.body = '!';
  400e04:	2121      	movs	r1, #33	; 0x21
		break;
		default:
		break;
	}
	chshape.exists = true;
	return chshape;
  400e06:	7001      	strb	r1, [r0, #0]
  400e08:	8042      	strh	r2, [r0, #2]
  400e0a:	8083      	strh	r3, [r0, #4]
  400e0c:	2301      	movs	r3, #1
  400e0e:	7183      	strb	r3, [r0, #6]
}
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop

00400e14 <draw_shape>:
void draw_shape(Shape* shp) {
	if (shp->exists)
  400e14:	7983      	ldrb	r3, [r0, #6]
  400e16:	b1bb      	cbz	r3, 400e48 <draw_shape+0x34>
		break;
	}
	chshape.exists = true;
	return chshape;
}
void draw_shape(Shape* shp) {
  400e18:	b570      	push	{r4, r5, r6, lr}
  400e1a:	4604      	mov	r4, r0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400e1c:	7900      	ldrb	r0, [r0, #4]
  400e1e:	f000 0007 	and.w	r0, r0, #7
  400e22:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400e26:	4e09      	ldr	r6, [pc, #36]	; (400e4c <draw_shape+0x38>)
  400e28:	47b0      	blx	r6
	if (shp->exists)
	{
		ssd1306_set_page_address(shp->y);
		ssd1306_set_column_address(shp->x * 8);
  400e2a:	78a5      	ldrb	r5, [r4, #2]
  400e2c:	00ed      	lsls	r5, r5, #3
  400e2e:	b2ed      	uxtb	r5, r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400e30:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400e34:	f040 0010 	orr.w	r0, r0, #16
  400e38:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400e3a:	f005 0008 	and.w	r0, r5, #8
  400e3e:	47b0      	blx	r6
		hal_display_putc(shp->body);
  400e40:	7820      	ldrb	r0, [r4, #0]
  400e42:	4b03      	ldr	r3, [pc, #12]	; (400e50 <draw_shape+0x3c>)
  400e44:	4798      	blx	r3
  400e46:	bd70      	pop	{r4, r5, r6, pc}
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	00400da9 	.word	0x00400da9
  400e50:	00400611 	.word	0x00400611

00400e54 <move_shape_down>:
	}
}

void move_shape_down(Shape* shp) {
	uint16_t y = shp->y;
  400e54:	8883      	ldrh	r3, [r0, #4]
	// add one to the y axis
	y++;
  400e56:	3301      	adds	r3, #1
  400e58:	b29b      	uxth	r3, r3
	// check if it is still in bounds
	if (y <= 3) 
  400e5a:	2b03      	cmp	r3, #3
		shp->y = y;
  400e5c:	bf98      	it	ls
  400e5e:	8083      	strhls	r3, [r0, #4]
  400e60:	4770      	bx	lr
  400e62:	bf00      	nop

00400e64 <move_shape_up>:
}

void move_shape_up(Shape* shp) {
	uint16_t y = shp->y;
  400e64:	8883      	ldrh	r3, [r0, #4]
	// check if it is still in bounds
	if (y == 0)
  400e66:	b10b      	cbz	r3, 400e6c <move_shape_up+0x8>
		return;
	// subtract one to the y axis
	y --;
	shp->y = y;
  400e68:	3b01      	subs	r3, #1
  400e6a:	8083      	strh	r3, [r0, #4]
  400e6c:	4770      	bx	lr
  400e6e:	bf00      	nop

00400e70 <move_shape_left>:
}

void move_shape_left(Shape* shp)
{
	uint16_t x = shp->x;
  400e70:	8843      	ldrh	r3, [r0, #2]
	// check if it is still in bounds
	if (x == 0)
  400e72:	b10b      	cbz	r3, 400e78 <move_shape_left+0x8>
		return;
	// subtract one from the x axis
	x --;
	shp->x = x;
  400e74:	3b01      	subs	r3, #1
  400e76:	8043      	strh	r3, [r0, #2]
  400e78:	4770      	bx	lr
  400e7a:	bf00      	nop

00400e7c <move_shape_right>:
}

void move_shape_right(Shape* shp)
{
	uint16_t x = shp->x;
  400e7c:	8843      	ldrh	r3, [r0, #2]
	// add one to the x axis
	x ++;
  400e7e:	3301      	adds	r3, #1
  400e80:	b29b      	uxth	r3, r3
	// check if it is still in bounds
	if (x <= 15) 
  400e82:	2b0f      	cmp	r3, #15
		shp->x = x;
  400e84:	bf98      	it	ls
  400e86:	8043      	strhls	r3, [r0, #2]
  400e88:	4770      	bx	lr
  400e8a:	bf00      	nop

00400e8c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400e8c:	b570      	push	{r4, r5, r6, lr}
  400e8e:	b082      	sub	sp, #8
  400e90:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400e92:	ac02      	add	r4, sp, #8
  400e94:	2302      	movs	r3, #2
  400e96:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400e9a:	4d09      	ldr	r5, [pc, #36]	; (400ec0 <ssd1306_write_command+0x34>)
  400e9c:	4621      	mov	r1, r4
  400e9e:	4628      	mov	r0, r5
  400ea0:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <ssd1306_write_command+0x38>)
  400ea2:	4798      	blx	r3
  400ea4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400ea8:	4b07      	ldr	r3, [pc, #28]	; (400ec8 <ssd1306_write_command+0x3c>)
  400eaa:	635a      	str	r2, [r3, #52]	; 0x34
  400eac:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  400eae:	2056      	movs	r0, #86	; 0x56
  400eb0:	4b06      	ldr	r3, [pc, #24]	; (400ecc <ssd1306_write_command+0x40>)
  400eb2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400eb4:	4621      	mov	r1, r4
  400eb6:	4628      	mov	r0, r5
  400eb8:	4b05      	ldr	r3, [pc, #20]	; (400ed0 <ssd1306_write_command+0x44>)
  400eba:	4798      	blx	r3
#endif
}
  400ebc:	b002      	add	sp, #8
  400ebe:	bd70      	pop	{r4, r5, r6, pc}
  400ec0:	40008000 	.word	0x40008000
  400ec4:	00401cb5 	.word	0x00401cb5
  400ec8:	400e1200 	.word	0x400e1200
  400ecc:	20000001 	.word	0x20000001
  400ed0:	00401ce1 	.word	0x00401ce1

00400ed4 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  400ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ed6:	b085      	sub	sp, #20
  400ed8:	4d25      	ldr	r5, [pc, #148]	; (400f70 <ssd1306_init+0x9c>)
  400eda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  400ede:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  400ee0:	2056      	movs	r0, #86	; 0x56
  400ee2:	4c24      	ldr	r4, [pc, #144]	; (400f74 <ssd1306_init+0xa0>)
  400ee4:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ee6:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  400ee8:	2056      	movs	r0, #86	; 0x56
  400eea:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  400eec:	2702      	movs	r7, #2
  400eee:	ae04      	add	r6, sp, #16
  400ef0:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  400ef4:	4c20      	ldr	r4, [pc, #128]	; (400f78 <ssd1306_init+0xa4>)
  400ef6:	4620      	mov	r0, r4
  400ef8:	4b20      	ldr	r3, [pc, #128]	; (400f7c <ssd1306_init+0xa8>)
  400efa:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  400efc:	2500      	movs	r5, #0
  400efe:	9500      	str	r5, [sp, #0]
  400f00:	4b1f      	ldr	r3, [pc, #124]	; (400f80 <ssd1306_init+0xac>)
  400f02:	462a      	mov	r2, r5
  400f04:	4631      	mov	r1, r6
  400f06:	4620      	mov	r0, r4
  400f08:	4e1e      	ldr	r6, [pc, #120]	; (400f84 <ssd1306_init+0xb0>)
  400f0a:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400f0c:	2301      	movs	r3, #1
  400f0e:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400f10:	20a8      	movs	r0, #168	; 0xa8
  400f12:	4c1d      	ldr	r4, [pc, #116]	; (400f88 <ssd1306_init+0xb4>)
  400f14:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400f16:	201f      	movs	r0, #31
  400f18:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400f1a:	20d3      	movs	r0, #211	; 0xd3
  400f1c:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400f1e:	4628      	mov	r0, r5
  400f20:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  400f22:	2040      	movs	r0, #64	; 0x40
  400f24:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400f26:	20a1      	movs	r0, #161	; 0xa1
  400f28:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400f2a:	20c8      	movs	r0, #200	; 0xc8
  400f2c:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400f2e:	20da      	movs	r0, #218	; 0xda
  400f30:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400f32:	4638      	mov	r0, r7
  400f34:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400f36:	2081      	movs	r0, #129	; 0x81
  400f38:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400f3a:	208f      	movs	r0, #143	; 0x8f
  400f3c:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400f3e:	20a4      	movs	r0, #164	; 0xa4
  400f40:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400f42:	20a6      	movs	r0, #166	; 0xa6
  400f44:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400f46:	20d5      	movs	r0, #213	; 0xd5
  400f48:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400f4a:	2080      	movs	r0, #128	; 0x80
  400f4c:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400f4e:	208d      	movs	r0, #141	; 0x8d
  400f50:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400f52:	2014      	movs	r0, #20
  400f54:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400f56:	20db      	movs	r0, #219	; 0xdb
  400f58:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400f5a:	2040      	movs	r0, #64	; 0x40
  400f5c:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400f5e:	20d9      	movs	r0, #217	; 0xd9
  400f60:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400f62:	20f1      	movs	r0, #241	; 0xf1
  400f64:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400f66:	20af      	movs	r0, #175	; 0xaf
  400f68:	47a0      	blx	r4

	ssd1306_display_on();
}
  400f6a:	b005      	add	sp, #20
  400f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f6e:	bf00      	nop
  400f70:	400e1200 	.word	0x400e1200
  400f74:	20000001 	.word	0x20000001
  400f78:	40008000 	.word	0x40008000
  400f7c:	00401be1 	.word	0x00401be1
  400f80:	004c4b40 	.word	0x004c4b40
  400f84:	00401c35 	.word	0x00401c35
  400f88:	00400e8d 	.word	0x00400e8d

00400f8c <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  400f8c:	b500      	push	{lr}
  400f8e:	b085      	sub	sp, #20
	twi_options_t opts = {
  400f90:	2300      	movs	r3, #0
  400f92:	9303      	str	r3, [sp, #12]
  400f94:	4b07      	ldr	r3, [pc, #28]	; (400fb4 <at30tse_init+0x28>)
  400f96:	9301      	str	r3, [sp, #4]
  400f98:	f242 7310 	movw	r3, #10000	; 0x2710
  400f9c:	9302      	str	r3, [sp, #8]
  400f9e:	2013      	movs	r0, #19
  400fa0:	4b05      	ldr	r3, [pc, #20]	; (400fb8 <at30tse_init+0x2c>)
  400fa2:	4798      	blx	r3
	flexcom_enable(BOARD_FLEXCOM_TWI);
	flexcom_set_opmode(BOARD_FLEXCOM_TWI, FLEXCOM_TWI);
#else
	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
#endif
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  400fa4:	a901      	add	r1, sp, #4
  400fa6:	4805      	ldr	r0, [pc, #20]	; (400fbc <at30tse_init+0x30>)
  400fa8:	4b05      	ldr	r3, [pc, #20]	; (400fc0 <at30tse_init+0x34>)
  400faa:	4798      	blx	r3

}
  400fac:	b005      	add	sp, #20
  400fae:	f85d fb04 	ldr.w	pc, [sp], #4
  400fb2:	bf00      	nop
  400fb4:	07270e00 	.word	0x07270e00
  400fb8:	004025b5 	.word	0x004025b5
  400fbc:	40018000 	.word	0x40018000
  400fc0:	00402a29 	.word	0x00402a29

00400fc4 <at30tse_read_register>:
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_register(uint8_t reg, uint8_t reg_type,
		uint8_t reg_size, uint8_t* buffer)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	b086      	sub	sp, #24
	twi_packet_t packet = {
  400fc8:	2400      	movs	r4, #0
  400fca:	9401      	str	r4, [sp, #4]
  400fcc:	9405      	str	r4, [sp, #20]
  400fce:	4301      	orrs	r1, r0
  400fd0:	f88d 1004 	strb.w	r1, [sp, #4]
  400fd4:	2101      	movs	r1, #1
  400fd6:	9102      	str	r1, [sp, #8]
  400fd8:	9303      	str	r3, [sp, #12]
  400fda:	9204      	str	r2, [sp, #16]
  400fdc:	234f      	movs	r3, #79	; 0x4f
  400fde:	f88d 3014 	strb.w	r3, [sp, #20]
		.length = reg_size,
		/* Chip addr */
		.chip = AT30TSE_TEMPERATURE_TWI_ADDR
	};

	return twi_master_read(BOARD_AT30TSE_TWI, &packet);
  400fe2:	a901      	add	r1, sp, #4
  400fe4:	4802      	ldr	r0, [pc, #8]	; (400ff0 <at30tse_read_register+0x2c>)
  400fe6:	4b03      	ldr	r3, [pc, #12]	; (400ff4 <at30tse_read_register+0x30>)
  400fe8:	4798      	blx	r3
}
  400fea:	b2c0      	uxtb	r0, r0
  400fec:	b006      	add	sp, #24
  400fee:	bd10      	pop	{r4, pc}
  400ff0:	40018000 	.word	0x40018000
  400ff4:	00402a8d 	.word	0x00402a8d

00400ff8 <at30tse_read_temperature>:
 * stored
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_temperature(double *temperature)
{
  400ff8:	b570      	push	{r4, r5, r6, lr}
  400ffa:	b082      	sub	sp, #8
  400ffc:	4604      	mov	r4, r0
	/* Placeholder buffer to put temperature data in. */
	uint8_t buffer[2];
	uint8_t error_code = 0;
	buffer[0] = 0;
  400ffe:	2000      	movs	r0, #0
  401000:	f88d 0004 	strb.w	r0, [sp, #4]
	buffer[1] = 0;
  401004:	f88d 0005 	strb.w	r0, [sp, #5]

	/* Read the 16-bit temperature register. */
	error_code = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
  401008:	ab01      	add	r3, sp, #4
  40100a:	2202      	movs	r2, #2
  40100c:	4601      	mov	r1, r0
  40100e:	4d28      	ldr	r5, [pc, #160]	; (4010b0 <at30tse_read_temperature+0xb8>)
  401010:	47a8      	blx	r5
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
  401012:	4605      	mov	r5, r0
  401014:	2800      	cmp	r0, #0
  401016:	d147      	bne.n	4010a8 <at30tse_read_temperature+0xb0>
		uint16_t data = (buffer[0] << 8) | buffer[1];
  401018:	f89d 2004 	ldrb.w	r2, [sp, #4]
  40101c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  401020:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401024:	b21b      	sxth	r3, r3
  401026:	b29a      	uxth	r2, r3
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
  401028:	2b00      	cmp	r3, #0
			sign *= -1;
			data &= ~(1 << 15);
  40102a:	bfba      	itte	lt
  40102c:	f3c2 020e 	ubfxlt	r2, r2, #0, #15
		uint16_t data = (buffer[0] << 8) | buffer[1];
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
			sign *= -1;
  401030:	f04f 30ff 	movlt.w	r0, #4294967295
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
		uint16_t data = (buffer[0] << 8) | buffer[1];
		int8_t sign = 1;
  401034:	2001      	movge	r0, #1
			sign *= -1;
			data &= ~(1 << 15);
		}

		/* Convert to temperature. */
		switch (resolution) {
  401036:	4b1f      	ldr	r3, [pc, #124]	; (4010b4 <at30tse_read_temperature+0xbc>)
  401038:	781b      	ldrb	r3, [r3, #0]
  40103a:	b2db      	uxtb	r3, r3
  40103c:	2b03      	cmp	r3, #3
  40103e:	d833      	bhi.n	4010a8 <at30tse_read_temperature+0xb0>
  401040:	e8df f003 	tbb	[pc, r3]
  401044:	271a0e02 	.word	0x271a0e02
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			*(temperature) = data * sign * 0.5;
  401048:	09d2      	lsrs	r2, r2, #7
  40104a:	fb00 f002 	mul.w	r0, r0, r2
  40104e:	4b1a      	ldr	r3, [pc, #104]	; (4010b8 <at30tse_read_temperature+0xc0>)
  401050:	4798      	blx	r3
  401052:	2200      	movs	r2, #0
  401054:	4b19      	ldr	r3, [pc, #100]	; (4010bc <at30tse_read_temperature+0xc4>)
  401056:	4e1a      	ldr	r6, [pc, #104]	; (4010c0 <at30tse_read_temperature+0xc8>)
  401058:	47b0      	blx	r6
  40105a:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  40105e:	e023      	b.n	4010a8 <at30tse_read_temperature+0xb0>

		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			*(temperature) = data * sign * 0.25;
  401060:	0992      	lsrs	r2, r2, #6
  401062:	fb00 f002 	mul.w	r0, r0, r2
  401066:	4b14      	ldr	r3, [pc, #80]	; (4010b8 <at30tse_read_temperature+0xc0>)
  401068:	4798      	blx	r3
  40106a:	2200      	movs	r2, #0
  40106c:	4b15      	ldr	r3, [pc, #84]	; (4010c4 <at30tse_read_temperature+0xcc>)
  40106e:	4e14      	ldr	r6, [pc, #80]	; (4010c0 <at30tse_read_temperature+0xc8>)
  401070:	47b0      	blx	r6
  401072:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  401076:	e017      	b.n	4010a8 <at30tse_read_temperature+0xb0>

		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			*(temperature) = data * sign * 0.125;
  401078:	0952      	lsrs	r2, r2, #5
  40107a:	fb00 f002 	mul.w	r0, r0, r2
  40107e:	4b0e      	ldr	r3, [pc, #56]	; (4010b8 <at30tse_read_temperature+0xc0>)
  401080:	4798      	blx	r3
  401082:	2200      	movs	r2, #0
  401084:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  401088:	4e0d      	ldr	r6, [pc, #52]	; (4010c0 <at30tse_read_temperature+0xc8>)
  40108a:	47b0      	blx	r6
  40108c:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  401090:	e00a      	b.n	4010a8 <at30tse_read_temperature+0xb0>

		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			*(temperature) = data * sign * 0.0625;
  401092:	0912      	lsrs	r2, r2, #4
  401094:	fb00 f002 	mul.w	r0, r0, r2
  401098:	4b07      	ldr	r3, [pc, #28]	; (4010b8 <at30tse_read_temperature+0xc0>)
  40109a:	4798      	blx	r3
  40109c:	2200      	movs	r2, #0
  40109e:	4b0a      	ldr	r3, [pc, #40]	; (4010c8 <at30tse_read_temperature+0xd0>)
  4010a0:	4e07      	ldr	r6, [pc, #28]	; (4010c0 <at30tse_read_temperature+0xc8>)
  4010a2:	47b0      	blx	r6
  4010a4:	e9c4 0100 	strd	r0, r1, [r4]
			break;
		}
	}

	return error_code;
}
  4010a8:	4628      	mov	r0, r5
  4010aa:	b002      	add	sp, #8
  4010ac:	bd70      	pop	{r4, r5, r6, pc}
  4010ae:	bf00      	nop
  4010b0:	00400fc5 	.word	0x00400fc5
  4010b4:	20000ef8 	.word	0x20000ef8
  4010b8:	00403515 	.word	0x00403515
  4010bc:	3fe00000 	.word	0x3fe00000
  4010c0:	004035e1 	.word	0x004035e1
  4010c4:	3fd00000 	.word	0x3fd00000
  4010c8:	3fb00000 	.word	0x3fb00000

004010cc <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4010cc:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4010ce:	4b07      	ldr	r3, [pc, #28]	; (4010ec <sd_mmc_configure_slot+0x20>)
  4010d0:	6819      	ldr	r1, [r3, #0]
  4010d2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4010d6:	3300      	adds	r3, #0
  4010d8:	bf18      	it	ne
  4010da:	2301      	movne	r3, #1
  4010dc:	7c4a      	ldrb	r2, [r1, #17]
  4010de:	6809      	ldr	r1, [r1, #0]
  4010e0:	4803      	ldr	r0, [pc, #12]	; (4010f0 <sd_mmc_configure_slot+0x24>)
  4010e2:	7800      	ldrb	r0, [r0, #0]
  4010e4:	4c03      	ldr	r4, [pc, #12]	; (4010f4 <sd_mmc_configure_slot+0x28>)
  4010e6:	47a0      	blx	r4
  4010e8:	bd10      	pop	{r4, pc}
  4010ea:	bf00      	nop
  4010ec:	20000efc 	.word	0x20000efc
  4010f0:	20000f00 	.word	0x20000f00
  4010f4:	00401849 	.word	0x00401849

004010f8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4010f8:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
  4010fa:	2800      	cmp	r0, #0
  4010fc:	d156      	bne.n	4011ac <sd_mmc_select_slot+0xb4>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4010fe:	4b34      	ldr	r3, [pc, #208]	; (4011d0 <sd_mmc_select_slot+0xd8>)
  401100:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401102:	0953      	lsrs	r3, r2, #5
  401104:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401108:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40110c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40110e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  401110:	f002 021f 	and.w	r2, r2, #31
  401114:	2301      	movs	r3, #1
  401116:	fa03 f202 	lsl.w	r2, r3, r2
  40111a:	420a      	tst	r2, r1
  40111c:	d00e      	beq.n	40113c <sd_mmc_select_slot+0x44>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  40111e:	4b2c      	ldr	r3, [pc, #176]	; (4011d0 <sd_mmc_select_slot+0xd8>)
  401120:	7b9b      	ldrb	r3, [r3, #14]
  401122:	2b01      	cmp	r3, #1
  401124:	d105      	bne.n	401132 <sd_mmc_select_slot+0x3a>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  401126:	4b2b      	ldr	r3, [pc, #172]	; (4011d4 <sd_mmc_select_slot+0xdc>)
  401128:	781b      	ldrb	r3, [r3, #0]
  40112a:	b113      	cbz	r3, 401132 <sd_mmc_select_slot+0x3a>
		SysTick->CTRL = 0;
  40112c:	2200      	movs	r2, #0
  40112e:	4b2a      	ldr	r3, [pc, #168]	; (4011d8 <sd_mmc_select_slot+0xe0>)
  401130:	601a      	str	r2, [r3, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  401132:	2204      	movs	r2, #4
  401134:	4b26      	ldr	r3, [pc, #152]	; (4011d0 <sd_mmc_select_slot+0xd8>)
  401136:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  401138:	2002      	movs	r0, #2
  40113a:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40113c:	4b24      	ldr	r3, [pc, #144]	; (4011d0 <sd_mmc_select_slot+0xd8>)
  40113e:	7b9b      	ldrb	r3, [r3, #14]
  401140:	2b04      	cmp	r3, #4
  401142:	d115      	bne.n	401170 <sd_mmc_select_slot+0x78>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  401144:	2201      	movs	r2, #1
  401146:	4b22      	ldr	r3, [pc, #136]	; (4011d0 <sd_mmc_select_slot+0xd8>)
  401148:	739a      	strb	r2, [r3, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  40114a:	4b23      	ldr	r3, [pc, #140]	; (4011d8 <sd_mmc_select_slot+0xe0>)
  40114c:	681b      	ldr	r3, [r3, #0]
  40114e:	b93b      	cbnz	r3, 401160 <sd_mmc_select_slot+0x68>
		sd_mmc_sam_systick_used = true;
  401150:	4b20      	ldr	r3, [pc, #128]	; (4011d4 <sd_mmc_select_slot+0xdc>)
  401152:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  401154:	4b20      	ldr	r3, [pc, #128]	; (4011d8 <sd_mmc_select_slot+0xe0>)
  401156:	4921      	ldr	r1, [pc, #132]	; (4011dc <sd_mmc_select_slot+0xe4>)
  401158:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  40115a:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  40115c:	2002      	movs	r0, #2
  40115e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  401160:	2200      	movs	r2, #0
  401162:	4b1c      	ldr	r3, [pc, #112]	; (4011d4 <sd_mmc_select_slot+0xdc>)
  401164:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  401166:	481e      	ldr	r0, [pc, #120]	; (4011e0 <sd_mmc_select_slot+0xe8>)
  401168:	4b1e      	ldr	r3, [pc, #120]	; (4011e4 <sd_mmc_select_slot+0xec>)
  40116a:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  40116c:	2002      	movs	r0, #2
  40116e:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  401170:	2b01      	cmp	r3, #1
  401172:	d10b      	bne.n	40118c <sd_mmc_select_slot+0x94>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  401174:	4b17      	ldr	r3, [pc, #92]	; (4011d4 <sd_mmc_select_slot+0xdc>)
  401176:	781b      	ldrb	r3, [r3, #0]
  401178:	b1f3      	cbz	r3, 4011b8 <sd_mmc_select_slot+0xc0>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  40117a:	4b17      	ldr	r3, [pc, #92]	; (4011d8 <sd_mmc_select_slot+0xe0>)
  40117c:	681b      	ldr	r3, [r3, #0]
  40117e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401182:	d015      	beq.n	4011b0 <sd_mmc_select_slot+0xb8>
		SysTick->CTRL = 0;
  401184:	2200      	movs	r2, #0
  401186:	4b14      	ldr	r3, [pc, #80]	; (4011d8 <sd_mmc_select_slot+0xe0>)
  401188:	601a      	str	r2, [r3, #0]
  40118a:	e015      	b.n	4011b8 <sd_mmc_select_slot+0xc0>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40118c:	2b03      	cmp	r3, #3
  40118e:	d011      	beq.n	4011b4 <sd_mmc_select_slot+0xbc>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  401190:	2200      	movs	r2, #0
  401192:	4b15      	ldr	r3, [pc, #84]	; (4011e8 <sd_mmc_select_slot+0xf0>)
  401194:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  401196:	4c0e      	ldr	r4, [pc, #56]	; (4011d0 <sd_mmc_select_slot+0xd8>)
  401198:	4b14      	ldr	r3, [pc, #80]	; (4011ec <sd_mmc_select_slot+0xf4>)
  40119a:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  40119c:	4b14      	ldr	r3, [pc, #80]	; (4011f0 <sd_mmc_select_slot+0xf8>)
  40119e:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  4011a0:	7ba0      	ldrb	r0, [r4, #14]
  4011a2:	2802      	cmp	r0, #2
  4011a4:	bf14      	ite	ne
  4011a6:	2000      	movne	r0, #0
  4011a8:	2001      	moveq	r0, #1
  4011aa:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  4011ac:	2004      	movs	r0, #4
  4011ae:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  4011b0:	2002      	movs	r0, #2
  4011b2:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
  4011b4:	2003      	movs	r0, #3
  4011b6:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4011b8:	4b05      	ldr	r3, [pc, #20]	; (4011d0 <sd_mmc_select_slot+0xd8>)
  4011ba:	2202      	movs	r2, #2
  4011bc:	739a      	strb	r2, [r3, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4011be:	4a0d      	ldr	r2, [pc, #52]	; (4011f4 <sd_mmc_select_slot+0xfc>)
  4011c0:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4011c2:	2201      	movs	r2, #1
  4011c4:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  4011c6:	2200      	movs	r2, #0
  4011c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  4011cc:	e7e0      	b.n	401190 <sd_mmc_select_slot+0x98>
  4011ce:	bf00      	nop
  4011d0:	20000428 	.word	0x20000428
  4011d4:	20000ef9 	.word	0x20000ef9
  4011d8:	e000e010 	.word	0xe000e010
  4011dc:	00e4e1c0 	.word	0x00e4e1c0
  4011e0:	0082ca25 	.word	0x0082ca25
  4011e4:	20000001 	.word	0x20000001
  4011e8:	20000f00 	.word	0x20000f00
  4011ec:	20000efc 	.word	0x20000efc
  4011f0:	004010cd 	.word	0x004010cd
  4011f4:	00061a80 	.word	0x00061a80

004011f8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
  4011f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011fc:	4c09      	ldr	r4, [pc, #36]	; (401224 <sd_mmc_cmd13+0x2c>)
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  4011fe:	2700      	movs	r7, #0
  401200:	4e09      	ldr	r6, [pc, #36]	; (401228 <sd_mmc_cmd13+0x30>)
				return false;
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
  401202:	4d0a      	ldr	r5, [pc, #40]	; (40122c <sd_mmc_cmd13+0x34>)
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  401204:	4639      	mov	r1, r7
  401206:	f641 300d 	movw	r0, #6925	; 0x1b0d
  40120a:	47b0      	blx	r6
  40120c:	4680      	mov	r8, r0
  40120e:	b130      	cbz	r0, 40121e <sd_mmc_cmd13+0x26>
				return false;
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
  401210:	47a8      	blx	r5
  401212:	b2c0      	uxtb	r0, r0
  401214:	b118      	cbz	r0, 40121e <sd_mmc_cmd13+0x26>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
  401216:	3c01      	subs	r4, #1
  401218:	d1f4      	bne.n	401204 <sd_mmc_cmd13+0xc>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
  40121a:	f04f 0800 	mov.w	r8, #0
		}
	} while (1);

	return true;
}
  40121e:	4640      	mov	r0, r8
  401220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401224:	00030d41 	.word	0x00030d41
  401228:	00401a69 	.word	0x00401a69
  40122c:	00401a81 	.word	0x00401a81

00401230 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
  401230:	b510      	push	{r4, lr}
  401232:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
  401234:	4b0c      	ldr	r3, [pc, #48]	; (401268 <sd_mmc_cmd9_spi+0x38>)
  401236:	681b      	ldr	r3, [r3, #0]
  401238:	8999      	ldrh	r1, [r3, #12]
  40123a:	2301      	movs	r3, #1
  40123c:	9300      	str	r3, [sp, #0]
  40123e:	2210      	movs	r2, #16
  401240:	4091      	lsls	r1, r2
  401242:	480a      	ldr	r0, [pc, #40]	; (40126c <sd_mmc_cmd9_spi+0x3c>)
  401244:	4c0a      	ldr	r4, [pc, #40]	; (401270 <sd_mmc_cmd9_spi+0x40>)
  401246:	47a0      	blx	r4
  401248:	4603      	mov	r3, r0
  40124a:	b150      	cbz	r0, 401262 <sd_mmc_cmd9_spi+0x32>
			CSD_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
  40124c:	4b06      	ldr	r3, [pc, #24]	; (401268 <sd_mmc_cmd9_spi+0x38>)
  40124e:	6818      	ldr	r0, [r3, #0]
  401250:	2101      	movs	r1, #1
  401252:	3012      	adds	r0, #18
  401254:	4b07      	ldr	r3, [pc, #28]	; (401274 <sd_mmc_cmd9_spi+0x44>)
  401256:	4798      	blx	r3
  401258:	4603      	mov	r3, r0
  40125a:	b110      	cbz	r0, 401262 <sd_mmc_cmd9_spi+0x32>
		return false;
	}
	return driver_wait_end_of_read_blocks();
  40125c:	4b06      	ldr	r3, [pc, #24]	; (401278 <sd_mmc_cmd9_spi+0x48>)
  40125e:	4798      	blx	r3
  401260:	4603      	mov	r3, r0
}
  401262:	4618      	mov	r0, r3
  401264:	b002      	add	sp, #8
  401266:	bd10      	pop	{r4, pc}
  401268:	20000efc 	.word	0x20000efc
  40126c:	00081109 	.word	0x00081109
  401270:	004018e9 	.word	0x004018e9
  401274:	00401b01 	.word	0x00401b01
  401278:	00401b79 	.word	0x00401b79

0040127c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40127c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40127e:	4b03      	ldr	r3, [pc, #12]	; (40128c <sd_mmc_deselect_slot+0x10>)
  401280:	781b      	ldrb	r3, [r3, #0]
  401282:	b913      	cbnz	r3, 40128a <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
  401284:	2000      	movs	r0, #0
  401286:	4b02      	ldr	r3, [pc, #8]	; (401290 <sd_mmc_deselect_slot+0x14>)
  401288:	4798      	blx	r3
  40128a:	bd08      	pop	{r3, pc}
  40128c:	20000f00 	.word	0x20000f00
  401290:	00401889 	.word	0x00401889

00401294 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  401294:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  401296:	200d      	movs	r0, #13
  401298:	4b05      	ldr	r3, [pc, #20]	; (4012b0 <sd_mmc_init+0x1c>)
  40129a:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40129c:	2204      	movs	r2, #4
  40129e:	4b05      	ldr	r3, [pc, #20]	; (4012b4 <sd_mmc_init+0x20>)
  4012a0:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4012a2:	22ff      	movs	r2, #255	; 0xff
  4012a4:	4b04      	ldr	r3, [pc, #16]	; (4012b8 <sd_mmc_init+0x24>)
  4012a6:	701a      	strb	r2, [r3, #0]
	driver_init();
  4012a8:	4b04      	ldr	r3, [pc, #16]	; (4012bc <sd_mmc_init+0x28>)
  4012aa:	4798      	blx	r3
  4012ac:	bd08      	pop	{r3, pc}
  4012ae:	bf00      	nop
  4012b0:	004025b5 	.word	0x004025b5
  4012b4:	20000428 	.word	0x20000428
  4012b8:	20000f00 	.word	0x20000f00
  4012bc:	00401819 	.word	0x00401819

004012c0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4012c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012c4:	b086      	sub	sp, #24
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4012c6:	4bac      	ldr	r3, [pc, #688]	; (401578 <sd_mmc_check+0x2b8>)
  4012c8:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4012ca:	2801      	cmp	r0, #1
  4012cc:	d004      	beq.n	4012d8 <sd_mmc_check+0x18>
  4012ce:	4604      	mov	r4, r0
		sd_mmc_deselect_slot();
  4012d0:	4baa      	ldr	r3, [pc, #680]	; (40157c <sd_mmc_check+0x2bc>)
  4012d2:	4798      	blx	r3
		return sd_mmc_err;
  4012d4:	4620      	mov	r0, r4
  4012d6:	e22b      	b.n	401730 <sd_mmc_check+0x470>
static bool sd_mmc_spi_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  4012d8:	4ba9      	ldr	r3, [pc, #676]	; (401580 <sd_mmc_check+0x2c0>)
  4012da:	681b      	ldr	r3, [r3, #0]
  4012dc:	2201      	movs	r2, #1
  4012de:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4012e0:	2400      	movs	r4, #0
  4012e2:	741c      	strb	r4, [r3, #16]
	sd_mmc_card->rca = 0;
  4012e4:	819c      	strh	r4, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  4012e6:	4ba7      	ldr	r3, [pc, #668]	; (401584 <sd_mmc_check+0x2c4>)
  4012e8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  4012ea:	4621      	mov	r1, r4
  4012ec:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  4012f0:	4ba5      	ldr	r3, [pc, #660]	; (401588 <sd_mmc_check+0x2c8>)
  4012f2:	4798      	blx	r3
  4012f4:	2800      	cmp	r0, #0
  4012f6:	f000 81c8 	beq.w	40168a <sd_mmc_check+0x3ca>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4012fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4012fe:	f245 5008 	movw	r0, #21768	; 0x5508
  401302:	4ba1      	ldr	r3, [pc, #644]	; (401588 <sd_mmc_check+0x2c8>)
  401304:	4798      	blx	r3
  401306:	2800      	cmp	r0, #0
  401308:	f000 81c7 	beq.w	40169a <sd_mmc_check+0x3da>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  40130c:	4b9f      	ldr	r3, [pc, #636]	; (40158c <sd_mmc_check+0x2cc>)
  40130e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  401310:	f1b0 3fff 	cmp.w	r0, #4294967295
  401314:	f000 81c3 	beq.w	40169e <sd_mmc_check+0x3de>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  401318:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40131c:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  401320:	f040 81b3 	bne.w	40168a <sd_mmc_check+0x3ca>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  401324:	2601      	movs	r6, #1
  401326:	e1bb      	b.n	4016a0 <sd_mmc_check+0x3e0>
	 */
	retry = 7150;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  401328:	4641      	mov	r1, r8
  40132a:	f241 1037 	movw	r0, #4407	; 0x1137
  40132e:	47a8      	blx	r5
  401330:	2800      	cmp	r0, #0
  401332:	f000 81c3 	beq.w	4016bc <sd_mmc_check+0x3fc>
		arg = 0;
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
  401336:	4631      	mov	r1, r6
  401338:	f241 1029 	movw	r0, #4393	; 0x1129
  40133c:	47a8      	blx	r5
  40133e:	2800      	cmp	r0, #0
  401340:	f000 81bc 	beq.w	4016bc <sd_mmc_check+0x3fc>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  401344:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  401346:	f010 0f01 	tst.w	r0, #1
  40134a:	d002      	beq.n	401352 <sd_mmc_check+0x92>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
  40134c:	3c01      	subs	r4, #1
  40134e:	d1eb      	bne.n	401328 <sd_mmc_check+0x68>
  401350:	e1b4      	b.n	4016bc <sd_mmc_check+0x3fc>
			return false;
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  401352:	2100      	movs	r1, #0
  401354:	f240 503a 	movw	r0, #1338	; 0x53a
  401358:	4b8b      	ldr	r3, [pc, #556]	; (401588 <sd_mmc_check+0x2c8>)
  40135a:	4798      	blx	r3
  40135c:	2800      	cmp	r0, #0
  40135e:	f000 81ad 	beq.w	4016bc <sd_mmc_check+0x3fc>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
  401362:	4b8a      	ldr	r3, [pc, #552]	; (40158c <sd_mmc_check+0x2cc>)
  401364:	4798      	blx	r3
  401366:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  40136a:	f000 81b3 	beq.w	4016d4 <sd_mmc_check+0x414>
		sd_mmc_card->type |= CARD_TYPE_HC;
  40136e:	4b84      	ldr	r3, [pc, #528]	; (401580 <sd_mmc_check+0x2c0>)
  401370:	681a      	ldr	r2, [r3, #0]
  401372:	7bd3      	ldrb	r3, [r2, #15]
  401374:	f043 0308 	orr.w	r3, r3, #8
  401378:	73d3      	strb	r3, [r2, #15]
  40137a:	e1ab      	b.n	4016d4 <sd_mmc_check+0x414>
static bool sd_mmc_spi_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  40137c:	f641 34ef 	movw	r4, #7151	; 0x1bef
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  401380:	2600      	movs	r6, #0
  401382:	4d81      	ldr	r5, [pc, #516]	; (401588 <sd_mmc_check+0x2c8>)
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  401384:	4f81      	ldr	r7, [pc, #516]	; (40158c <sd_mmc_check+0x2cc>)
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  401386:	4631      	mov	r1, r6
  401388:	f241 1001 	movw	r0, #4353	; 0x1101
  40138c:	47a8      	blx	r5
  40138e:	2800      	cmp	r0, #0
  401390:	f000 817b 	beq.w	40168a <sd_mmc_check+0x3ca>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  401394:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  401396:	f010 0f01 	tst.w	r0, #1
  40139a:	d002      	beq.n	4013a2 <sd_mmc_check+0xe2>
			break;
		}
		if (retry-- == 0) {
  40139c:	3c01      	subs	r4, #1
  40139e:	d1f2      	bne.n	401386 <sd_mmc_check+0xc6>
  4013a0:	e173      	b.n	40168a <sd_mmc_check+0x3ca>
			return false;
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  4013a2:	2100      	movs	r1, #0
  4013a4:	f240 503a 	movw	r0, #1338	; 0x53a
  4013a8:	4b77      	ldr	r3, [pc, #476]	; (401588 <sd_mmc_check+0x2c8>)
  4013aa:	4798      	blx	r3
  4013ac:	2800      	cmp	r0, #0
  4013ae:	f000 816c 	beq.w	40168a <sd_mmc_check+0x3ca>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
  4013b2:	4b76      	ldr	r3, [pc, #472]	; (40158c <sd_mmc_check+0x2cc>)
  4013b4:	4798      	blx	r3
  4013b6:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4013ba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4013be:	f040 8192 	bne.w	4016e6 <sd_mmc_check+0x426>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
  4013c2:	4b6f      	ldr	r3, [pc, #444]	; (401580 <sd_mmc_check+0x2c0>)
  4013c4:	681a      	ldr	r2, [r3, #0]
  4013c6:	7bd3      	ldrb	r3, [r2, #15]
  4013c8:	f043 0308 	orr.w	r3, r3, #8
  4013cc:	73d3      	strb	r3, [r2, #15]
  4013ce:	e18a      	b.n	4016e6 <sd_mmc_check+0x426>
	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
  4013d0:	4b6f      	ldr	r3, [pc, #444]	; (401590 <sd_mmc_check+0x2d0>)
  4013d2:	4798      	blx	r3
  4013d4:	2800      	cmp	r0, #0
  4013d6:	f000 8158 	beq.w	40168a <sd_mmc_check+0x3ca>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4013da:	4b69      	ldr	r3, [pc, #420]	; (401580 <sd_mmc_check+0x2c0>)
  4013dc:	6819      	ldr	r1, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4013de:	7c8b      	ldrb	r3, [r1, #18]
  4013e0:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4013e4:	3b01      	subs	r3, #1
  4013e6:	2b03      	cmp	r3, #3
  4013e8:	d803      	bhi.n	4013f2 <sd_mmc_check+0x132>
  4013ea:	e8df f003 	tbb	[pc, r3]
  4013ee:	0805      	.short	0x0805
  4013f0:	0e0b      	.short	0x0e0b
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4013f2:	2312      	movs	r3, #18
  4013f4:	740b      	strb	r3, [r1, #16]
  4013f6:	e00a      	b.n	40140e <sd_mmc_check+0x14e>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4013f8:	2314      	movs	r3, #20
  4013fa:	740b      	strb	r3, [r1, #16]
  4013fc:	e007      	b.n	40140e <sd_mmc_check+0x14e>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  4013fe:	2322      	movs	r3, #34	; 0x22
  401400:	740b      	strb	r3, [r1, #16]
  401402:	e004      	b.n	40140e <sd_mmc_check+0x14e>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  401404:	2330      	movs	r3, #48	; 0x30
  401406:	740b      	strb	r3, [r1, #16]
  401408:	e001      	b.n	40140e <sd_mmc_check+0x14e>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  40140a:	2340      	movs	r3, #64	; 0x40
  40140c:	740b      	strb	r3, [r1, #16]
  40140e:	7d4b      	ldrb	r3, [r1, #21]
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  401410:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401414:	f003 0307 	and.w	r3, r3, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  401418:	4a5e      	ldr	r2, [pc, #376]	; (401594 <sd_mmc_check+0x2d4>)
  40141a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401422:	fb03 f302 	mul.w	r3, r3, r2
  401426:	4a5c      	ldr	r2, [pc, #368]	; (401598 <sd_mmc_check+0x2d8>)
  401428:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40142c:	fb03 f302 	mul.w	r3, r3, r2
  401430:	600b      	str	r3, [r1, #0]
  401432:	7e88      	ldrb	r0, [r1, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401434:	7e4b      	ldrb	r3, [r1, #25]
  401436:	7e0a      	ldrb	r2, [r1, #24]
  401438:	0292      	lsls	r2, r2, #10
  40143a:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  40143e:	ea43 13a0 	orr.w	r3, r3, r0, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  401442:	f3c3 030b 	ubfx	r3, r3, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  401446:	f640 72ff 	movw	r2, #4095	; 0xfff
  40144a:	4293      	cmp	r3, r2
  40144c:	d00f      	beq.n	40146e <sd_mmc_check+0x1ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40144e:	7f08      	ldrb	r0, [r1, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401450:	7eca      	ldrb	r2, [r1, #27]
  401452:	0052      	lsls	r2, r2, #1
  401454:	ea42 12e0 	orr.w	r2, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  401458:	3301      	adds	r3, #1
  40145a:	f002 0207 	and.w	r2, r2, #7
  40145e:	3202      	adds	r2, #2
  401460:	4093      	lsls	r3, r2
  401462:	7dca      	ldrb	r2, [r1, #23]
  401464:	f002 020f 	and.w	r2, r2, #15
  401468:	4093      	lsls	r3, r2
  40146a:	0a9b      	lsrs	r3, r3, #10
  40146c:	604b      	str	r3, [r1, #4]
	if (!sd_mmc_cmd9_spi()) {
		return false;
	}
	mmc_decode_csd();
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  40146e:	7c0b      	ldrb	r3, [r1, #16]
  401470:	2b3f      	cmp	r3, #63	; 0x3f
  401472:	d93f      	bls.n	4014f4 <sd_mmc_check+0x234>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  401474:	2100      	movs	r1, #0
  401476:	9100      	str	r1, [sp, #0]
  401478:	2301      	movs	r3, #1
  40147a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40147e:	4847      	ldr	r0, [pc, #284]	; (40159c <sd_mmc_check+0x2dc>)
  401480:	4c47      	ldr	r4, [pc, #284]	; (4015a0 <sd_mmc_check+0x2e0>)
  401482:	47a0      	blx	r4
  401484:	2800      	cmp	r0, #0
  401486:	f000 8100 	beq.w	40168a <sd_mmc_check+0x3ca>
  40148a:	2400      	movs	r4, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  40148c:	4d45      	ldr	r5, [pc, #276]	; (4015a4 <sd_mmc_check+0x2e4>)
  40148e:	a803      	add	r0, sp, #12
  401490:	47a8      	blx	r5
  401492:	2800      	cmp	r0, #0
  401494:	f000 80f9 	beq.w	40168a <sd_mmc_check+0x3ca>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  401498:	3401      	adds	r4, #1
  40149a:	b2a4      	uxth	r4, r4
  40149c:	2c32      	cmp	r4, #50	; 0x32
  40149e:	d1f6      	bne.n	40148e <sd_mmc_check+0x1ce>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4014a0:	4b37      	ldr	r3, [pc, #220]	; (401580 <sd_mmc_check+0x2c0>)
  4014a2:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4014a4:	7e91      	ldrb	r1, [r2, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4014a6:	7e53      	ldrb	r3, [r2, #25]
  4014a8:	7e12      	ldrb	r2, [r2, #24]
  4014aa:	0292      	lsls	r2, r2, #10
  4014ac:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  4014b0:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
  4014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4014b8:	f640 72ff 	movw	r2, #4095	; 0xfff
  4014bc:	4293      	cmp	r3, r2
  4014be:	d10e      	bne.n	4014de <sd_mmc_check+0x21e>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  4014c0:	4d38      	ldr	r5, [pc, #224]	; (4015a4 <sd_mmc_check+0x2e4>)
  4014c2:	a804      	add	r0, sp, #16
  4014c4:	47a8      	blx	r5
  4014c6:	2800      	cmp	r0, #0
  4014c8:	f000 80df 	beq.w	40168a <sd_mmc_check+0x3ca>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4014cc:	3401      	adds	r4, #1
  4014ce:	b2a4      	uxth	r4, r4
  4014d0:	2c35      	cmp	r4, #53	; 0x35
  4014d2:	d9f6      	bls.n	4014c2 <sd_mmc_check+0x202>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4014d4:	4b2a      	ldr	r3, [pc, #168]	; (401580 <sd_mmc_check+0x2c0>)
  4014d6:	681a      	ldr	r2, [r3, #0]
  4014d8:	9b04      	ldr	r3, [sp, #16]
  4014da:	085b      	lsrs	r3, r3, #1
  4014dc:	6053      	str	r3, [r2, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  4014de:	4d31      	ldr	r5, [pc, #196]	; (4015a4 <sd_mmc_check+0x2e4>)
  4014e0:	e006      	b.n	4014f0 <sd_mmc_check+0x230>
  4014e2:	a804      	add	r0, sp, #16
  4014e4:	47a8      	blx	r5
  4014e6:	2800      	cmp	r0, #0
  4014e8:	f000 80cf 	beq.w	40168a <sd_mmc_check+0x3ca>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4014ec:	3401      	adds	r4, #1
  4014ee:	b2a4      	uxth	r4, r4
  4014f0:	2c7f      	cmp	r4, #127	; 0x7f
  4014f2:	d9f6      	bls.n	4014e2 <sd_mmc_check+0x222>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4014f4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4014f8:	f241 1010 	movw	r0, #4368	; 0x1110
  4014fc:	4b22      	ldr	r3, [pc, #136]	; (401588 <sd_mmc_check+0x2c8>)
  4014fe:	4798      	blx	r3
  401500:	2800      	cmp	r0, #0
  401502:	f000 80c2 	beq.w	40168a <sd_mmc_check+0x3ca>
		return false;
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
  401506:	4b28      	ldr	r3, [pc, #160]	; (4015a8 <sd_mmc_check+0x2e8>)
  401508:	4798      	blx	r3
  40150a:	2800      	cmp	r0, #0
  40150c:	f000 80bd 	beq.w	40168a <sd_mmc_check+0x3ca>
		return false;
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
  401510:	4b26      	ldr	r3, [pc, #152]	; (4015ac <sd_mmc_check+0x2ec>)
  401512:	4798      	blx	r3
  401514:	e0fc      	b.n	401710 <sd_mmc_check+0x450>
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
			return false;
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401516:	4b1a      	ldr	r3, [pc, #104]	; (401580 <sd_mmc_check+0x2c0>)
  401518:	681b      	ldr	r3, [r3, #0]
  40151a:	7bdb      	ldrb	r3, [r3, #15]
  40151c:	f013 0f01 	tst.w	r3, #1
  401520:	f000 80f1 	beq.w	401706 <sd_mmc_check+0x446>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
  401524:	4b1a      	ldr	r3, [pc, #104]	; (401590 <sd_mmc_check+0x2d0>)
  401526:	4798      	blx	r3
  401528:	2800      	cmp	r0, #0
  40152a:	f000 80ae 	beq.w	40168a <sd_mmc_check+0x3ca>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40152e:	4b14      	ldr	r3, [pc, #80]	; (401580 <sd_mmc_check+0x2c0>)
  401530:	681b      	ldr	r3, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401532:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  401534:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401538:	f002 0207 	and.w	r2, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40153c:	4915      	ldr	r1, [pc, #84]	; (401594 <sd_mmc_check+0x2d4>)
  40153e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  401542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401546:	fb02 f201 	mul.w	r2, r2, r1
  40154a:	4919      	ldr	r1, [pc, #100]	; (4015b0 <sd_mmc_check+0x2f0>)
  40154c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  401550:	fb02 f201 	mul.w	r2, r2, r1
  401554:	601a      	str	r2, [r3, #0]
  401556:	7c9a      	ldrb	r2, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  401558:	0992      	lsrs	r2, r2, #6
  40155a:	d02b      	beq.n	4015b4 <sd_mmc_check+0x2f4>
  40155c:	7eda      	ldrb	r2, [r3, #27]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40155e:	7e98      	ldrb	r0, [r3, #26]
  401560:	7e59      	ldrb	r1, [r3, #25]
  401562:	0409      	lsls	r1, r1, #16
  401564:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  401568:	430a      	orrs	r2, r1
		sd_mmc_card->capacity =
  40156a:	f3c2 0215 	ubfx	r2, r2, #0, #22
  40156e:	3201      	adds	r2, #1
  401570:	0252      	lsls	r2, r2, #9
  401572:	605a      	str	r2, [r3, #4]
  401574:	e038      	b.n	4015e8 <sd_mmc_check+0x328>
  401576:	bf00      	nop
  401578:	004010f9 	.word	0x004010f9
  40157c:	0040127d 	.word	0x0040127d
  401580:	20000efc 	.word	0x20000efc
  401584:	004018b1 	.word	0x004018b1
  401588:	00401a69 	.word	0x00401a69
  40158c:	00401a81 	.word	0x00401a81
  401590:	00401231 	.word	0x00401231
  401594:	004047a4 	.word	0x004047a4
  401598:	004047c0 	.word	0x004047c0
  40159c:	00081108 	.word	0x00081108
  4015a0:	004018e9 	.word	0x004018e9
  4015a4:	00401a8d 	.word	0x00401a8d
  4015a8:	004011f9 	.word	0x004011f9
  4015ac:	004010cd 	.word	0x004010cd
  4015b0:	00404764 	.word	0x00404764
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4015b4:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4015b6:	7e5a      	ldrb	r2, [r3, #25]
  4015b8:	7e19      	ldrb	r1, [r3, #24]
  4015ba:	0289      	lsls	r1, r1, #10
  4015bc:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
  4015c0:	ea42 12a0 	orr.w	r2, r2, r0, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4015c4:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4015c6:	7ed9      	ldrb	r1, [r3, #27]
  4015c8:	0049      	lsls	r1, r1, #1
  4015ca:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  4015ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4015d2:	3201      	adds	r2, #1
  4015d4:	f001 0107 	and.w	r1, r1, #7
  4015d8:	3102      	adds	r1, #2
  4015da:	408a      	lsls	r2, r1
  4015dc:	7dd9      	ldrb	r1, [r3, #23]
  4015de:	f001 010f 	and.w	r1, r1, #15
  4015e2:	408a      	lsls	r2, r1
  4015e4:	0a92      	lsrs	r2, r2, #10
  4015e6:	605a      	str	r2, [r3, #4]
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4015e8:	8999      	ldrh	r1, [r3, #12]
  4015ea:	0409      	lsls	r1, r1, #16
  4015ec:	f241 1037 	movw	r0, #4407	; 0x1137
  4015f0:	4b51      	ldr	r3, [pc, #324]	; (401738 <sd_mmc_check+0x478>)
  4015f2:	4798      	blx	r3
  4015f4:	2800      	cmp	r0, #0
  4015f6:	d048      	beq.n	40168a <sd_mmc_check+0x3ca>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4015f8:	2301      	movs	r3, #1
  4015fa:	9300      	str	r3, [sp, #0]
  4015fc:	2208      	movs	r2, #8
  4015fe:	2100      	movs	r1, #0
  401600:	484e      	ldr	r0, [pc, #312]	; (40173c <sd_mmc_check+0x47c>)
  401602:	4c4f      	ldr	r4, [pc, #316]	; (401740 <sd_mmc_check+0x480>)
  401604:	47a0      	blx	r4
  401606:	2800      	cmp	r0, #0
  401608:	d03f      	beq.n	40168a <sd_mmc_check+0x3ca>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  40160a:	2101      	movs	r1, #1
  40160c:	a804      	add	r0, sp, #16
  40160e:	4b4d      	ldr	r3, [pc, #308]	; (401744 <sd_mmc_check+0x484>)
  401610:	4798      	blx	r3
  401612:	2800      	cmp	r0, #0
  401614:	d039      	beq.n	40168a <sd_mmc_check+0x3ca>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  401616:	4b4c      	ldr	r3, [pc, #304]	; (401748 <sd_mmc_check+0x488>)
  401618:	4798      	blx	r3
  40161a:	2800      	cmp	r0, #0
  40161c:	d035      	beq.n	40168a <sd_mmc_check+0x3ca>
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  40161e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401622:	f003 030f 	and.w	r3, r3, #15
  401626:	2b01      	cmp	r3, #1
  401628:	d008      	beq.n	40163c <sd_mmc_check+0x37c>
  40162a:	b113      	cbz	r3, 401632 <sd_mmc_check+0x372>
  40162c:	2b02      	cmp	r3, #2
  40162e:	d00a      	beq.n	401646 <sd_mmc_check+0x386>
  401630:	e013      	b.n	40165a <sd_mmc_check+0x39a>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  401632:	4b46      	ldr	r3, [pc, #280]	; (40174c <sd_mmc_check+0x48c>)
  401634:	681b      	ldr	r3, [r3, #0]
  401636:	2210      	movs	r2, #16
  401638:	741a      	strb	r2, [r3, #16]
  40163a:	e05c      	b.n	4016f6 <sd_mmc_check+0x436>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40163c:	4b43      	ldr	r3, [pc, #268]	; (40174c <sd_mmc_check+0x48c>)
  40163e:	681b      	ldr	r3, [r3, #0]
  401640:	221a      	movs	r2, #26
  401642:	741a      	strb	r2, [r3, #16]
  401644:	e057      	b.n	4016f6 <sd_mmc_check+0x436>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401646:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  40164a:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40164c:	4b3f      	ldr	r3, [pc, #252]	; (40174c <sd_mmc_check+0x48c>)
  40164e:	681b      	ldr	r3, [r3, #0]
  401650:	bf14      	ite	ne
  401652:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  401654:	2220      	moveq	r2, #32
  401656:	741a      	strb	r2, [r3, #16]
  401658:	e04d      	b.n	4016f6 <sd_mmc_check+0x436>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40165a:	4b3c      	ldr	r3, [pc, #240]	; (40174c <sd_mmc_check+0x48c>)
  40165c:	681b      	ldr	r3, [r3, #0]
  40165e:	2210      	movs	r2, #16
  401660:	741a      	strb	r2, [r3, #16]
  401662:	e048      	b.n	4016f6 <sd_mmc_check+0x436>
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401664:	f44f 7100 	mov.w	r1, #512	; 0x200
  401668:	f241 1010 	movw	r0, #4368	; 0x1110
  40166c:	4b32      	ldr	r3, [pc, #200]	; (401738 <sd_mmc_check+0x478>)
  40166e:	4798      	blx	r3
  401670:	b158      	cbz	r0, 40168a <sd_mmc_check+0x3ca>
			return false;
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401672:	4b36      	ldr	r3, [pc, #216]	; (40174c <sd_mmc_check+0x48c>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	7bdb      	ldrb	r3, [r3, #15]
  401678:	f013 0f01 	tst.w	r3, #1
  40167c:	d002      	beq.n	401684 <sd_mmc_check+0x3c4>
		if (!sd_mmc_cmd13()) {
  40167e:	4b34      	ldr	r3, [pc, #208]	; (401750 <sd_mmc_check+0x490>)
  401680:	4798      	blx	r3
  401682:	b110      	cbz	r0, 40168a <sd_mmc_check+0x3ca>
			return false;
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
  401684:	4b33      	ldr	r3, [pc, #204]	; (401754 <sd_mmc_check+0x494>)
  401686:	4798      	blx	r3
  401688:	e042      	b.n	401710 <sd_mmc_check+0x450>
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40168a:	4b30      	ldr	r3, [pc, #192]	; (40174c <sd_mmc_check+0x48c>)
  40168c:	681b      	ldr	r3, [r3, #0]
  40168e:	2403      	movs	r4, #3
  401690:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  401692:	4b31      	ldr	r3, [pc, #196]	; (401758 <sd_mmc_check+0x498>)
  401694:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  401696:	4620      	mov	r0, r4
  401698:	e04a      	b.n	401730 <sd_mmc_check+0x470>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  40169a:	2600      	movs	r6, #0
  40169c:	e000      	b.n	4016a0 <sd_mmc_check+0x3e0>
  40169e:	2600      	movs	r6, #0
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4016a0:	4b2a      	ldr	r3, [pc, #168]	; (40174c <sd_mmc_check+0x48c>)
  4016a2:	681b      	ldr	r3, [r3, #0]
  4016a4:	7bdb      	ldrb	r3, [r3, #15]
  4016a6:	f013 0f01 	tst.w	r3, #1
  4016aa:	d039      	beq.n	401720 <sd_mmc_check+0x460>
  4016ac:	07b6      	lsls	r6, r6, #30
  4016ae:	f641 34ef 	movw	r4, #7151	; 0x1bef
	 */
	retry = 7150;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4016b2:	f04f 0800 	mov.w	r8, #0
  4016b6:	4d20      	ldr	r5, [pc, #128]	; (401738 <sd_mmc_check+0x478>)
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  4016b8:	4f28      	ldr	r7, [pc, #160]	; (40175c <sd_mmc_check+0x49c>)
  4016ba:	e635      	b.n	401328 <sd_mmc_check+0x68>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  4016bc:	4b23      	ldr	r3, [pc, #140]	; (40174c <sd_mmc_check+0x48c>)
  4016be:	681b      	ldr	r3, [r3, #0]
  4016c0:	2202      	movs	r2, #2
  4016c2:	73da      	strb	r2, [r3, #15]
static bool sd_mmc_spi_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  4016c4:	2100      	movs	r1, #0
  4016c6:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  4016ca:	4b1b      	ldr	r3, [pc, #108]	; (401738 <sd_mmc_check+0x478>)
  4016cc:	4798      	blx	r3
  4016ce:	2800      	cmp	r0, #0
  4016d0:	d0db      	beq.n	40168a <sd_mmc_check+0x3ca>
  4016d2:	e653      	b.n	40137c <sd_mmc_check+0xbc>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  4016d4:	2100      	movs	r1, #0
  4016d6:	f241 103b 	movw	r0, #4411	; 0x113b
  4016da:	4b17      	ldr	r3, [pc, #92]	; (401738 <sd_mmc_check+0x478>)
  4016dc:	4798      	blx	r3
  4016de:	2800      	cmp	r0, #0
  4016e0:	f47f af19 	bne.w	401516 <sd_mmc_check+0x256>
  4016e4:	e7d1      	b.n	40168a <sd_mmc_check+0x3ca>
	if (!mmc_spi_op_cond()) {
		return false;
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  4016e6:	2100      	movs	r1, #0
  4016e8:	f241 103b 	movw	r0, #4411	; 0x113b
  4016ec:	4b12      	ldr	r3, [pc, #72]	; (401738 <sd_mmc_check+0x478>)
  4016ee:	4798      	blx	r3
  4016f0:	2800      	cmp	r0, #0
  4016f2:	d0ca      	beq.n	40168a <sd_mmc_check+0x3ca>
  4016f4:	e66c      	b.n	4013d0 <sd_mmc_check+0x110>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  4016f6:	4b15      	ldr	r3, [pc, #84]	; (40174c <sd_mmc_check+0x48c>)
  4016f8:	681b      	ldr	r3, [r3, #0]
  4016fa:	7bdb      	ldrb	r3, [r3, #15]
  4016fc:	f003 0309 	and.w	r3, r3, #9
  401700:	2b01      	cmp	r3, #1
  401702:	d1b6      	bne.n	401672 <sd_mmc_check+0x3b2>
  401704:	e7ae      	b.n	401664 <sd_mmc_check+0x3a4>
  401706:	f003 0309 	and.w	r3, r3, #9
  40170a:	2b01      	cmp	r3, #1
  40170c:	d1ba      	bne.n	401684 <sd_mmc_check+0x3c4>
  40170e:	e7a9      	b.n	401664 <sd_mmc_check+0x3a4>

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  401710:	4b0e      	ldr	r3, [pc, #56]	; (40174c <sd_mmc_check+0x48c>)
  401712:	681b      	ldr	r3, [r3, #0]
  401714:	2200      	movs	r2, #0
  401716:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  401718:	4b0f      	ldr	r3, [pc, #60]	; (401758 <sd_mmc_check+0x498>)
  40171a:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  40171c:	2001      	movs	r0, #1
  40171e:	e007      	b.n	401730 <sd_mmc_check+0x470>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401720:	4b0a      	ldr	r3, [pc, #40]	; (40174c <sd_mmc_check+0x48c>)
  401722:	681b      	ldr	r3, [r3, #0]
  401724:	7bdb      	ldrb	r3, [r3, #15]
  401726:	f003 0309 	and.w	r3, r3, #9
  40172a:	2b01      	cmp	r3, #1
  40172c:	d09a      	beq.n	401664 <sd_mmc_check+0x3a4>
  40172e:	e7a9      	b.n	401684 <sd_mmc_check+0x3c4>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  401730:	b006      	add	sp, #24
  401732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401736:	bf00      	nop
  401738:	00401a69 	.word	0x00401a69
  40173c:	00081133 	.word	0x00081133
  401740:	004018e9 	.word	0x004018e9
  401744:	00401b01 	.word	0x00401b01
  401748:	00401b79 	.word	0x00401b79
  40174c:	20000efc 	.word	0x20000efc
  401750:	004011f9 	.word	0x004011f9
  401754:	004010cd 	.word	0x004010cd
  401758:	0040127d 	.word	0x0040127d
  40175c:	00401a81 	.word	0x00401a81

00401760 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
  401760:	b570      	push	{r4, r5, r6, lr}
  401762:	b082      	sub	sp, #8
	uint8_t line = 0xFF;
  401764:	ac02      	add	r4, sp, #8
  401766:	23ff      	movs	r3, #255	; 0xff
  401768:	f804 3d01 	strb.w	r3, [r4, #-1]!

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  40176c:	4e0f      	ldr	r6, [pc, #60]	; (4017ac <sd_mmc_spi_wait_busy+0x4c>)
  40176e:	2201      	movs	r2, #1
  401770:	4621      	mov	r1, r4
  401772:	4630      	mov	r0, r6
  401774:	4d0e      	ldr	r5, [pc, #56]	; (4017b0 <sd_mmc_spi_wait_busy+0x50>)
  401776:	47a8      	blx	r5
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401778:	2201      	movs	r2, #1
  40177a:	4621      	mov	r1, r4
  40177c:	4630      	mov	r0, r6
  40177e:	47a8      	blx	r5
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401780:	2201      	movs	r2, #1
  401782:	4621      	mov	r1, r4
  401784:	4630      	mov	r0, r6
  401786:	47a8      	blx	r5
  401788:	4c0a      	ldr	r4, [pc, #40]	; (4017b4 <sd_mmc_spi_wait_busy+0x54>)
  40178a:	e006      	b.n	40179a <sd_mmc_spi_wait_busy+0x3a>
  40178c:	2201      	movs	r2, #1
  40178e:	f10d 0107 	add.w	r1, sp, #7
  401792:	4630      	mov	r0, r6
  401794:	47a8      	blx	r5
		if (!(nec_timeout--)) {
  401796:	3c01      	subs	r4, #1
  401798:	d005      	beq.n	4017a6 <sd_mmc_spi_wait_busy+0x46>
			return false;
		}
	} while (line != 0xFF);
  40179a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40179e:	2bff      	cmp	r3, #255	; 0xff
  4017a0:	d1f4      	bne.n	40178c <sd_mmc_spi_wait_busy+0x2c>
	return true;
  4017a2:	2001      	movs	r0, #1
  4017a4:	e000      	b.n	4017a8 <sd_mmc_spi_wait_busy+0x48>
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
		if (!(nec_timeout--)) {
			return false;
  4017a6:	2000      	movs	r0, #0
		}
	} while (line != 0xFF);
	return true;
}
  4017a8:	b002      	add	sp, #8
  4017aa:	bd70      	pop	{r4, r5, r6, pc}
  4017ac:	40008000 	.word	0x40008000
  4017b0:	00401d35 	.word	0x00401d35
  4017b4:	00030d40 	.word	0x00030d40

004017b8 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
  4017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017ba:	b083      	sub	sp, #12
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
  4017bc:	ad02      	add	r5, sp, #8
  4017be:	2300      	movs	r3, #0
  4017c0:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4017c4:	4c10      	ldr	r4, [pc, #64]	; (401808 <sd_mmc_spi_start_read_block+0x50>)
		if (i-- == 0) {
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  4017c6:	4f11      	ldr	r7, [pc, #68]	; (40180c <sd_mmc_spi_start_read_block+0x54>)
  4017c8:	4e11      	ldr	r6, [pc, #68]	; (401810 <sd_mmc_spi_start_read_block+0x58>)
  4017ca:	e006      	b.n	4017da <sd_mmc_spi_start_read_block+0x22>
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
	i = 500000;
	do {
		if (i-- == 0) {
  4017cc:	3c01      	subs	r4, #1
  4017ce:	d104      	bne.n	4017da <sd_mmc_spi_start_read_block+0x22>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
  4017d0:	2204      	movs	r2, #4
  4017d2:	4b10      	ldr	r3, [pc, #64]	; (401814 <sd_mmc_spi_start_read_block+0x5c>)
  4017d4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
  4017d6:	2000      	movs	r0, #0
  4017d8:	e014      	b.n	401804 <sd_mmc_spi_start_read_block+0x4c>
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  4017da:	2201      	movs	r2, #1
  4017dc:	4629      	mov	r1, r5
  4017de:	4638      	mov	r0, r7
  4017e0:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
  4017e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4017e6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  4017ea:	d108      	bne.n	4017fe <sd_mmc_spi_start_read_block+0x46>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
  4017ec:	f013 0f07 	tst.w	r3, #7
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
  4017f0:	bf14      	ite	ne
  4017f2:	2207      	movne	r2, #7
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
  4017f4:	220b      	moveq	r2, #11
  4017f6:	4b07      	ldr	r3, [pc, #28]	; (401814 <sd_mmc_spi_start_read_block+0x5c>)
  4017f8:	701a      	strb	r2, [r3, #0]
			}
			return false;
  4017fa:	2000      	movs	r0, #0
  4017fc:	e002      	b.n	401804 <sd_mmc_spi_start_read_block+0x4c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
  4017fe:	2bfe      	cmp	r3, #254	; 0xfe
  401800:	d1e4      	bne.n	4017cc <sd_mmc_spi_start_read_block+0x14>

	return true;
  401802:	2001      	movs	r0, #1
}
  401804:	b003      	add	sp, #12
  401806:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401808:	0007a120 	.word	0x0007a120
  40180c:	40008000 	.word	0x40008000
  401810:	00401d35 	.word	0x00401d35
  401814:	20000f0a 	.word	0x20000f0a

00401818 <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401818:	2200      	movs	r2, #0
  40181a:	4b08      	ldr	r3, [pc, #32]	; (40183c <sd_mmc_spi_init+0x24>)
  40181c:	701a      	strb	r2, [r3, #0]
 *
 * \return 1 if the SPI is enabled, otherwise 0.
 */
static inline uint32_t spi_is_enabled(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  40181e:	4b08      	ldr	r3, [pc, #32]	; (401840 <sd_mmc_spi_init+0x28>)
  401820:	691b      	ldr	r3, [r3, #16]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  401822:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401826:	d107      	bne.n	401838 <sd_mmc_spi_init+0x20>
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
  401828:	b510      	push	{r4, lr}
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
		spi_master_init(SD_MMC_SPI);
  40182a:	4c05      	ldr	r4, [pc, #20]	; (401840 <sd_mmc_spi_init+0x28>)
  40182c:	4620      	mov	r0, r4
  40182e:	4b05      	ldr	r3, [pc, #20]	; (401844 <sd_mmc_spi_init+0x2c>)
  401830:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401832:	2301      	movs	r3, #1
  401834:	6023      	str	r3, [r4, #0]
  401836:	bd10      	pop	{r4, pc}
  401838:	4770      	bx	lr
  40183a:	bf00      	nop
  40183c:	20000f0a 	.word	0x20000f0a
  401840:	40008000 	.word	0x40008000
  401844:	00401be1 	.word	0x00401be1

00401848 <sd_mmc_spi_select_device>:
#endif
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
  401848:	b570      	push	{r4, r5, r6, lr}
  40184a:	b082      	sub	sp, #8
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40184c:	2200      	movs	r2, #0
  40184e:	4b09      	ldr	r3, [pc, #36]	; (401874 <sd_mmc_spi_select_device+0x2c>)
  401850:	701a      	strb	r2, [r3, #0]
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
  401852:	4c09      	ldr	r4, [pc, #36]	; (401878 <sd_mmc_spi_select_device+0x30>)
  401854:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  401858:	4d08      	ldr	r5, [pc, #32]	; (40187c <sd_mmc_spi_select_device+0x34>)
  40185a:	9200      	str	r2, [sp, #0]
  40185c:	460b      	mov	r3, r1
  40185e:	4621      	mov	r1, r4
  401860:	4628      	mov	r0, r5
  401862:	4e07      	ldr	r6, [pc, #28]	; (401880 <sd_mmc_spi_select_device+0x38>)
  401864:	47b0      	blx	r6
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  401866:	4621      	mov	r1, r4
  401868:	4628      	mov	r0, r5
  40186a:	4b06      	ldr	r3, [pc, #24]	; (401884 <sd_mmc_spi_select_device+0x3c>)
  40186c:	4798      	blx	r3
}
  40186e:	b002      	add	sp, #8
  401870:	bd70      	pop	{r4, r5, r6, pc}
  401872:	bf00      	nop
  401874:	20000f0a 	.word	0x20000f0a
  401878:	2000044c 	.word	0x2000044c
  40187c:	40008000 	.word	0x40008000
  401880:	00401c35 	.word	0x00401c35
  401884:	00401cb5 	.word	0x00401cb5

00401888 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
  401888:	b508      	push	{r3, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40188a:	2200      	movs	r2, #0
  40188c:	4b04      	ldr	r3, [pc, #16]	; (4018a0 <sd_mmc_spi_deselect_device+0x18>)
  40188e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  401890:	4904      	ldr	r1, [pc, #16]	; (4018a4 <sd_mmc_spi_deselect_device+0x1c>)
  401892:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  401896:	4804      	ldr	r0, [pc, #16]	; (4018a8 <sd_mmc_spi_deselect_device+0x20>)
  401898:	4b04      	ldr	r3, [pc, #16]	; (4018ac <sd_mmc_spi_deselect_device+0x24>)
  40189a:	4798      	blx	r3
  40189c:	bd08      	pop	{r3, pc}
  40189e:	bf00      	nop
  4018a0:	20000f0a 	.word	0x20000f0a
  4018a4:	2000044c 	.word	0x2000044c
  4018a8:	40008000 	.word	0x40008000
  4018ac:	00401ce1 	.word	0x00401ce1

004018b0 <sd_mmc_spi_send_clock>:
}

void sd_mmc_spi_send_clock(void)
{
  4018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4018b2:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
  4018b4:	ad02      	add	r5, sp, #8
  4018b6:	23ff      	movs	r3, #255	; 0xff
  4018b8:	f805 3d01 	strb.w	r3, [r5, #-1]!

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4018bc:	2200      	movs	r2, #0
  4018be:	4b07      	ldr	r3, [pc, #28]	; (4018dc <sd_mmc_spi_send_clock+0x2c>)
  4018c0:	701a      	strb	r2, [r3, #0]
  4018c2:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
  4018c4:	4f06      	ldr	r7, [pc, #24]	; (4018e0 <sd_mmc_spi_send_clock+0x30>)
  4018c6:	4e07      	ldr	r6, [pc, #28]	; (4018e4 <sd_mmc_spi_send_clock+0x34>)
  4018c8:	2201      	movs	r2, #1
  4018ca:	4629      	mov	r1, r5
  4018cc:	4638      	mov	r0, r7
  4018ce:	47b0      	blx	r6
  4018d0:	1e63      	subs	r3, r4, #1
	uint8_t i;
	uint8_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
  4018d2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4018d6:	d1f7      	bne.n	4018c8 <sd_mmc_spi_send_clock+0x18>
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
	}
}
  4018d8:	b003      	add	sp, #12
  4018da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018dc:	20000f0a 	.word	0x20000f0a
  4018e0:	40008000 	.word	0x40008000
  4018e4:	00401d01 	.word	0x00401d01

004018e8 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4018e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018ec:	b085      	sub	sp, #20
  4018ee:	4604      	mov	r4, r0
  4018f0:	4691      	mov	r9, r2
  4018f2:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
  4018f4:	23ff      	movs	r3, #255	; 0xff
  4018f6:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4018fa:	2300      	movs	r3, #0
  4018fc:	4a51      	ldr	r2, [pc, #324]	; (401a44 <sd_mmc_spi_adtc_start+0x15c>)
  4018fe:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
  401900:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  401904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  401908:	f88d 2008 	strb.w	r2, [sp, #8]
	cmd_token[1] = arg >> 24;
  40190c:	0e0a      	lsrs	r2, r1, #24
  40190e:	f88d 2009 	strb.w	r2, [sp, #9]
	cmd_token[2] = arg >> 16;
  401912:	0c0a      	lsrs	r2, r1, #16
  401914:	f88d 200a 	strb.w	r2, [sp, #10]
	cmd_token[3] = arg >> 8;
  401918:	0a0a      	lsrs	r2, r1, #8
  40191a:	f88d 200b 	strb.w	r2, [sp, #11]
	cmd_token[4] = arg;
  40191e:	f88d 100c 	strb.w	r1, [sp, #12]
  401922:	af02      	add	r7, sp, #8
{
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
		value = *buf++;
  401924:	f04f 0c08 	mov.w	ip, #8
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
  401928:	f10d 0e0d 	add.w	lr, sp, #13
		value = *buf++;
  40192c:	f817 1b01 	ldrb.w	r1, [r7], #1
  401930:	4662      	mov	r2, ip
		for (i = 0; i < 8; i++) {
			crc <<= 1;
  401932:	005b      	lsls	r3, r3, #1
  401934:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
  401936:	ea83 0001 	eor.w	r0, r3, r1
  40193a:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc ^= 0x09;
  40193e:	bf18      	it	ne
  401940:	f083 0309 	eorne.w	r3, r3, #9
			}
			value <<= 1;
  401944:	0049      	lsls	r1, r1, #1
  401946:	b2c9      	uxtb	r1, r1
  401948:	3a01      	subs	r2, #1
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
		value = *buf++;
		for (i = 0; i < 8; i++) {
  40194a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40194e:	d1f0      	bne.n	401932 <sd_mmc_spi_adtc_start+0x4a>
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
  401950:	4577      	cmp	r7, lr
  401952:	d1eb      	bne.n	40192c <sd_mmc_spi_adtc_start+0x44>
				crc ^= 0x09;
			}
			value <<= 1;
		}
	}
	crc = (crc << 1) | 1;
  401954:	005b      	lsls	r3, r3, #1
  401956:	f043 0301 	orr.w	r3, r3, #1
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
	cmd_token[1] = arg >> 24;
	cmd_token[2] = arg >> 16;
	cmd_token[3] = arg >> 8;
	cmd_token[4] = arg;
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
  40195a:	f88d 300d 	strb.w	r3, [sp, #13]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  40195e:	4f3a      	ldr	r7, [pc, #232]	; (401a48 <sd_mmc_spi_adtc_start+0x160>)
  401960:	2201      	movs	r2, #1
  401962:	f10d 010f 	add.w	r1, sp, #15
  401966:	4638      	mov	r0, r7
  401968:	4d38      	ldr	r5, [pc, #224]	; (401a4c <sd_mmc_spi_adtc_start+0x164>)
  40196a:	47a8      	blx	r5
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
  40196c:	2206      	movs	r2, #6
  40196e:	a902      	add	r1, sp, #8
  401970:	4638      	mov	r0, r7
  401972:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
  401974:	a904      	add	r1, sp, #16
  401976:	23ff      	movs	r3, #255	; 0xff
  401978:	f801 3d09 	strb.w	r3, [r1, #-9]!
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
  40197c:	2201      	movs	r2, #1
  40197e:	4638      	mov	r0, r7
  401980:	4b33      	ldr	r3, [pc, #204]	; (401a50 <sd_mmc_spi_adtc_start+0x168>)
  401982:	4798      	blx	r3
  401984:	2707      	movs	r7, #7
	ncr_timeout = 7;
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
  401986:	4e30      	ldr	r6, [pc, #192]	; (401a48 <sd_mmc_spi_adtc_start+0x160>)
  401988:	4d31      	ldr	r5, [pc, #196]	; (401a50 <sd_mmc_spi_adtc_start+0x168>)
  40198a:	2201      	movs	r2, #1
  40198c:	f10d 0107 	add.w	r1, sp, #7
  401990:	4630      	mov	r0, r6
  401992:	47a8      	blx	r5
		if ((r1 & R1_SPI_ERROR) == 0) {
  401994:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401998:	f013 0f80 	tst.w	r3, #128	; 0x80
  40199c:	d008      	beq.n	4019b0 <sd_mmc_spi_adtc_start+0xc8>
  40199e:	1e7b      	subs	r3, r7, #1
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
  4019a0:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4019a4:	d1f1      	bne.n	40198a <sd_mmc_spi_adtc_start+0xa2>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
  4019a6:	2202      	movs	r2, #2
  4019a8:	4b26      	ldr	r3, [pc, #152]	; (401a44 <sd_mmc_spi_adtc_start+0x15c>)
  4019aa:	701a      	strb	r2, [r3, #0]
			return false;
  4019ac:	2300      	movs	r3, #0
  4019ae:	e044      	b.n	401a3a <sd_mmc_spi_adtc_start+0x152>
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
  4019b0:	4a28      	ldr	r2, [pc, #160]	; (401a54 <sd_mmc_spi_adtc_start+0x16c>)
  4019b2:	6013      	str	r3, [r2, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
  4019b4:	f013 0f08 	tst.w	r3, #8
  4019b8:	d004      	beq.n	4019c4 <sd_mmc_spi_adtc_start+0xdc>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
  4019ba:	2206      	movs	r2, #6
  4019bc:	4b21      	ldr	r3, [pc, #132]	; (401a44 <sd_mmc_spi_adtc_start+0x15c>)
  4019be:	701a      	strb	r2, [r3, #0]
		return false;
  4019c0:	2300      	movs	r3, #0
  4019c2:	e03a      	b.n	401a3a <sd_mmc_spi_adtc_start+0x152>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
  4019c4:	f013 0f04 	tst.w	r3, #4
  4019c8:	d004      	beq.n	4019d4 <sd_mmc_spi_adtc_start+0xec>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
  4019ca:	2209      	movs	r2, #9
  4019cc:	4b1d      	ldr	r3, [pc, #116]	; (401a44 <sd_mmc_spi_adtc_start+0x15c>)
  4019ce:	701a      	strb	r2, [r3, #0]
		return false;
  4019d0:	2300      	movs	r3, #0
  4019d2:	e032      	b.n	401a3a <sd_mmc_spi_adtc_start+0x152>
	}
	if (r1 & ~R1_SPI_IDLE) {
  4019d4:	f033 0301 	bics.w	r3, r3, #1
  4019d8:	d004      	beq.n	4019e4 <sd_mmc_spi_adtc_start+0xfc>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  4019da:	2201      	movs	r2, #1
  4019dc:	4b19      	ldr	r3, [pc, #100]	; (401a44 <sd_mmc_spi_adtc_start+0x15c>)
  4019de:	701a      	strb	r2, [r3, #0]
		return false;
  4019e0:	2300      	movs	r3, #0
  4019e2:	e02a      	b.n	401a3a <sd_mmc_spi_adtc_start+0x152>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
  4019e4:	f414 5f00 	tst.w	r4, #8192	; 0x2000
  4019e8:	d007      	beq.n	4019fa <sd_mmc_spi_adtc_start+0x112>
		if (!sd_mmc_spi_wait_busy()) {
  4019ea:	4b1b      	ldr	r3, [pc, #108]	; (401a58 <sd_mmc_spi_adtc_start+0x170>)
  4019ec:	4798      	blx	r3
  4019ee:	4603      	mov	r3, r0
  4019f0:	b918      	cbnz	r0, 4019fa <sd_mmc_spi_adtc_start+0x112>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
  4019f2:	2103      	movs	r1, #3
  4019f4:	4a13      	ldr	r2, [pc, #76]	; (401a44 <sd_mmc_spi_adtc_start+0x15c>)
  4019f6:	7011      	strb	r1, [r2, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
  4019f8:	e01f      	b.n	401a3a <sd_mmc_spi_adtc_start+0x152>
		}
	}
	if (cmd & SDMMC_RESP_8) {
  4019fa:	f414 7f00 	tst.w	r4, #512	; 0x200
  4019fe:	d006      	beq.n	401a0e <sd_mmc_spi_adtc_start+0x126>
		sd_mmc_spi_response_32 = 0;
  401a00:	4914      	ldr	r1, [pc, #80]	; (401a54 <sd_mmc_spi_adtc_start+0x16c>)
  401a02:	2300      	movs	r3, #0
  401a04:	600b      	str	r3, [r1, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
  401a06:	2201      	movs	r2, #1
  401a08:	480f      	ldr	r0, [pc, #60]	; (401a48 <sd_mmc_spi_adtc_start+0x160>)
  401a0a:	4b11      	ldr	r3, [pc, #68]	; (401a50 <sd_mmc_spi_adtc_start+0x168>)
  401a0c:	4798      	blx	r3
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
	}
	if (cmd & SDMMC_RESP_32) {
  401a0e:	f414 6f80 	tst.w	r4, #1024	; 0x400
  401a12:	d008      	beq.n	401a26 <sd_mmc_spi_adtc_start+0x13e>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
  401a14:	4c0f      	ldr	r4, [pc, #60]	; (401a54 <sd_mmc_spi_adtc_start+0x16c>)
  401a16:	2204      	movs	r2, #4
  401a18:	4621      	mov	r1, r4
  401a1a:	480b      	ldr	r0, [pc, #44]	; (401a48 <sd_mmc_spi_adtc_start+0x160>)
  401a1c:	4b0c      	ldr	r3, [pc, #48]	; (401a50 <sd_mmc_spi_adtc_start+0x168>)
  401a1e:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
  401a20:	6823      	ldr	r3, [r4, #0]
  401a22:	ba1b      	rev	r3, r3
  401a24:	6023      	str	r3, [r4, #0]
	}

	sd_mmc_spi_block_size = block_size;
  401a26:	4b0d      	ldr	r3, [pc, #52]	; (401a5c <sd_mmc_spi_adtc_start+0x174>)
  401a28:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_spi_nb_block = nb_block;
  401a2c:	4b0c      	ldr	r3, [pc, #48]	; (401a60 <sd_mmc_spi_adtc_start+0x178>)
  401a2e:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_spi_transfert_pos = 0;
  401a32:	2200      	movs	r2, #0
  401a34:	4b0b      	ldr	r3, [pc, #44]	; (401a64 <sd_mmc_spi_adtc_start+0x17c>)
  401a36:	601a      	str	r2, [r3, #0]
	return true; // Command complete
  401a38:	2301      	movs	r3, #1
}
  401a3a:	4618      	mov	r0, r3
  401a3c:	b005      	add	sp, #20
  401a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a42:	bf00      	nop
  401a44:	20000f0a 	.word	0x20000f0a
  401a48:	40008000 	.word	0x40008000
  401a4c:	00401d01 	.word	0x00401d01
  401a50:	00401d35 	.word	0x00401d35
  401a54:	20000f0c 	.word	0x20000f0c
  401a58:	00401761 	.word	0x00401761
  401a5c:	20000f08 	.word	0x20000f08
  401a60:	20000f02 	.word	0x20000f02
  401a64:	20000f04 	.word	0x20000f04

00401a68 <sd_mmc_spi_send_cmd>:
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
	}
}

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401a68:	b510      	push	{r4, lr}
  401a6a:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
  401a6c:	2200      	movs	r2, #0
  401a6e:	9200      	str	r2, [sp, #0]
  401a70:	4613      	mov	r3, r2
  401a72:	4c02      	ldr	r4, [pc, #8]	; (401a7c <sd_mmc_spi_send_cmd+0x14>)
  401a74:	47a0      	blx	r4
}
  401a76:	b002      	add	sp, #8
  401a78:	bd10      	pop	{r4, pc}
  401a7a:	bf00      	nop
  401a7c:	004018e9 	.word	0x004018e9

00401a80 <sd_mmc_spi_get_response>:
}

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
}
  401a80:	4b01      	ldr	r3, [pc, #4]	; (401a88 <sd_mmc_spi_get_response+0x8>)
  401a82:	6818      	ldr	r0, [r3, #0]
  401a84:	4770      	bx	lr
  401a86:	bf00      	nop
  401a88:	20000f0c 	.word	0x20000f0c

00401a8c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
  401a8c:	b510      	push	{r4, lr}
  401a8e:	b082      	sub	sp, #8
  401a90:	4604      	mov	r4, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401a92:	2200      	movs	r2, #0
  401a94:	4b14      	ldr	r3, [pc, #80]	; (401ae8 <sd_mmc_spi_read_word+0x5c>)
  401a96:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  401a98:	4b14      	ldr	r3, [pc, #80]	; (401aec <sd_mmc_spi_read_word+0x60>)
  401a9a:	881b      	ldrh	r3, [r3, #0]
  401a9c:	4a14      	ldr	r2, [pc, #80]	; (401af0 <sd_mmc_spi_read_word+0x64>)
  401a9e:	6811      	ldr	r1, [r2, #0]
  401aa0:	fbb1 f2f3 	udiv	r2, r1, r3
  401aa4:	fb03 1312 	mls	r3, r3, r2, r1
  401aa8:	b91b      	cbnz	r3, 401ab2 <sd_mmc_spi_read_word+0x26>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
  401aaa:	4b12      	ldr	r3, [pc, #72]	; (401af4 <sd_mmc_spi_read_word+0x68>)
  401aac:	4798      	blx	r3
  401aae:	4603      	mov	r3, r0
  401ab0:	b1b8      	cbz	r0, 401ae2 <sd_mmc_spi_read_word+0x56>
			return false;
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
  401ab2:	2204      	movs	r2, #4
  401ab4:	4621      	mov	r1, r4
  401ab6:	4810      	ldr	r0, [pc, #64]	; (401af8 <sd_mmc_spi_read_word+0x6c>)
  401ab8:	4b10      	ldr	r3, [pc, #64]	; (401afc <sd_mmc_spi_read_word+0x70>)
  401aba:	4798      	blx	r3
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
  401abc:	4a0c      	ldr	r2, [pc, #48]	; (401af0 <sd_mmc_spi_read_word+0x64>)
  401abe:	6813      	ldr	r3, [r2, #0]
  401ac0:	3304      	adds	r3, #4
  401ac2:	6013      	str	r3, [r2, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  401ac4:	4a09      	ldr	r2, [pc, #36]	; (401aec <sd_mmc_spi_read_word+0x60>)
  401ac6:	8811      	ldrh	r1, [r2, #0]
  401ac8:	fbb3 f2f1 	udiv	r2, r3, r1
  401acc:	fb01 3312 	mls	r3, r1, r2, r3
  401ad0:	b933      	cbnz	r3, 401ae0 <sd_mmc_spi_read_word+0x54>
 */
static void sd_mmc_spi_stop_read_block(void)
{
	uint8_t crc[2];
	// Read 16-bit CRC (not cheked)
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  401ad2:	2202      	movs	r2, #2
  401ad4:	a901      	add	r1, sp, #4
  401ad6:	4808      	ldr	r0, [pc, #32]	; (401af8 <sd_mmc_spi_read_word+0x6c>)
  401ad8:	4b08      	ldr	r3, [pc, #32]	; (401afc <sd_mmc_spi_read_word+0x70>)
  401ada:	4798      	blx	r3

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
  401adc:	2301      	movs	r3, #1
  401ade:	e000      	b.n	401ae2 <sd_mmc_spi_read_word+0x56>
  401ae0:	2301      	movs	r3, #1
}
  401ae2:	4618      	mov	r0, r3
  401ae4:	b002      	add	sp, #8
  401ae6:	bd10      	pop	{r4, pc}
  401ae8:	20000f0a 	.word	0x20000f0a
  401aec:	20000f08 	.word	0x20000f08
  401af0:	20000f04 	.word	0x20000f04
  401af4:	004017b9 	.word	0x004017b9
  401af8:	40008000 	.word	0x40008000
  401afc:	00401d35 	.word	0x00401d35

00401b00 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
  401b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b04:	b083      	sub	sp, #12
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401b06:	2200      	movs	r2, #0
  401b08:	4b15      	ldr	r3, [pc, #84]	; (401b60 <sd_mmc_spi_start_read_blocks+0x60>)
  401b0a:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
  401b0c:	b309      	cbz	r1, 401b52 <sd_mmc_spi_start_read_blocks+0x52>
  401b0e:	460c      	mov	r4, r1
  401b10:	4681      	mov	r9, r0
  401b12:	4615      	mov	r5, r2
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  401b14:	f8df b058 	ldr.w	fp, [pc, #88]	; 401b70 <sd_mmc_spi_start_read_blocks+0x70>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  401b18:	f8df 8058 	ldr.w	r8, [pc, #88]	; 401b74 <sd_mmc_spi_start_read_blocks+0x74>
  401b1c:	4f11      	ldr	r7, [pc, #68]	; (401b64 <sd_mmc_spi_start_read_blocks+0x64>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  401b1e:	47d8      	blx	fp
  401b20:	4682      	mov	sl, r0
  401b22:	b1c0      	cbz	r0, 401b56 <sd_mmc_spi_start_read_blocks+0x56>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  401b24:	f8b8 2000 	ldrh.w	r2, [r8]
  401b28:	eb09 0105 	add.w	r1, r9, r5
  401b2c:	4638      	mov	r0, r7
  401b2e:	4e0e      	ldr	r6, [pc, #56]	; (401b68 <sd_mmc_spi_start_read_blocks+0x68>)
  401b30:	47b0      	blx	r6
		pos += sd_mmc_spi_block_size;
  401b32:	f8b8 3000 	ldrh.w	r3, [r8]
  401b36:	441d      	add	r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  401b38:	4a0c      	ldr	r2, [pc, #48]	; (401b6c <sd_mmc_spi_start_read_blocks+0x6c>)
  401b3a:	6811      	ldr	r1, [r2, #0]
  401b3c:	440b      	add	r3, r1
  401b3e:	6013      	str	r3, [r2, #0]
 */
static void sd_mmc_spi_stop_read_block(void)
{
	uint8_t crc[2];
	// Read 16-bit CRC (not cheked)
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  401b40:	2202      	movs	r2, #2
  401b42:	a901      	add	r1, sp, #4
  401b44:	4638      	mov	r0, r7
  401b46:	47b0      	blx	r6
  401b48:	3c01      	subs	r4, #1
  401b4a:	b2a4      	uxth	r4, r4
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
  401b4c:	2c00      	cmp	r4, #0
  401b4e:	d1e6      	bne.n	401b1e <sd_mmc_spi_start_read_blocks+0x1e>
  401b50:	e001      	b.n	401b56 <sd_mmc_spi_start_read_blocks+0x56>
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;

		sd_mmc_spi_stop_read_block();
	}
	return true;
  401b52:	f04f 0a01 	mov.w	sl, #1
}
  401b56:	4650      	mov	r0, sl
  401b58:	b003      	add	sp, #12
  401b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b5e:	bf00      	nop
  401b60:	20000f0a 	.word	0x20000f0a
  401b64:	40008000 	.word	0x40008000
  401b68:	00401d35 	.word	0x00401d35
  401b6c:	20000f04 	.word	0x20000f04
  401b70:	004017b9 	.word	0x004017b9
  401b74:	20000f08 	.word	0x20000f08

00401b78 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
  401b78:	2001      	movs	r0, #1
  401b7a:	4770      	bx	lr

00401b7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401b7c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401b7e:	480e      	ldr	r0, [pc, #56]	; (401bb8 <sysclk_init+0x3c>)
  401b80:	4b0e      	ldr	r3, [pc, #56]	; (401bbc <sysclk_init+0x40>)
  401b82:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401b84:	213e      	movs	r1, #62	; 0x3e
  401b86:	2000      	movs	r0, #0
  401b88:	4b0d      	ldr	r3, [pc, #52]	; (401bc0 <sysclk_init+0x44>)
  401b8a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401b8c:	4c0d      	ldr	r4, [pc, #52]	; (401bc4 <sysclk_init+0x48>)
  401b8e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401b90:	2800      	cmp	r0, #0
  401b92:	d0fc      	beq.n	401b8e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401b94:	4b0c      	ldr	r3, [pc, #48]	; (401bc8 <sysclk_init+0x4c>)
  401b96:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401b98:	4a0c      	ldr	r2, [pc, #48]	; (401bcc <sysclk_init+0x50>)
  401b9a:	4b0d      	ldr	r3, [pc, #52]	; (401bd0 <sysclk_init+0x54>)
  401b9c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  401b9e:	4c0d      	ldr	r4, [pc, #52]	; (401bd4 <sysclk_init+0x58>)
  401ba0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401ba2:	2800      	cmp	r0, #0
  401ba4:	d0fc      	beq.n	401ba0 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401ba6:	2010      	movs	r0, #16
  401ba8:	4b0b      	ldr	r3, [pc, #44]	; (401bd8 <sysclk_init+0x5c>)
  401baa:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401bac:	4b0b      	ldr	r3, [pc, #44]	; (401bdc <sysclk_init+0x60>)
  401bae:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401bb0:	4801      	ldr	r0, [pc, #4]	; (401bb8 <sysclk_init+0x3c>)
  401bb2:	4b02      	ldr	r3, [pc, #8]	; (401bbc <sysclk_init+0x40>)
  401bb4:	4798      	blx	r3
  401bb6:	bd10      	pop	{r4, pc}
  401bb8:	07270e00 	.word	0x07270e00
  401bbc:	00402ec5 	.word	0x00402ec5
  401bc0:	00402531 	.word	0x00402531
  401bc4:	00402585 	.word	0x00402585
  401bc8:	00402595 	.word	0x00402595
  401bcc:	20133f01 	.word	0x20133f01
  401bd0:	400e0400 	.word	0x400e0400
  401bd4:	004025a5 	.word	0x004025a5
  401bd8:	00402485 	.word	0x00402485
  401bdc:	00402db1 	.word	0x00402db1

00401be0 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  401be0:	b510      	push	{r4, lr}
  401be2:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  401be4:	4b10      	ldr	r3, [pc, #64]	; (401c28 <spi_master_init+0x48>)
  401be6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  401be8:	2380      	movs	r3, #128	; 0x80
  401bea:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401bec:	6863      	ldr	r3, [r4, #4]
  401bee:	f043 0301 	orr.w	r3, r3, #1
  401bf2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401bf4:	6863      	ldr	r3, [r4, #4]
  401bf6:	f043 0310 	orr.w	r3, r3, #16
  401bfa:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  401bfc:	6863      	ldr	r3, [r4, #4]
  401bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401c02:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  401c04:	2100      	movs	r1, #0
  401c06:	4620      	mov	r0, r4
  401c08:	4b08      	ldr	r3, [pc, #32]	; (401c2c <spi_master_init+0x4c>)
  401c0a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401c0c:	6863      	ldr	r3, [r4, #4]
  401c0e:	f023 0302 	bic.w	r3, r3, #2
  401c12:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  401c14:	6863      	ldr	r3, [r4, #4]
  401c16:	f023 0304 	bic.w	r3, r3, #4
  401c1a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  401c1c:	2100      	movs	r1, #0
  401c1e:	4620      	mov	r0, r4
  401c20:	4b03      	ldr	r3, [pc, #12]	; (401c30 <spi_master_init+0x50>)
  401c22:	4798      	blx	r3
  401c24:	bd10      	pop	{r4, pc}
  401c26:	bf00      	nop
  401c28:	0040283d 	.word	0x0040283d
  401c2c:	0040284d 	.word	0x0040284d
  401c30:	00402865 	.word	0x00402865

00401c34 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  401c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c38:	4604      	mov	r4, r0
  401c3a:	460d      	mov	r5, r1
  401c3c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  401c3e:	4915      	ldr	r1, [pc, #84]	; (401c94 <spi_master_setup_device+0x60>)
  401c40:	4618      	mov	r0, r3
  401c42:	4b15      	ldr	r3, [pc, #84]	; (401c98 <spi_master_setup_device+0x64>)
  401c44:	4798      	blx	r3
  401c46:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  401c48:	2300      	movs	r3, #0
  401c4a:	461a      	mov	r2, r3
  401c4c:	6829      	ldr	r1, [r5, #0]
  401c4e:	4620      	mov	r0, r4
  401c50:	f8df 805c 	ldr.w	r8, [pc, #92]	; 401cb0 <spi_master_setup_device+0x7c>
  401c54:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  401c56:	2208      	movs	r2, #8
  401c58:	6829      	ldr	r1, [r5, #0]
  401c5a:	4620      	mov	r0, r4
  401c5c:	4b0f      	ldr	r3, [pc, #60]	; (401c9c <spi_master_setup_device+0x68>)
  401c5e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  401c60:	b2fa      	uxtb	r2, r7
  401c62:	6829      	ldr	r1, [r5, #0]
  401c64:	4620      	mov	r0, r4
  401c66:	4b0e      	ldr	r3, [pc, #56]	; (401ca0 <spi_master_setup_device+0x6c>)
  401c68:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  401c6a:	2208      	movs	r2, #8
  401c6c:	6829      	ldr	r1, [r5, #0]
  401c6e:	4620      	mov	r0, r4
  401c70:	4b0c      	ldr	r3, [pc, #48]	; (401ca4 <spi_master_setup_device+0x70>)
  401c72:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  401c74:	0872      	lsrs	r2, r6, #1
  401c76:	6829      	ldr	r1, [r5, #0]
  401c78:	4620      	mov	r0, r4
  401c7a:	4b0b      	ldr	r3, [pc, #44]	; (401ca8 <spi_master_setup_device+0x74>)
  401c7c:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  401c7e:	f086 0201 	eor.w	r2, r6, #1
  401c82:	f002 0201 	and.w	r2, r2, #1
  401c86:	6829      	ldr	r1, [r5, #0]
  401c88:	4620      	mov	r0, r4
  401c8a:	4b08      	ldr	r3, [pc, #32]	; (401cac <spi_master_setup_device+0x78>)
  401c8c:	4798      	blx	r3
  401c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c92:	bf00      	nop
  401c94:	07270e00 	.word	0x07270e00
  401c98:	00402911 	.word	0x00402911
  401c9c:	004028fd 	.word	0x004028fd
  401ca0:	00402929 	.word	0x00402929
  401ca4:	004028b9 	.word	0x004028b9
  401ca8:	00402879 	.word	0x00402879
  401cac:	00402899 	.word	0x00402899
  401cb0:	00402951 	.word	0x00402951

00401cb4 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  401cb4:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  401cb6:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  401cb8:	f013 0f04 	tst.w	r3, #4
  401cbc:	d005      	beq.n	401cca <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  401cbe:	6809      	ldr	r1, [r1, #0]
  401cc0:	290f      	cmp	r1, #15
  401cc2:	d80a      	bhi.n	401cda <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  401cc4:	4b05      	ldr	r3, [pc, #20]	; (401cdc <spi_select_device+0x28>)
  401cc6:	4798      	blx	r3
  401cc8:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  401cca:	680b      	ldr	r3, [r1, #0]
  401ccc:	2b03      	cmp	r3, #3
  401cce:	d804      	bhi.n	401cda <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  401cd0:	2101      	movs	r1, #1
  401cd2:	4099      	lsls	r1, r3
  401cd4:	43c9      	mvns	r1, r1
  401cd6:	4b01      	ldr	r3, [pc, #4]	; (401cdc <spi_select_device+0x28>)
  401cd8:	4798      	blx	r3
  401cda:	bd08      	pop	{r3, pc}
  401cdc:	0040284d 	.word	0x0040284d

00401ce0 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  401ce0:	b510      	push	{r4, lr}
  401ce2:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401ce4:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  401ce6:	f413 7f00 	tst.w	r3, #512	; 0x200
  401cea:	d0fb      	beq.n	401ce4 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  401cec:	210f      	movs	r1, #15
  401cee:	4620      	mov	r0, r4
  401cf0:	4b02      	ldr	r3, [pc, #8]	; (401cfc <spi_deselect_device+0x1c>)
  401cf2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  401cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401cf8:	6023      	str	r3, [r4, #0]
  401cfa:	bd10      	pop	{r4, pc}
  401cfc:	0040284d 	.word	0x0040284d

00401d00 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  401d00:	b922      	cbnz	r2, 401d0c <spi_write_packet+0xc>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  401d02:	2000      	movs	r0, #0
}
  401d04:	4770      	bx	lr
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  401d06:	3b01      	subs	r3, #1
  401d08:	d105      	bne.n	401d16 <spi_write_packet+0x16>
  401d0a:	e00f      	b.n	401d2c <spi_write_packet+0x2c>
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  401d0c:	b410      	push	{r4}
  401d0e:	4614      	mov	r4, r2
  401d10:	3901      	subs	r1, #1
  401d12:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  401d16:	6902      	ldr	r2, [r0, #16]
	uint32_t i = 0;
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  401d18:	f012 0f02 	tst.w	r2, #2
  401d1c:	d0f3      	beq.n	401d06 <spi_write_packet+0x6>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401d1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  401d22:	60c3      	str	r3, [r0, #12]
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  401d24:	3c01      	subs	r4, #1
  401d26:	d1f4      	bne.n	401d12 <spi_write_packet+0x12>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  401d28:	2000      	movs	r0, #0
  401d2a:	e001      	b.n	401d30 <spi_write_packet+0x30>

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  401d2c:	f06f 0002 	mvn.w	r0, #2
		i++;
		len--;
	}

	return STATUS_OK;
}
  401d30:	bc10      	pop	{r4}
  401d32:	4770      	bx	lr

00401d34 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  401d34:	b922      	cbnz	r2, 401d40 <spi_read_packet+0xc>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  401d36:	2000      	movs	r0, #0
}
  401d38:	4770      	bx	lr
	uint32_t i = 0;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  401d3a:	3b01      	subs	r3, #1
  401d3c:	d108      	bne.n	401d50 <spi_read_packet+0x1c>
  401d3e:	e01c      	b.n	401d7a <spi_read_packet+0x46>
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  401d40:	b470      	push	{r4, r5, r6}
  401d42:	4615      	mov	r5, r2
  401d44:	3901      	subs	r1, #1
  401d46:	26ff      	movs	r6, #255	; 0xff
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  401d48:	f240 2401 	movw	r4, #513	; 0x201
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  401d4c:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  401d50:	6902      	ldr	r2, [r0, #16]
	uint8_t val;
	uint32_t i = 0;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  401d52:	f012 0f02 	tst.w	r2, #2
  401d56:	d0f0      	beq.n	401d3a <spi_read_packet+0x6>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401d58:	60c6      	str	r6, [r0, #12]
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  401d5a:	f643 2399 	movw	r3, #15001	; 0x3a99
  401d5e:	e001      	b.n	401d64 <spi_read_packet+0x30>
			if (!timeout--) {
  401d60:	3b01      	subs	r3, #1
  401d62:	d00d      	beq.n	401d80 <spi_read_packet+0x4c>
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  401d64:	6902      	ldr	r2, [r0, #16]
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  401d66:	ea34 0202 	bics.w	r2, r4, r2
  401d6a:	d1f9      	bne.n	401d60 <spi_read_packet+0x2c>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  401d6c:	6883      	ldr	r3, [r0, #8]
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(p_spi, &val);

		data[i] = val;
  401d6e:	f801 3f01 	strb.w	r3, [r1, #1]!
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  401d72:	3d01      	subs	r5, #1
  401d74:	d1ea      	bne.n	401d4c <spi_read_packet+0x18>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  401d76:	2000      	movs	r0, #0
  401d78:	e004      	b.n	401d84 <spi_read_packet+0x50>

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  401d7a:	f06f 0002 	mvn.w	r0, #2
  401d7e:	e001      	b.n	401d84 <spi_read_packet+0x50>
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  401d80:	f06f 0002 	mvn.w	r0, #2
		i++;
		len--;
	}

	return STATUS_OK;
}
  401d84:	bc70      	pop	{r4, r5, r6}
  401d86:	4770      	bx	lr

00401d88 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  401d8a:	4838      	ldr	r0, [pc, #224]	; (401e6c <board_init+0xe4>)
  401d8c:	4b38      	ldr	r3, [pc, #224]	; (401e70 <board_init+0xe8>)
  401d8e:	4798      	blx	r3
  401d90:	200b      	movs	r0, #11
  401d92:	4c38      	ldr	r4, [pc, #224]	; (401e74 <board_init+0xec>)
  401d94:	47a0      	blx	r4
  401d96:	200c      	movs	r0, #12
  401d98:	47a0      	blx	r4
  401d9a:	200d      	movs	r0, #13
  401d9c:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d9e:	4b36      	ldr	r3, [pc, #216]	; (401e78 <board_init+0xf0>)
  401da0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401da4:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401da6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401da8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401dac:	4c33      	ldr	r4, [pc, #204]	; (401e7c <board_init+0xf4>)
  401dae:	2504      	movs	r5, #4
  401db0:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401db2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401db6:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401db8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401dbc:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401dbe:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401dc0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401dc4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401dc6:	f022 0204 	bic.w	r2, r2, #4
  401dca:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401dcc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  401dce:	f022 0204 	bic.w	r2, r2, #4
  401dd2:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401dd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401dd8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401dda:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ddc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401de0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401de4:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401de6:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401de8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401dec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401df0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401df2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401df4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401df8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401dfc:	210c      	movs	r1, #12
  401dfe:	4820      	ldr	r0, [pc, #128]	; (401e80 <board_init+0xf8>)
  401e00:	4b20      	ldr	r3, [pc, #128]	; (401e84 <board_init+0xfc>)
  401e02:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401e04:	4f20      	ldr	r7, [pc, #128]	; (401e88 <board_init+0x100>)
  401e06:	4639      	mov	r1, r7
  401e08:	2003      	movs	r0, #3
  401e0a:	4e20      	ldr	r6, [pc, #128]	; (401e8c <board_init+0x104>)
  401e0c:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401e0e:	4639      	mov	r1, r7
  401e10:	4628      	mov	r0, r5
  401e12:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  401e14:	4639      	mov	r1, r7
  401e16:	200c      	movs	r0, #12
  401e18:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  401e1a:	4639      	mov	r1, r7
  401e1c:	200d      	movs	r0, #13
  401e1e:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  401e20:	4639      	mov	r1, r7
  401e22:	200e      	movs	r0, #14
  401e24:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  401e26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e2a:	2009      	movs	r0, #9
  401e2c:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  401e2e:	4918      	ldr	r1, [pc, #96]	; (401e90 <board_init+0x108>)
  401e30:	200a      	movs	r0, #10
  401e32:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  401e34:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  401e38:	4639      	mov	r1, r7
  401e3a:	2055      	movs	r0, #85	; 0x55
  401e3c:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  401e3e:	4639      	mov	r1, r7
  401e40:	205f      	movs	r0, #95	; 0x5f
  401e42:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  401e44:	4913      	ldr	r1, [pc, #76]	; (401e94 <board_init+0x10c>)
  401e46:	204c      	movs	r0, #76	; 0x4c
  401e48:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401e4a:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401e4c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401e50:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401e52:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401e54:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401e58:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401e5a:	f023 0304 	bic.w	r3, r3, #4
  401e5e:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401e60:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401e62:	f023 0304 	bic.w	r3, r3, #4
  401e66:	6763      	str	r3, [r4, #116]	; 0x74
  401e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e6a:	bf00      	nop
  401e6c:	400e1450 	.word	0x400e1450
  401e70:	00402cf5 	.word	0x00402cf5
  401e74:	004025b5 	.word	0x004025b5
  401e78:	400e1200 	.word	0x400e1200
  401e7c:	400e0e00 	.word	0x400e0e00
  401e80:	400e1000 	.word	0x400e1000
  401e84:	00402219 	.word	0x00402219
  401e88:	08000001 	.word	0x08000001
  401e8c:	004020f5 	.word	0x004020f5
  401e90:	10000001 	.word	0x10000001
  401e94:	28000001 	.word	0x28000001

00401e98 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  401e98:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  401e9a:	2401      	movs	r4, #1
  401e9c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  401e9e:	2500      	movs	r5, #0
  401ea0:	6045      	str	r5, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  401ea2:	f240 2402 	movw	r4, #514	; 0x202
  401ea6:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  401eaa:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  401eae:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  401eb2:	6844      	ldr	r4, [r0, #4]
  401eb4:	0052      	lsls	r2, r2, #1
  401eb6:	fbb1 f1f2 	udiv	r1, r1, r2
  401eba:	1e4a      	subs	r2, r1, #1
  401ebc:	0212      	lsls	r2, r2, #8
  401ebe:	b292      	uxth	r2, r2
  401ec0:	4323      	orrs	r3, r4
  401ec2:	431a      	orrs	r2, r3
  401ec4:	6042      	str	r2, [r0, #4]
	return 0;
}
  401ec6:	4628      	mov	r0, r5
  401ec8:	bc30      	pop	{r4, r5}
  401eca:	4770      	bx	lr

00401ecc <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  401ecc:	6843      	ldr	r3, [r0, #4]
  401ece:	01d2      	lsls	r2, r2, #7
  401ed0:	b2d2      	uxtb	r2, r2
  401ed2:	4319      	orrs	r1, r3
  401ed4:	4311      	orrs	r1, r2
  401ed6:	6041      	str	r1, [r0, #4]
  401ed8:	4770      	bx	lr
  401eda:	bf00      	nop

00401edc <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  401edc:	2302      	movs	r3, #2
  401ede:	6003      	str	r3, [r0, #0]
  401ee0:	4770      	bx	lr
  401ee2:	bf00      	nop

00401ee4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  401ee4:	2301      	movs	r3, #1
  401ee6:	fa03 f101 	lsl.w	r1, r3, r1
  401eea:	6101      	str	r1, [r0, #16]
  401eec:	4770      	bx	lr
  401eee:	bf00      	nop

00401ef0 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  401ef0:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  401ef2:	bf9a      	itte	ls
  401ef4:	3050      	addls	r0, #80	; 0x50
  401ef6:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
  401efa:	2000      	movhi	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
  401efc:	4770      	bx	lr
  401efe:	bf00      	nop

00401f00 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401f00:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401f04:	0052      	lsls	r2, r2, #1
  401f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f0a:	fbb3 f2f2 	udiv	r2, r3, r2
  401f0e:	3a01      	subs	r2, #1
  401f10:	f3c2 020d 	ubfx	r2, r2, #0, #14
  401f14:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  401f18:	4770      	bx	lr
  401f1a:	bf00      	nop

00401f1c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401f1c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401f1e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401f22:	d02f      	beq.n	401f84 <pio_set_peripheral+0x68>
  401f24:	d807      	bhi.n	401f36 <pio_set_peripheral+0x1a>
  401f26:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401f2a:	d014      	beq.n	401f56 <pio_set_peripheral+0x3a>
  401f2c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401f30:	d01e      	beq.n	401f70 <pio_set_peripheral+0x54>
  401f32:	b939      	cbnz	r1, 401f44 <pio_set_peripheral+0x28>
  401f34:	4770      	bx	lr
  401f36:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401f3a:	d036      	beq.n	401faa <pio_set_peripheral+0x8e>
  401f3c:	d804      	bhi.n	401f48 <pio_set_peripheral+0x2c>
  401f3e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401f42:	d029      	beq.n	401f98 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401f44:	6042      	str	r2, [r0, #4]
  401f46:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401f48:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401f4c:	d02d      	beq.n	401faa <pio_set_peripheral+0x8e>
  401f4e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401f52:	d02a      	beq.n	401faa <pio_set_peripheral+0x8e>
  401f54:	e7f6      	b.n	401f44 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401f56:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f58:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f5a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401f5c:	43d3      	mvns	r3, r2
  401f5e:	4021      	ands	r1, r4
  401f60:	4019      	ands	r1, r3
  401f62:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f64:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401f66:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401f68:	4021      	ands	r1, r4
  401f6a:	400b      	ands	r3, r1
  401f6c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401f6e:	e01a      	b.n	401fa6 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f70:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401f72:	4313      	orrs	r3, r2
  401f74:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f76:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401f78:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401f7a:	400b      	ands	r3, r1
  401f7c:	ea23 0302 	bic.w	r3, r3, r2
  401f80:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401f82:	e7df      	b.n	401f44 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f84:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f86:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401f88:	400b      	ands	r3, r1
  401f8a:	ea23 0302 	bic.w	r3, r3, r2
  401f8e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f90:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401f92:	4313      	orrs	r3, r2
  401f94:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401f96:	e7d5      	b.n	401f44 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f98:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401f9a:	4313      	orrs	r3, r2
  401f9c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f9e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401fa0:	4313      	orrs	r3, r2
  401fa2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401fa4:	e7ce      	b.n	401f44 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401fa6:	6042      	str	r2, [r0, #4]
}
  401fa8:	bc10      	pop	{r4}
  401faa:	4770      	bx	lr

00401fac <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401fac:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401fae:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401fb2:	bf14      	ite	ne
  401fb4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401fb6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401fb8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401fbc:	bf14      	ite	ne
  401fbe:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401fc0:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401fc2:	f012 0f02 	tst.w	r2, #2
  401fc6:	d002      	beq.n	401fce <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401fc8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401fcc:	e004      	b.n	401fd8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401fce:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401fd2:	bf18      	it	ne
  401fd4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401fd8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401fda:	6001      	str	r1, [r0, #0]
  401fdc:	4770      	bx	lr
  401fde:	bf00      	nop

00401fe0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401fe0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401fe2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401fe4:	9c01      	ldr	r4, [sp, #4]
  401fe6:	b10c      	cbz	r4, 401fec <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401fe8:	6641      	str	r1, [r0, #100]	; 0x64
  401fea:	e000      	b.n	401fee <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401fec:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401fee:	b10b      	cbz	r3, 401ff4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401ff0:	6501      	str	r1, [r0, #80]	; 0x50
  401ff2:	e000      	b.n	401ff6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401ff4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401ff6:	b10a      	cbz	r2, 401ffc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401ff8:	6301      	str	r1, [r0, #48]	; 0x30
  401ffa:	e000      	b.n	401ffe <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401ffc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401ffe:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402000:	6001      	str	r1, [r0, #0]
}
  402002:	bc10      	pop	{r4}
  402004:	4770      	bx	lr
  402006:	bf00      	nop

00402008 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  402008:	b570      	push	{r4, r5, r6, lr}
  40200a:	b082      	sub	sp, #8
  40200c:	4605      	mov	r5, r0
  40200e:	4616      	mov	r6, r2
  402010:	461c      	mov	r4, r3
	/* Configure pins */
	switch (ul_type) {
  402012:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402016:	d014      	beq.n	402042 <pio_configure+0x3a>
  402018:	d809      	bhi.n	40202e <pio_configure+0x26>
  40201a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40201e:	d010      	beq.n	402042 <pio_configure+0x3a>
  402020:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402024:	d00d      	beq.n	402042 <pio_configure+0x3a>
  402026:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40202a:	d12b      	bne.n	402084 <pio_configure+0x7c>
  40202c:	e009      	b.n	402042 <pio_configure+0x3a>
  40202e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402032:	d017      	beq.n	402064 <pio_configure+0x5c>
  402034:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402038:	d014      	beq.n	402064 <pio_configure+0x5c>
  40203a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40203e:	d00b      	beq.n	402058 <pio_configure+0x50>
  402040:	e020      	b.n	402084 <pio_configure+0x7c>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402042:	4632      	mov	r2, r6
  402044:	4628      	mov	r0, r5
  402046:	4b11      	ldr	r3, [pc, #68]	; (40208c <pio_configure+0x84>)
  402048:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40204a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40204e:	bf14      	ite	ne
  402050:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402052:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402054:	2001      	movs	r0, #1
  402056:	e016      	b.n	402086 <pio_configure+0x7e>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402058:	461a      	mov	r2, r3
  40205a:	4631      	mov	r1, r6
  40205c:	4b0c      	ldr	r3, [pc, #48]	; (402090 <pio_configure+0x88>)
  40205e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402060:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
  402062:	e010      	b.n	402086 <pio_configure+0x7e>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402064:	f004 0301 	and.w	r3, r4, #1
  402068:	9300      	str	r3, [sp, #0]
  40206a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40206e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402072:	bf14      	ite	ne
  402074:	2200      	movne	r2, #0
  402076:	2201      	moveq	r2, #1
  402078:	4631      	mov	r1, r6
  40207a:	4628      	mov	r0, r5
  40207c:	4c05      	ldr	r4, [pc, #20]	; (402094 <pio_configure+0x8c>)
  40207e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402080:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
  402082:	e000      	b.n	402086 <pio_configure+0x7e>

	default:
		return 0;
  402084:	2000      	movs	r0, #0
	}

	return 1;
}
  402086:	b002      	add	sp, #8
  402088:	bd70      	pop	{r4, r5, r6, pc}
  40208a:	bf00      	nop
  40208c:	00401f1d 	.word	0x00401f1d
  402090:	00401fad 	.word	0x00401fad
  402094:	00401fe1 	.word	0x00401fe1

00402098 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402098:	f012 0f10 	tst.w	r2, #16
  40209c:	d010      	beq.n	4020c0 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40209e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4020a2:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4020a6:	bf14      	ite	ne
  4020a8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4020ac:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4020b0:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4020b4:	bf14      	ite	ne
  4020b6:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4020ba:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4020be:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4020c0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4020c4:	4770      	bx	lr
  4020c6:	bf00      	nop

004020c8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  4020c8:	6401      	str	r1, [r0, #64]	; 0x40
  4020ca:	4770      	bx	lr

004020cc <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4020cc:	6441      	str	r1, [r0, #68]	; 0x44
  4020ce:	4770      	bx	lr

004020d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4020d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4020d2:	4770      	bx	lr

004020d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4020d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4020d6:	4770      	bx	lr

004020d8 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4020d8:	0943      	lsrs	r3, r0, #5
  4020da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4020de:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4020e2:	025b      	lsls	r3, r3, #9
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  4020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4020e6:	f000 001f 	and.w	r0, r0, #31
  4020ea:	fa23 f000 	lsr.w	r0, r3, r0
}
  4020ee:	f000 0001 	and.w	r0, r0, #1
  4020f2:	4770      	bx	lr

004020f4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4020f4:	b570      	push	{r4, r5, r6, lr}
  4020f6:	b082      	sub	sp, #8
  4020f8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4020fa:	0943      	lsrs	r3, r0, #5
  4020fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402100:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402104:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402106:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40210a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40210e:	d047      	beq.n	4021a0 <pio_configure_pin+0xac>
  402110:	d809      	bhi.n	402126 <pio_configure_pin+0x32>
  402112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402116:	d021      	beq.n	40215c <pio_configure_pin+0x68>
  402118:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40211c:	d02f      	beq.n	40217e <pio_configure_pin+0x8a>
  40211e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402122:	d16f      	bne.n	402204 <pio_configure_pin+0x110>
  402124:	e009      	b.n	40213a <pio_configure_pin+0x46>
  402126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40212a:	d055      	beq.n	4021d8 <pio_configure_pin+0xe4>
  40212c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402130:	d052      	beq.n	4021d8 <pio_configure_pin+0xe4>
  402132:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402136:	d044      	beq.n	4021c2 <pio_configure_pin+0xce>
  402138:	e064      	b.n	402204 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40213a:	f000 001f 	and.w	r0, r0, #31
  40213e:	2601      	movs	r6, #1
  402140:	4086      	lsls	r6, r0
  402142:	4632      	mov	r2, r6
  402144:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402148:	4620      	mov	r0, r4
  40214a:	4b30      	ldr	r3, [pc, #192]	; (40220c <pio_configure_pin+0x118>)
  40214c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40214e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402152:	bf14      	ite	ne
  402154:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402156:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402158:	2001      	movs	r0, #1
  40215a:	e054      	b.n	402206 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40215c:	f000 001f 	and.w	r0, r0, #31
  402160:	2601      	movs	r6, #1
  402162:	4086      	lsls	r6, r0
  402164:	4632      	mov	r2, r6
  402166:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40216a:	4620      	mov	r0, r4
  40216c:	4b27      	ldr	r3, [pc, #156]	; (40220c <pio_configure_pin+0x118>)
  40216e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402170:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402174:	bf14      	ite	ne
  402176:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402178:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40217a:	2001      	movs	r0, #1
  40217c:	e043      	b.n	402206 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40217e:	f000 001f 	and.w	r0, r0, #31
  402182:	2601      	movs	r6, #1
  402184:	4086      	lsls	r6, r0
  402186:	4632      	mov	r2, r6
  402188:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40218c:	4620      	mov	r0, r4
  40218e:	4b1f      	ldr	r3, [pc, #124]	; (40220c <pio_configure_pin+0x118>)
  402190:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402192:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402196:	bf14      	ite	ne
  402198:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40219a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40219c:	2001      	movs	r0, #1
  40219e:	e032      	b.n	402206 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4021a0:	f000 001f 	and.w	r0, r0, #31
  4021a4:	2601      	movs	r6, #1
  4021a6:	4086      	lsls	r6, r0
  4021a8:	4632      	mov	r2, r6
  4021aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4021ae:	4620      	mov	r0, r4
  4021b0:	4b16      	ldr	r3, [pc, #88]	; (40220c <pio_configure_pin+0x118>)
  4021b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4021b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4021b8:	bf14      	ite	ne
  4021ba:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4021bc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4021be:	2001      	movs	r0, #1
  4021c0:	e021      	b.n	402206 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4021c2:	f000 011f 	and.w	r1, r0, #31
  4021c6:	2601      	movs	r6, #1
  4021c8:	462a      	mov	r2, r5
  4021ca:	fa06 f101 	lsl.w	r1, r6, r1
  4021ce:	4620      	mov	r0, r4
  4021d0:	4b0f      	ldr	r3, [pc, #60]	; (402210 <pio_configure_pin+0x11c>)
  4021d2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4021d4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4021d6:	e016      	b.n	402206 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4021d8:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4021dc:	f000 011f 	and.w	r1, r0, #31
  4021e0:	2601      	movs	r6, #1
  4021e2:	ea05 0306 	and.w	r3, r5, r6
  4021e6:	9300      	str	r3, [sp, #0]
  4021e8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4021ec:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4021f0:	bf14      	ite	ne
  4021f2:	2200      	movne	r2, #0
  4021f4:	2201      	moveq	r2, #1
  4021f6:	fa06 f101 	lsl.w	r1, r6, r1
  4021fa:	4620      	mov	r0, r4
  4021fc:	4c05      	ldr	r4, [pc, #20]	; (402214 <pio_configure_pin+0x120>)
  4021fe:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402200:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402202:	e000      	b.n	402206 <pio_configure_pin+0x112>

	default:
		return 0;
  402204:	2000      	movs	r0, #0
	}

	return 1;
}
  402206:	b002      	add	sp, #8
  402208:	bd70      	pop	{r4, r5, r6, pc}
  40220a:	bf00      	nop
  40220c:	00401f1d 	.word	0x00401f1d
  402210:	00401fad 	.word	0x00401fad
  402214:	00401fe1 	.word	0x00401fe1

00402218 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  402218:	b570      	push	{r4, r5, r6, lr}
  40221a:	b082      	sub	sp, #8
  40221c:	4605      	mov	r5, r0
  40221e:	460e      	mov	r6, r1
  402220:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402222:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  402226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40222a:	d038      	beq.n	40229e <pio_configure_pin_group+0x86>
  40222c:	d809      	bhi.n	402242 <pio_configure_pin_group+0x2a>
  40222e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402232:	d01c      	beq.n	40226e <pio_configure_pin_group+0x56>
  402234:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402238:	d025      	beq.n	402286 <pio_configure_pin_group+0x6e>
  40223a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40223e:	d150      	bne.n	4022e2 <pio_configure_pin_group+0xca>
  402240:	e009      	b.n	402256 <pio_configure_pin_group+0x3e>
  402242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402246:	d03a      	beq.n	4022be <pio_configure_pin_group+0xa6>
  402248:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40224c:	d037      	beq.n	4022be <pio_configure_pin_group+0xa6>
  40224e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402252:	d030      	beq.n	4022b6 <pio_configure_pin_group+0x9e>
  402254:	e045      	b.n	4022e2 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  402256:	460a      	mov	r2, r1
  402258:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40225c:	4b22      	ldr	r3, [pc, #136]	; (4022e8 <pio_configure_pin_group+0xd0>)
  40225e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402260:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402264:	bf14      	ite	ne
  402266:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402268:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40226a:	2001      	movs	r0, #1
  40226c:	e03a      	b.n	4022e4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40226e:	460a      	mov	r2, r1
  402270:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402274:	4b1c      	ldr	r3, [pc, #112]	; (4022e8 <pio_configure_pin_group+0xd0>)
  402276:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402278:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40227c:	bf14      	ite	ne
  40227e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402280:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402282:	2001      	movs	r0, #1
  402284:	e02e      	b.n	4022e4 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  402286:	460a      	mov	r2, r1
  402288:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40228c:	4b16      	ldr	r3, [pc, #88]	; (4022e8 <pio_configure_pin_group+0xd0>)
  40228e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402290:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402294:	bf14      	ite	ne
  402296:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402298:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40229a:	2001      	movs	r0, #1
  40229c:	e022      	b.n	4022e4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40229e:	460a      	mov	r2, r1
  4022a0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4022a4:	4b10      	ldr	r3, [pc, #64]	; (4022e8 <pio_configure_pin_group+0xd0>)
  4022a6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4022a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4022ac:	bf14      	ite	ne
  4022ae:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4022b0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4022b2:	2001      	movs	r0, #1
  4022b4:	e016      	b.n	4022e4 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4022b6:	4b0d      	ldr	r3, [pc, #52]	; (4022ec <pio_configure_pin_group+0xd4>)
  4022b8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4022ba:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4022bc:	e012      	b.n	4022e4 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4022be:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4022c2:	f004 0301 	and.w	r3, r4, #1
  4022c6:	9300      	str	r3, [sp, #0]
  4022c8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4022cc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4022d0:	bf14      	ite	ne
  4022d2:	2200      	movne	r2, #0
  4022d4:	2201      	moveq	r2, #1
  4022d6:	4631      	mov	r1, r6
  4022d8:	4628      	mov	r0, r5
  4022da:	4c05      	ldr	r4, [pc, #20]	; (4022f0 <pio_configure_pin_group+0xd8>)
  4022dc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4022de:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4022e0:	e000      	b.n	4022e4 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4022e2:	2000      	movs	r0, #0
	}

	return 1;
}
  4022e4:	b002      	add	sp, #8
  4022e6:	bd70      	pop	{r4, r5, r6, pc}
  4022e8:	00401f1d 	.word	0x00401f1d
  4022ec:	00401fad 	.word	0x00401fad
  4022f0:	00401fe1 	.word	0x00401fe1

004022f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4022f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4022f8:	4681      	mov	r9, r0
  4022fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4022fc:	4b12      	ldr	r3, [pc, #72]	; (402348 <pio_handler_process+0x54>)
  4022fe:	4798      	blx	r3
  402300:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402302:	4648      	mov	r0, r9
  402304:	4b11      	ldr	r3, [pc, #68]	; (40234c <pio_handler_process+0x58>)
  402306:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402308:	4005      	ands	r5, r0
  40230a:	d013      	beq.n	402334 <pio_handler_process+0x40>
  40230c:	4c10      	ldr	r4, [pc, #64]	; (402350 <pio_handler_process+0x5c>)
  40230e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402312:	6823      	ldr	r3, [r4, #0]
  402314:	4543      	cmp	r3, r8
  402316:	d108      	bne.n	40232a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402318:	6861      	ldr	r1, [r4, #4]
  40231a:	4229      	tst	r1, r5
  40231c:	d005      	beq.n	40232a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40231e:	68e3      	ldr	r3, [r4, #12]
  402320:	4640      	mov	r0, r8
  402322:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402324:	6863      	ldr	r3, [r4, #4]
  402326:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40232a:	42b4      	cmp	r4, r6
  40232c:	d002      	beq.n	402334 <pio_handler_process+0x40>
  40232e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  402330:	2d00      	cmp	r5, #0
  402332:	d1ee      	bne.n	402312 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  402334:	4b07      	ldr	r3, [pc, #28]	; (402354 <pio_handler_process+0x60>)
  402336:	681b      	ldr	r3, [r3, #0]
  402338:	b123      	cbz	r3, 402344 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40233a:	4b07      	ldr	r3, [pc, #28]	; (402358 <pio_handler_process+0x64>)
  40233c:	681b      	ldr	r3, [r3, #0]
  40233e:	b10b      	cbz	r3, 402344 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  402340:	4648      	mov	r0, r9
  402342:	4798      	blx	r3
  402344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402348:	004020d1 	.word	0x004020d1
  40234c:	004020d5 	.word	0x004020d5
  402350:	20000f18 	.word	0x20000f18
  402354:	20000ff0 	.word	0x20000ff0
  402358:	20000f14 	.word	0x20000f14

0040235c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40235e:	4c17      	ldr	r4, [pc, #92]	; (4023bc <pio_handler_set+0x60>)
  402360:	6826      	ldr	r6, [r4, #0]
  402362:	2e06      	cmp	r6, #6
  402364:	d828      	bhi.n	4023b8 <pio_handler_set+0x5c>
  402366:	f04f 0c00 	mov.w	ip, #0
  40236a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40236c:	4f14      	ldr	r7, [pc, #80]	; (4023c0 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  40236e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402370:	0125      	lsls	r5, r4, #4
  402372:	597d      	ldr	r5, [r7, r5]
  402374:	428d      	cmp	r5, r1
  402376:	d104      	bne.n	402382 <pio_handler_set+0x26>
  402378:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40237c:	686d      	ldr	r5, [r5, #4]
  40237e:	4295      	cmp	r5, r2
  402380:	d004      	beq.n	40238c <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402382:	3401      	adds	r4, #1
  402384:	b2e4      	uxtb	r4, r4
  402386:	46a4      	mov	ip, r4
  402388:	42a6      	cmp	r6, r4
  40238a:	d2f0      	bcs.n	40236e <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40238c:	4d0c      	ldr	r5, [pc, #48]	; (4023c0 <pio_handler_set+0x64>)
  40238e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  402392:	eb05 040e 	add.w	r4, r5, lr
  402396:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40239a:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40239c:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40239e:	9906      	ldr	r1, [sp, #24]
  4023a0:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4023a2:	3601      	adds	r6, #1
  4023a4:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4023a6:	bf04      	itt	eq
  4023a8:	4904      	ldreq	r1, [pc, #16]	; (4023bc <pio_handler_set+0x60>)
  4023aa:	600e      	streq	r6, [r1, #0]
  4023ac:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4023ae:	461a      	mov	r2, r3
  4023b0:	4b04      	ldr	r3, [pc, #16]	; (4023c4 <pio_handler_set+0x68>)
  4023b2:	4798      	blx	r3

	return 0;
  4023b4:	2000      	movs	r0, #0
  4023b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4023b8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4023ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023bc:	20000f10 	.word	0x20000f10
  4023c0:	20000f18 	.word	0x20000f18
  4023c4:	00402099 	.word	0x00402099

004023c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4023c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4023ca:	210b      	movs	r1, #11
  4023cc:	4801      	ldr	r0, [pc, #4]	; (4023d4 <PIOA_Handler+0xc>)
  4023ce:	4b02      	ldr	r3, [pc, #8]	; (4023d8 <PIOA_Handler+0x10>)
  4023d0:	4798      	blx	r3
  4023d2:	bd08      	pop	{r3, pc}
  4023d4:	400e0e00 	.word	0x400e0e00
  4023d8:	004022f5 	.word	0x004022f5

004023dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4023dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4023de:	210c      	movs	r1, #12
  4023e0:	4801      	ldr	r0, [pc, #4]	; (4023e8 <PIOB_Handler+0xc>)
  4023e2:	4b02      	ldr	r3, [pc, #8]	; (4023ec <PIOB_Handler+0x10>)
  4023e4:	4798      	blx	r3
  4023e6:	bd08      	pop	{r3, pc}
  4023e8:	400e1000 	.word	0x400e1000
  4023ec:	004022f5 	.word	0x004022f5

004023f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4023f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4023f2:	210d      	movs	r1, #13
  4023f4:	4801      	ldr	r0, [pc, #4]	; (4023fc <PIOC_Handler+0xc>)
  4023f6:	4b02      	ldr	r3, [pc, #8]	; (402400 <PIOC_Handler+0x10>)
  4023f8:	4798      	blx	r3
  4023fa:	bd08      	pop	{r3, pc}
  4023fc:	400e1200 	.word	0x400e1200
  402400:	004022f5 	.word	0x004022f5

00402404 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  402404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402406:	4605      	mov	r5, r0
  402408:	460c      	mov	r4, r1
  40240a:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  40240c:	4b18      	ldr	r3, [pc, #96]	; (402470 <pio_handler_set_priority+0x6c>)
  40240e:	4798      	blx	r3
  402410:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  402412:	f04f 31ff 	mov.w	r1, #4294967295
  402416:	4628      	mov	r0, r5
  402418:	4b16      	ldr	r3, [pc, #88]	; (402474 <pio_handler_set_priority+0x70>)
  40241a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40241c:	4628      	mov	r0, r5
  40241e:	4b16      	ldr	r3, [pc, #88]	; (402478 <pio_handler_set_priority+0x74>)
  402420:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402422:	b2e2      	uxtb	r2, r4
  402424:	f002 031f 	and.w	r3, r2, #31
  402428:	2101      	movs	r1, #1
  40242a:	4099      	lsls	r1, r3
  40242c:	0963      	lsrs	r3, r4, #5
  40242e:	009b      	lsls	r3, r3, #2
  402430:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  402434:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  402438:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40243c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  402440:	2c00      	cmp	r4, #0
  402442:	da06      	bge.n	402452 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402444:	f002 020f 	and.w	r2, r2, #15
  402448:	013f      	lsls	r7, r7, #4
  40244a:	b2ff      	uxtb	r7, r7
  40244c:	480b      	ldr	r0, [pc, #44]	; (40247c <pio_handler_set_priority+0x78>)
  40244e:	5487      	strb	r7, [r0, r2]
  402450:	e007      	b.n	402462 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402452:	013f      	lsls	r7, r7, #4
  402454:	b2ff      	uxtb	r7, r7
  402456:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  40245a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  40245e:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402462:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  402464:	4631      	mov	r1, r6
  402466:	4628      	mov	r0, r5
  402468:	4b05      	ldr	r3, [pc, #20]	; (402480 <pio_handler_set_priority+0x7c>)
  40246a:	4798      	blx	r3
  40246c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40246e:	bf00      	nop
  402470:	004020d5 	.word	0x004020d5
  402474:	004020cd 	.word	0x004020cd
  402478:	004020d1 	.word	0x004020d1
  40247c:	e000ed14 	.word	0xe000ed14
  402480:	004020c9 	.word	0x004020c9

00402484 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402484:	4a18      	ldr	r2, [pc, #96]	; (4024e8 <pmc_switch_mck_to_pllack+0x64>)
  402486:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40248c:	4318      	orrs	r0, r3
  40248e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402490:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402492:	f013 0f08 	tst.w	r3, #8
  402496:	d003      	beq.n	4024a0 <pmc_switch_mck_to_pllack+0x1c>
  402498:	e009      	b.n	4024ae <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40249a:	3b01      	subs	r3, #1
  40249c:	d103      	bne.n	4024a6 <pmc_switch_mck_to_pllack+0x22>
  40249e:	e01e      	b.n	4024de <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4024a4:	4910      	ldr	r1, [pc, #64]	; (4024e8 <pmc_switch_mck_to_pllack+0x64>)
  4024a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4024a8:	f012 0f08 	tst.w	r2, #8
  4024ac:	d0f5      	beq.n	40249a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4024ae:	4a0e      	ldr	r2, [pc, #56]	; (4024e8 <pmc_switch_mck_to_pllack+0x64>)
  4024b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024b2:	f023 0303 	bic.w	r3, r3, #3
  4024b6:	f043 0302 	orr.w	r3, r3, #2
  4024ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024bc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4024be:	f010 0008 	ands.w	r0, r0, #8
  4024c2:	d004      	beq.n	4024ce <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4024c4:	2000      	movs	r0, #0
  4024c6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4024c8:	3b01      	subs	r3, #1
  4024ca:	d103      	bne.n	4024d4 <pmc_switch_mck_to_pllack+0x50>
  4024cc:	e009      	b.n	4024e2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4024d2:	4905      	ldr	r1, [pc, #20]	; (4024e8 <pmc_switch_mck_to_pllack+0x64>)
  4024d4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4024d6:	f012 0f08 	tst.w	r2, #8
  4024da:	d0f5      	beq.n	4024c8 <pmc_switch_mck_to_pllack+0x44>
  4024dc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4024de:	2001      	movs	r0, #1
  4024e0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4024e2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4024e4:	4770      	bx	lr
  4024e6:	bf00      	nop
  4024e8:	400e0400 	.word	0x400e0400

004024ec <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4024ec:	2801      	cmp	r0, #1
  4024ee:	d106      	bne.n	4024fe <pmc_switch_sclk_to_32kxtal+0x12>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4024f0:	4a05      	ldr	r2, [pc, #20]	; (402508 <pmc_switch_sclk_to_32kxtal+0x1c>)
  4024f2:	6893      	ldr	r3, [r2, #8]
  4024f4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4024f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4024fc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4024fe:	4a03      	ldr	r2, [pc, #12]	; (40250c <pmc_switch_sclk_to_32kxtal+0x20>)
  402500:	4b01      	ldr	r3, [pc, #4]	; (402508 <pmc_switch_sclk_to_32kxtal+0x1c>)
  402502:	601a      	str	r2, [r3, #0]
  402504:	4770      	bx	lr
  402506:	bf00      	nop
  402508:	400e1410 	.word	0x400e1410
  40250c:	a5000008 	.word	0xa5000008

00402510 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  402510:	4b05      	ldr	r3, [pc, #20]	; (402528 <pmc_osc_is_ready_32kxtal+0x18>)
  402512:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402514:	f013 0f80 	tst.w	r3, #128	; 0x80
  402518:	bf1d      	ittte	ne
  40251a:	4b04      	ldrne	r3, [pc, #16]	; (40252c <pmc_osc_is_ready_32kxtal+0x1c>)
  40251c:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  40251e:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  402522:	2000      	moveq	r0, #0
}
  402524:	4770      	bx	lr
  402526:	bf00      	nop
  402528:	400e1410 	.word	0x400e1410
  40252c:	400e0400 	.word	0x400e0400

00402530 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402530:	b138      	cbz	r0, 402542 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402532:	4911      	ldr	r1, [pc, #68]	; (402578 <pmc_switch_mainck_to_xtal+0x48>)
  402534:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402536:	4a11      	ldr	r2, [pc, #68]	; (40257c <pmc_switch_mainck_to_xtal+0x4c>)
  402538:	401a      	ands	r2, r3
  40253a:	4b11      	ldr	r3, [pc, #68]	; (402580 <pmc_switch_mainck_to_xtal+0x50>)
  40253c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40253e:	620b      	str	r3, [r1, #32]
  402540:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402542:	480d      	ldr	r0, [pc, #52]	; (402578 <pmc_switch_mainck_to_xtal+0x48>)
  402544:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402546:	0209      	lsls	r1, r1, #8
  402548:	b289      	uxth	r1, r1
  40254a:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40254e:	f023 0303 	bic.w	r3, r3, #3
  402552:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402556:	f043 0301 	orr.w	r3, r3, #1
  40255a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40255c:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40255e:	4602      	mov	r2, r0
  402560:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402562:	f013 0f01 	tst.w	r3, #1
  402566:	d0fb      	beq.n	402560 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402568:	4a03      	ldr	r2, [pc, #12]	; (402578 <pmc_switch_mainck_to_xtal+0x48>)
  40256a:	6a13      	ldr	r3, [r2, #32]
  40256c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402574:	6213      	str	r3, [r2, #32]
  402576:	4770      	bx	lr
  402578:	400e0400 	.word	0x400e0400
  40257c:	fec8fffc 	.word	0xfec8fffc
  402580:	01370002 	.word	0x01370002

00402584 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402584:	4b02      	ldr	r3, [pc, #8]	; (402590 <pmc_osc_is_ready_mainck+0xc>)
  402586:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402588:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40258c:	4770      	bx	lr
  40258e:	bf00      	nop
  402590:	400e0400 	.word	0x400e0400

00402594 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402594:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402598:	4b01      	ldr	r3, [pc, #4]	; (4025a0 <pmc_disable_pllack+0xc>)
  40259a:	629a      	str	r2, [r3, #40]	; 0x28
  40259c:	4770      	bx	lr
  40259e:	bf00      	nop
  4025a0:	400e0400 	.word	0x400e0400

004025a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4025a4:	4b02      	ldr	r3, [pc, #8]	; (4025b0 <pmc_is_locked_pllack+0xc>)
  4025a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4025a8:	f000 0002 	and.w	r0, r0, #2
  4025ac:	4770      	bx	lr
  4025ae:	bf00      	nop
  4025b0:	400e0400 	.word	0x400e0400

004025b4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4025b4:	2822      	cmp	r0, #34	; 0x22
  4025b6:	d81e      	bhi.n	4025f6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4025b8:	281f      	cmp	r0, #31
  4025ba:	d80c      	bhi.n	4025d6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4025bc:	4b11      	ldr	r3, [pc, #68]	; (402604 <pmc_enable_periph_clk+0x50>)
  4025be:	699a      	ldr	r2, [r3, #24]
  4025c0:	2301      	movs	r3, #1
  4025c2:	4083      	lsls	r3, r0
  4025c4:	4393      	bics	r3, r2
  4025c6:	d018      	beq.n	4025fa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4025c8:	2301      	movs	r3, #1
  4025ca:	fa03 f000 	lsl.w	r0, r3, r0
  4025ce:	4b0d      	ldr	r3, [pc, #52]	; (402604 <pmc_enable_periph_clk+0x50>)
  4025d0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4025d2:	2000      	movs	r0, #0
  4025d4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4025d6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4025d8:	4b0a      	ldr	r3, [pc, #40]	; (402604 <pmc_enable_periph_clk+0x50>)
  4025da:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4025de:	2301      	movs	r3, #1
  4025e0:	4083      	lsls	r3, r0
  4025e2:	4393      	bics	r3, r2
  4025e4:	d00b      	beq.n	4025fe <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4025e6:	2301      	movs	r3, #1
  4025e8:	fa03 f000 	lsl.w	r0, r3, r0
  4025ec:	4b05      	ldr	r3, [pc, #20]	; (402604 <pmc_enable_periph_clk+0x50>)
  4025ee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4025f2:	2000      	movs	r0, #0
  4025f4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4025f6:	2001      	movs	r0, #1
  4025f8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4025fa:	2000      	movs	r0, #0
  4025fc:	4770      	bx	lr
  4025fe:	2000      	movs	r0, #0
}
  402600:	4770      	bx	lr
  402602:	bf00      	nop
  402604:	400e0400 	.word	0x400e0400

00402608 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  402608:	b121      	cbz	r1, 402614 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  40260a:	6843      	ldr	r3, [r0, #4]
  40260c:	f043 0301 	orr.w	r3, r3, #1
  402610:	6043      	str	r3, [r0, #4]
  402612:	4770      	bx	lr
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  402614:	6843      	ldr	r3, [r0, #4]
  402616:	f023 0301 	bic.w	r3, r3, #1
  40261a:	6043      	str	r3, [r0, #4]
  40261c:	4770      	bx	lr
  40261e:	bf00      	nop

00402620 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  402620:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  402622:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  402624:	6884      	ldr	r4, [r0, #8]
  402626:	42a5      	cmp	r5, r4
  402628:	d003      	beq.n	402632 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40262a:	6884      	ldr	r4, [r0, #8]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  40262c:	6885      	ldr	r5, [r0, #8]
  40262e:	42a5      	cmp	r5, r4
  402630:	d1fb      	bne.n	40262a <rtc_get_time+0xa>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  402632:	b161      	cbz	r1, 40264e <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402634:	f3c4 5001 	ubfx	r0, r4, #20, #2
  402638:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40263c:	f3c4 4003 	ubfx	r0, r4, #16, #4
  402640:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  402644:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  402648:	bf18      	it	ne
  40264a:	300c      	addne	r0, #12
  40264c:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40264e:	b142      	cbz	r2, 402662 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  402650:	f3c4 3102 	ubfx	r1, r4, #12, #3
  402654:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402658:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40265c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402660:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  402662:	b143      	cbz	r3, 402676 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402664:	f3c4 1202 	ubfx	r2, r4, #4, #3
  402668:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40266c:	f004 040f 	and.w	r4, r4, #15
  402670:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  402674:	601c      	str	r4, [r3, #0]
	}
}
  402676:	bc30      	pop	{r4, r5}
  402678:	4770      	bx	lr
  40267a:	bf00      	nop

0040267c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  40267c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40267e:	6844      	ldr	r4, [r0, #4]
  402680:	f014 0f01 	tst.w	r4, #1
  402684:	d005      	beq.n	402692 <rtc_set_time+0x16>
		if (ul_hour > 12) {
  402686:	290c      	cmp	r1, #12
  402688:	d905      	bls.n	402696 <rtc_set_time+0x1a>
			ul_hour -= 12;
  40268a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  40268c:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  402690:	e002      	b.n	402698 <rtc_set_time+0x1c>
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
	uint32_t ul_time = 0;
  402692:	2600      	movs	r6, #0
  402694:	e000      	b.n	402698 <rtc_set_time+0x1c>
  402696:	2600      	movs	r6, #0
  402698:	4c1c      	ldr	r4, [pc, #112]	; (40270c <rtc_set_time+0x90>)
  40269a:	fba4 5703 	umull	r5, r7, r4, r3
  40269e:	08ff      	lsrs	r7, r7, #3
  4026a0:	eb07 0587 	add.w	r5, r7, r7, lsl #2
  4026a4:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4026a8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  4026ac:	fba4 7502 	umull	r7, r5, r4, r2
  4026b0:	08ed      	lsrs	r5, r5, #3
  4026b2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  4026b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4026ba:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  4026be:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4026c2:	4332      	orrs	r2, r6
  4026c4:	fba4 4301 	umull	r4, r3, r4, r1
  4026c8:	08db      	lsrs	r3, r3, #3
  4026ca:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4026ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4026d2:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
  4026d6:	ea42 4103 	orr.w	r1, r2, r3, lsl #16
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4026da:	6983      	ldr	r3, [r0, #24]
  4026dc:	f013 0f04 	tst.w	r3, #4
  4026e0:	d0fb      	beq.n	4026da <rtc_set_time+0x5e>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4026e2:	6803      	ldr	r3, [r0, #0]
  4026e4:	f043 0301 	orr.w	r3, r3, #1
  4026e8:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4026ea:	6983      	ldr	r3, [r0, #24]
  4026ec:	f013 0f01 	tst.w	r3, #1
  4026f0:	d0fb      	beq.n	4026ea <rtc_set_time+0x6e>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4026f2:	2301      	movs	r3, #1
  4026f4:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  4026f6:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  4026f8:	6803      	ldr	r3, [r0, #0]
  4026fa:	f023 0301 	bic.w	r3, r3, #1
  4026fe:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  402700:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  402702:	f000 0001 	and.w	r0, r0, #1
  402706:	bcf0      	pop	{r4, r5, r6, r7}
  402708:	4770      	bx	lr
  40270a:	bf00      	nop
  40270c:	cccccccd 	.word	0xcccccccd

00402710 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  402710:	b4f0      	push	{r4, r5, r6, r7}
  402712:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  402714:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  402716:	68c4      	ldr	r4, [r0, #12]
  402718:	42a5      	cmp	r5, r4
  40271a:	d003      	beq.n	402724 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  40271c:	68c4      	ldr	r4, [r0, #12]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  40271e:	68c5      	ldr	r5, [r0, #12]
  402720:	42a5      	cmp	r5, r4
  402722:	d1fb      	bne.n	40271c <rtc_get_date+0xc>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  402724:	b199      	cbz	r1, 40274e <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402726:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40272a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40272e:	f004 000f 	and.w	r0, r4, #15
  402732:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  402736:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40273a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40273e:	f3c4 2703 	ubfx	r7, r4, #8, #4
  402742:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  402746:	2764      	movs	r7, #100	; 0x64
  402748:	fb07 0005 	mla	r0, r7, r5, r0
  40274c:	6008      	str	r0, [r1, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  40274e:	b142      	cbz	r2, 402762 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402750:	f3c4 5100 	ubfx	r1, r4, #20, #1
  402754:	0088      	lsls	r0, r1, #2
  402756:	4401      	add	r1, r0
  402758:	f3c4 4003 	ubfx	r0, r4, #16, #4
  40275c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402760:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402762:	b143      	cbz	r3, 402776 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402764:	f3c4 7201 	ubfx	r2, r4, #28, #2
  402768:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40276c:	f3c4 6103 	ubfx	r1, r4, #24, #4
  402770:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  402774:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  402776:	b116      	cbz	r6, 40277e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  402778:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40277c:	6034      	str	r4, [r6, #0]
	}
}
  40277e:	bcf0      	pop	{r4, r5, r6, r7}
  402780:	4770      	bx	lr
  402782:	bf00      	nop

00402784 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  402784:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402786:	4e2a      	ldr	r6, [pc, #168]	; (402830 <rtc_set_date+0xac>)
  402788:	fba6 4e03 	umull	r4, lr, r6, r3
  40278c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  402790:	9c05      	ldr	r4, [sp, #20]
  402792:	0564      	lsls	r4, r4, #21
  402794:	ea44 770e 	orr.w	r7, r4, lr, lsl #28
  402798:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  40279c:	eba3 054e 	sub.w	r5, r3, lr, lsl #1
  4027a0:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
  4027a4:	fba6 4302 	umull	r4, r3, r6, r2
  4027a8:	08db      	lsrs	r3, r3, #3
  4027aa:	ea45 5503 	orr.w	r5, r5, r3, lsl #20
  4027ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4027b2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
  4027b6:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
  4027ba:	4b1e      	ldr	r3, [pc, #120]	; (402834 <rtc_set_date+0xb0>)
  4027bc:	fba3 2301 	umull	r2, r3, r3, r1
  4027c0:	099b      	lsrs	r3, r3, #6
  4027c2:	ea44 1203 	orr.w	r2, r4, r3, lsl #4
  4027c6:	4c1c      	ldr	r4, [pc, #112]	; (402838 <rtc_set_date+0xb4>)
  4027c8:	fba4 3401 	umull	r3, r4, r4, r1
  4027cc:	0963      	lsrs	r3, r4, #5
  4027ce:	fba6 5403 	umull	r5, r4, r6, r3
  4027d2:	08e4      	lsrs	r4, r4, #3
  4027d4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4027d8:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  4027dc:	4313      	orrs	r3, r2
  4027de:	fba6 2401 	umull	r2, r4, r6, r1
  4027e2:	08e4      	lsrs	r4, r4, #3
  4027e4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4027e8:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
  4027ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4027f0:	fba6 2604 	umull	r2, r6, r6, r4
  4027f4:	08f6      	lsrs	r6, r6, #3
  4027f6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4027fa:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
  4027fe:	ea43 3206 	orr.w	r2, r3, r6, lsl #12
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  402802:	6983      	ldr	r3, [r0, #24]
  402804:	f013 0f04 	tst.w	r3, #4
  402808:	d0fb      	beq.n	402802 <rtc_set_date+0x7e>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40280a:	6803      	ldr	r3, [r0, #0]
  40280c:	f043 0302 	orr.w	r3, r3, #2
  402810:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  402812:	6983      	ldr	r3, [r0, #24]
  402814:	f013 0f01 	tst.w	r3, #1
  402818:	d0fb      	beq.n	402812 <rtc_set_date+0x8e>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40281a:	2301      	movs	r3, #1
  40281c:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  40281e:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  402820:	6803      	ldr	r3, [r0, #0]
  402822:	f023 0302 	bic.w	r3, r3, #2
  402826:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  402828:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40282a:	f000 0002 	and.w	r0, r0, #2
  40282e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402830:	cccccccd 	.word	0xcccccccd
  402834:	10624dd3 	.word	0x10624dd3
  402838:	51eb851f 	.word	0x51eb851f

0040283c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40283c:	b508      	push	{r3, lr}
  40283e:	2015      	movs	r0, #21
  402840:	4b01      	ldr	r3, [pc, #4]	; (402848 <spi_enable_clock+0xc>)
  402842:	4798      	blx	r3
  402844:	bd08      	pop	{r3, pc}
  402846:	bf00      	nop
  402848:	004025b5 	.word	0x004025b5

0040284c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40284c:	6843      	ldr	r3, [r0, #4]
  40284e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  402852:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  402854:	6843      	ldr	r3, [r0, #4]
  402856:	0409      	lsls	r1, r1, #16
  402858:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40285c:	430b      	orrs	r3, r1
  40285e:	6043      	str	r3, [r0, #4]
  402860:	4770      	bx	lr
  402862:	bf00      	nop

00402864 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  402864:	6843      	ldr	r3, [r0, #4]
  402866:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40286a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40286c:	6843      	ldr	r3, [r0, #4]
  40286e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  402872:	6041      	str	r1, [r0, #4]
  402874:	4770      	bx	lr
  402876:	bf00      	nop

00402878 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  402878:	b132      	cbz	r2, 402888 <spi_set_clock_polarity+0x10>
  40287a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40287e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402880:	f043 0301 	orr.w	r3, r3, #1
  402884:	6303      	str	r3, [r0, #48]	; 0x30
  402886:	4770      	bx	lr
  402888:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40288c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40288e:	f023 0301 	bic.w	r3, r3, #1
  402892:	6303      	str	r3, [r0, #48]	; 0x30
  402894:	4770      	bx	lr
  402896:	bf00      	nop

00402898 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  402898:	b132      	cbz	r2, 4028a8 <spi_set_clock_phase+0x10>
  40289a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40289e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028a0:	f043 0302 	orr.w	r3, r3, #2
  4028a4:	6303      	str	r3, [r0, #48]	; 0x30
  4028a6:	4770      	bx	lr
  4028a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4028ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028ae:	f023 0302 	bic.w	r3, r3, #2
  4028b2:	6303      	str	r3, [r0, #48]	; 0x30
  4028b4:	4770      	bx	lr
  4028b6:	bf00      	nop

004028b8 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4028b8:	2a04      	cmp	r2, #4
  4028ba:	d10a      	bne.n	4028d2 <spi_configure_cs_behavior+0x1a>
  4028bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4028c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028c2:	f023 0308 	bic.w	r3, r3, #8
  4028c6:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4028c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028ca:	f043 0304 	orr.w	r3, r3, #4
  4028ce:	6303      	str	r3, [r0, #48]	; 0x30
  4028d0:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4028d2:	b952      	cbnz	r2, 4028ea <spi_configure_cs_behavior+0x32>
  4028d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4028d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028da:	f023 0308 	bic.w	r3, r3, #8
  4028de:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4028e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028e2:	f023 0304 	bic.w	r3, r3, #4
  4028e6:	6303      	str	r3, [r0, #48]	; 0x30
  4028e8:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4028ea:	2a08      	cmp	r2, #8
  4028ec:	d105      	bne.n	4028fa <spi_configure_cs_behavior+0x42>
  4028ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4028f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028f4:	f043 0308 	orr.w	r3, r3, #8
  4028f8:	6303      	str	r3, [r0, #48]	; 0x30
  4028fa:	4770      	bx	lr

004028fc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4028fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  402900:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  402906:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  402908:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40290a:	431a      	orrs	r2, r3
  40290c:	630a      	str	r2, [r1, #48]	; 0x30
  40290e:	4770      	bx	lr

00402910 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  402910:	1e43      	subs	r3, r0, #1
  402912:	4419      	add	r1, r3
  402914:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  402918:	1e43      	subs	r3, r0, #1
  40291a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40291c:	bf94      	ite	ls
  40291e:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  402920:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  402924:	4770      	bx	lr
  402926:	bf00      	nop

00402928 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  402928:	b16a      	cbz	r2, 402946 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  40292a:	b410      	push	{r4}
  40292c:	4614      	mov	r4, r2
  40292e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  402932:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402934:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  402938:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40293a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40293c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  402940:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  402942:	2000      	movs	r0, #0
  402944:	e002      	b.n	40294c <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  402946:	f04f 30ff 	mov.w	r0, #4294967295
  40294a:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  40294c:	bc10      	pop	{r4}
  40294e:	4770      	bx	lr

00402950 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  402950:	b410      	push	{r4}
  402952:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  402956:	6b08      	ldr	r0, [r1, #48]	; 0x30
  402958:	b280      	uxth	r0, r0
  40295a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40295c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40295e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  402962:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  402966:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  402968:	bc10      	pop	{r4}
  40296a:	4770      	bx	lr

0040296c <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40296c:	4b2b      	ldr	r3, [pc, #172]	; (402a1c <twi_set_speed+0xb0>)
  40296e:	4299      	cmp	r1, r3
  402970:	d849      	bhi.n	402a06 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  402972:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  402976:	4299      	cmp	r1, r3
  402978:	d92b      	bls.n	4029d2 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40297a:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40297c:	4c28      	ldr	r4, [pc, #160]	; (402a20 <twi_set_speed+0xb4>)
  40297e:	fba4 3402 	umull	r3, r4, r4, r2
  402982:	0ba4      	lsrs	r4, r4, #14
  402984:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  402986:	4b27      	ldr	r3, [pc, #156]	; (402a24 <twi_set_speed+0xb8>)
  402988:	440b      	add	r3, r1
  40298a:	009b      	lsls	r3, r3, #2
  40298c:	fbb2 f2f3 	udiv	r2, r2, r3
  402990:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402992:	2cff      	cmp	r4, #255	; 0xff
  402994:	d939      	bls.n	402a0a <twi_set_speed+0x9e>
  402996:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  402998:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40299a:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40299c:	2cff      	cmp	r4, #255	; 0xff
  40299e:	d902      	bls.n	4029a6 <twi_set_speed+0x3a>
  4029a0:	2b07      	cmp	r3, #7
  4029a2:	d1f9      	bne.n	402998 <twi_set_speed+0x2c>
  4029a4:	e00a      	b.n	4029bc <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4029a6:	2aff      	cmp	r2, #255	; 0xff
  4029a8:	d908      	bls.n	4029bc <twi_set_speed+0x50>
  4029aa:	2b06      	cmp	r3, #6
  4029ac:	d900      	bls.n	4029b0 <twi_set_speed+0x44>
  4029ae:	e005      	b.n	4029bc <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  4029b0:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4029b2:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4029b4:	2aff      	cmp	r2, #255	; 0xff
  4029b6:	d901      	bls.n	4029bc <twi_set_speed+0x50>
  4029b8:	2b06      	cmp	r3, #6
  4029ba:	d9f9      	bls.n	4029b0 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4029bc:	0212      	lsls	r2, r2, #8
  4029be:	b292      	uxth	r2, r2
  4029c0:	041b      	lsls	r3, r3, #16
  4029c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4029c6:	431a      	orrs	r2, r3
  4029c8:	b2e4      	uxtb	r4, r4
  4029ca:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4029cc:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4029ce:	2000      	movs	r0, #0
  4029d0:	e021      	b.n	402a16 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4029d2:	0049      	lsls	r1, r1, #1
  4029d4:	fbb2 f2f1 	udiv	r2, r2, r1
  4029d8:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4029da:	2aff      	cmp	r2, #255	; 0xff
  4029dc:	d907      	bls.n	4029ee <twi_set_speed+0x82>
  4029de:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4029e0:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4029e2:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4029e4:	2aff      	cmp	r2, #255	; 0xff
  4029e6:	d903      	bls.n	4029f0 <twi_set_speed+0x84>
  4029e8:	2b07      	cmp	r3, #7
  4029ea:	d1f9      	bne.n	4029e0 <twi_set_speed+0x74>
  4029ec:	e000      	b.n	4029f0 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4029ee:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4029f0:	0211      	lsls	r1, r2, #8
  4029f2:	b289      	uxth	r1, r1
  4029f4:	041b      	lsls	r3, r3, #16
  4029f6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4029fa:	430b      	orrs	r3, r1
  4029fc:	b2d2      	uxtb	r2, r2
  4029fe:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  402a00:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  402a02:	2000      	movs	r0, #0
}
  402a04:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  402a06:	2001      	movs	r0, #1
  402a08:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402a0a:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  402a0c:	bf88      	it	hi
  402a0e:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402a10:	d8ce      	bhi.n	4029b0 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  402a12:	2300      	movs	r3, #0
  402a14:	e7d2      	b.n	4029bc <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  402a16:	bc10      	pop	{r4}
  402a18:	4770      	bx	lr
  402a1a:	bf00      	nop
  402a1c:	00061a80 	.word	0x00061a80
  402a20:	057619f1 	.word	0x057619f1
  402a24:	3ffd1200 	.word	0x3ffd1200

00402a28 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  402a28:	b538      	push	{r3, r4, r5, lr}
  402a2a:	4604      	mov	r4, r0
  402a2c:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  402a2e:	f04f 33ff 	mov.w	r3, #4294967295
  402a32:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  402a34:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  402a36:	2380      	movs	r3, #128	; 0x80
  402a38:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  402a3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  402a3c:	2308      	movs	r3, #8
  402a3e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  402a40:	2320      	movs	r3, #32
  402a42:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  402a44:	2304      	movs	r3, #4
  402a46:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  402a48:	680a      	ldr	r2, [r1, #0]
  402a4a:	6849      	ldr	r1, [r1, #4]
  402a4c:	4b05      	ldr	r3, [pc, #20]	; (402a64 <twi_master_init+0x3c>)
  402a4e:	4798      	blx	r3
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  402a50:	2801      	cmp	r0, #1
  402a52:	bf14      	ite	ne
  402a54:	2000      	movne	r0, #0
  402a56:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  402a58:	7a6b      	ldrb	r3, [r5, #9]
  402a5a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  402a5c:	bf04      	itt	eq
  402a5e:	2340      	moveq	r3, #64	; 0x40
  402a60:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  402a62:	bd38      	pop	{r3, r4, r5, pc}
  402a64:	0040296d 	.word	0x0040296d

00402a68 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402a68:	460a      	mov	r2, r1
  402a6a:	b159      	cbz	r1, 402a84 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  402a6c:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  402a6e:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  402a70:	bfc4      	itt	gt
  402a72:	7841      	ldrbgt	r1, [r0, #1]
  402a74:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  402a78:	2a02      	cmp	r2, #2
  402a7a:	dd05      	ble.n	402a88 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  402a7c:	7880      	ldrb	r0, [r0, #2]
  402a7e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402a82:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402a84:	2000      	movs	r0, #0
  402a86:	4770      	bx	lr
  402a88:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  402a8a:	4770      	bx	lr

00402a8c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  402a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  402a90:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  402a92:	2c00      	cmp	r4, #0
  402a94:	d045      	beq.n	402b22 <twi_master_read+0x96>
  402a96:	460b      	mov	r3, r1
  402a98:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  402a9a:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  402a9c:	2000      	movs	r0, #0
  402a9e:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  402aa0:	684a      	ldr	r2, [r1, #4]
  402aa2:	0212      	lsls	r2, r2, #8
  402aa4:	f402 7240 	and.w	r2, r2, #768	; 0x300
  402aa8:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  402aac:	7c1a      	ldrb	r2, [r3, #16]
  402aae:	0412      	lsls	r2, r2, #16
  402ab0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  402ab4:	430a      	orrs	r2, r1
  402ab6:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  402ab8:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  402aba:	6859      	ldr	r1, [r3, #4]
  402abc:	4618      	mov	r0, r3
  402abe:	4b27      	ldr	r3, [pc, #156]	; (402b5c <twi_master_read+0xd0>)
  402ac0:	4798      	blx	r3
  402ac2:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  402ac4:	2c01      	cmp	r4, #1
  402ac6:	d104      	bne.n	402ad2 <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  402ac8:	2303      	movs	r3, #3
  402aca:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  402acc:	f04f 0e01 	mov.w	lr, #1
  402ad0:	e033      	b.n	402b3a <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  402ad2:	2301      	movs	r3, #1
  402ad4:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  402ad6:	f04f 0e00 	mov.w	lr, #0
  402ada:	e02e      	b.n	402b3a <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  402adc:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  402ade:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  402ae0:	f413 7f80 	tst.w	r3, #256	; 0x100
  402ae4:	d120      	bne.n	402b28 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  402ae6:	1e51      	subs	r1, r2, #1
  402ae8:	b30a      	cbz	r2, 402b2e <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  402aea:	2c01      	cmp	r4, #1
  402aec:	d106      	bne.n	402afc <twi_master_read+0x70>
  402aee:	f1be 0f00 	cmp.w	lr, #0
  402af2:	d12f      	bne.n	402b54 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  402af4:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  402af8:	46e6      	mov	lr, ip
  402afa:	e02b      	b.n	402b54 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  402afc:	f013 0f02 	tst.w	r3, #2
  402b00:	d005      	beq.n	402b0e <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  402b02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402b04:	7033      	strb	r3, [r6, #0]

		cnt--;
  402b06:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  402b08:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  402b0a:	463a      	mov	r2, r7
  402b0c:	e000      	b.n	402b10 <twi_master_read+0x84>
  402b0e:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  402b10:	2c00      	cmp	r4, #0
  402b12:	d1e4      	bne.n	402ade <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  402b14:	6a2b      	ldr	r3, [r5, #32]
  402b16:	f013 0f01 	tst.w	r3, #1
  402b1a:	d0fb      	beq.n	402b14 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  402b1c:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  402b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  402b22:	2001      	movs	r0, #1
  402b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  402b28:	2005      	movs	r0, #5
  402b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  402b2e:	2009      	movs	r0, #9
  402b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  402b34:	2005      	movs	r0, #5
  402b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  402b3a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  402b3c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  402b40:	d1f8      	bne.n	402b34 <twi_master_read+0xa8>
  402b42:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  402b46:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  402b4a:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  402b4e:	f04f 0c01 	mov.w	ip, #1
  402b52:	e7ca      	b.n	402aea <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  402b54:	f013 0f02 	tst.w	r3, #2
  402b58:	d0c0      	beq.n	402adc <twi_master_read+0x50>
  402b5a:	e7d2      	b.n	402b02 <twi_master_read+0x76>
  402b5c:	00402a69 	.word	0x00402a69

00402b60 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402b60:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402b62:	23ac      	movs	r3, #172	; 0xac
  402b64:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402b66:	680b      	ldr	r3, [r1, #0]
  402b68:	684a      	ldr	r2, [r1, #4]
  402b6a:	fbb3 f3f2 	udiv	r3, r3, r2
  402b6e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402b70:	1e5c      	subs	r4, r3, #1
  402b72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402b76:	4294      	cmp	r4, r2
  402b78:	d80a      	bhi.n	402b90 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  402b7a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402b7c:	688b      	ldr	r3, [r1, #8]
  402b7e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402b80:	f240 2302 	movw	r3, #514	; 0x202
  402b84:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402b88:	2350      	movs	r3, #80	; 0x50
  402b8a:	6003      	str	r3, [r0, #0]

	return 0;
  402b8c:	2000      	movs	r0, #0
  402b8e:	e000      	b.n	402b92 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402b90:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402b92:	bc10      	pop	{r4}
  402b94:	4770      	bx	lr
  402b96:	bf00      	nop

00402b98 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402b98:	2340      	movs	r3, #64	; 0x40
  402b9a:	6003      	str	r3, [r0, #0]
  402b9c:	4770      	bx	lr
  402b9e:	bf00      	nop

00402ba0 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402ba0:	2310      	movs	r3, #16
  402ba2:	6003      	str	r3, [r0, #0]
  402ba4:	4770      	bx	lr
  402ba6:	bf00      	nop

00402ba8 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  402ba8:	6940      	ldr	r0, [r0, #20]
}
  402baa:	4770      	bx	lr

00402bac <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402bac:	6943      	ldr	r3, [r0, #20]
  402bae:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402bb2:	bf1a      	itte	ne
  402bb4:	61c1      	strne	r1, [r0, #28]
	return 0;
  402bb6:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402bb8:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402bba:	4770      	bx	lr

00402bbc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402bbc:	6943      	ldr	r3, [r0, #20]
  402bbe:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402bc2:	bf1d      	ittte	ne
  402bc4:	6983      	ldrne	r3, [r0, #24]
  402bc6:	700b      	strbne	r3, [r1, #0]
	return 0;
  402bc8:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402bca:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402bcc:	4770      	bx	lr
  402bce:	bf00      	nop

00402bd0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402bd0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402bd2:	010c      	lsls	r4, r1, #4
  402bd4:	4294      	cmp	r4, r2
  402bd6:	d90f      	bls.n	402bf8 <usart_set_async_baudrate+0x28>
  402bd8:	e01a      	b.n	402c10 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  402bda:	6841      	ldr	r1, [r0, #4]
  402bdc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402be0:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402be2:	0412      	lsls	r2, r2, #16
  402be4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402be8:	431a      	orrs	r2, r3
  402bea:	6202      	str	r2, [r0, #32]

	return 0;
  402bec:	2000      	movs	r0, #0
  402bee:	e01c      	b.n	402c2a <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  402bf0:	2001      	movs	r0, #1
  402bf2:	e01a      	b.n	402c2a <usart_set_async_baudrate+0x5a>
  402bf4:	2001      	movs	r0, #1
  402bf6:	e018      	b.n	402c2a <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402bf8:	0863      	lsrs	r3, r4, #1
  402bfa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402bfe:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  402c02:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402c04:	1e5c      	subs	r4, r3, #1
  402c06:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402c0a:	428c      	cmp	r4, r1
  402c0c:	d9e9      	bls.n	402be2 <usart_set_async_baudrate+0x12>
  402c0e:	e7ef      	b.n	402bf0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402c10:	00c9      	lsls	r1, r1, #3
  402c12:	084b      	lsrs	r3, r1, #1
  402c14:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402c18:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  402c1c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402c1e:	1e5c      	subs	r4, r3, #1
  402c20:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402c24:	428c      	cmp	r4, r1
  402c26:	d8e5      	bhi.n	402bf4 <usart_set_async_baudrate+0x24>
  402c28:	e7d7      	b.n	402bda <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  402c2a:	bc10      	pop	{r4}
  402c2c:	4770      	bx	lr
  402c2e:	bf00      	nop

00402c30 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402c30:	4b0a      	ldr	r3, [pc, #40]	; (402c5c <usart_reset+0x2c>)
  402c32:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  402c36:	2300      	movs	r3, #0
  402c38:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  402c3a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402c3c:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402c3e:	2388      	movs	r3, #136	; 0x88
  402c40:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402c42:	2324      	movs	r3, #36	; 0x24
  402c44:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  402c46:	f44f 7380 	mov.w	r3, #256	; 0x100
  402c4a:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  402c4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402c50:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
  402c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  402c56:	6003      	str	r3, [r0, #0]
  402c58:	4770      	bx	lr
  402c5a:	bf00      	nop
  402c5c:	55534100 	.word	0x55534100

00402c60 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402c60:	b570      	push	{r4, r5, r6, lr}
  402c62:	4605      	mov	r5, r0
  402c64:	460c      	mov	r4, r1
  402c66:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402c68:	4b0f      	ldr	r3, [pc, #60]	; (402ca8 <usart_init_rs232+0x48>)
  402c6a:	4798      	blx	r3

	ul_reg_val = 0;
  402c6c:	2200      	movs	r2, #0
  402c6e:	4b0f      	ldr	r3, [pc, #60]	; (402cac <usart_init_rs232+0x4c>)
  402c70:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  402c72:	b19c      	cbz	r4, 402c9c <usart_init_rs232+0x3c>
  402c74:	4632      	mov	r2, r6
  402c76:	6821      	ldr	r1, [r4, #0]
  402c78:	4628      	mov	r0, r5
  402c7a:	4b0d      	ldr	r3, [pc, #52]	; (402cb0 <usart_init_rs232+0x50>)
  402c7c:	4798      	blx	r3
  402c7e:	4602      	mov	r2, r0
  402c80:	b970      	cbnz	r0, 402ca0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402c82:	6861      	ldr	r1, [r4, #4]
  402c84:	68a3      	ldr	r3, [r4, #8]
  402c86:	4319      	orrs	r1, r3
  402c88:	6923      	ldr	r3, [r4, #16]
  402c8a:	4319      	orrs	r1, r3
  402c8c:	68e3      	ldr	r3, [r4, #12]
  402c8e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402c90:	4906      	ldr	r1, [pc, #24]	; (402cac <usart_init_rs232+0x4c>)
  402c92:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  402c94:	6869      	ldr	r1, [r5, #4]
  402c96:	430b      	orrs	r3, r1
  402c98:	606b      	str	r3, [r5, #4]

	return 0;
  402c9a:	e002      	b.n	402ca2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  402c9c:	2201      	movs	r2, #1
  402c9e:	e000      	b.n	402ca2 <usart_init_rs232+0x42>
  402ca0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  402ca2:	4610      	mov	r0, r2
  402ca4:	bd70      	pop	{r4, r5, r6, pc}
  402ca6:	bf00      	nop
  402ca8:	00402c31 	.word	0x00402c31
  402cac:	20000f88 	.word	0x20000f88
  402cb0:	00402bd1 	.word	0x00402bd1

00402cb4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  402cb4:	2340      	movs	r3, #64	; 0x40
  402cb6:	6003      	str	r3, [r0, #0]
  402cb8:	4770      	bx	lr
  402cba:	bf00      	nop

00402cbc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  402cbc:	2310      	movs	r3, #16
  402cbe:	6003      	str	r3, [r0, #0]
  402cc0:	4770      	bx	lr
  402cc2:	bf00      	nop

00402cc4 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  402cc4:	6940      	ldr	r0, [r0, #20]
}
  402cc6:	4770      	bx	lr

00402cc8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402cc8:	6943      	ldr	r3, [r0, #20]
  402cca:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402cce:	bf1d      	ittte	ne
  402cd0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402cd4:	61c1      	strne	r1, [r0, #28]
	return 0;
  402cd6:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  402cd8:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  402cda:	4770      	bx	lr

00402cdc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402cdc:	6943      	ldr	r3, [r0, #20]
  402cde:	f013 0f01 	tst.w	r3, #1
  402ce2:	d005      	beq.n	402cf0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402ce4:	6983      	ldr	r3, [r0, #24]
  402ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402cea:	600b      	str	r3, [r1, #0]

	return 0;
  402cec:	2000      	movs	r0, #0
  402cee:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  402cf0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  402cf2:	4770      	bx	lr

00402cf4 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402cf8:	6043      	str	r3, [r0, #4]
  402cfa:	4770      	bx	lr

00402cfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402cfc:	e7fe      	b.n	402cfc <Dummy_Handler>
  402cfe:	bf00      	nop

00402d00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402d00:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402d02:	4b20      	ldr	r3, [pc, #128]	; (402d84 <Reset_Handler+0x84>)
  402d04:	4a20      	ldr	r2, [pc, #128]	; (402d88 <Reset_Handler+0x88>)
  402d06:	429a      	cmp	r2, r3
  402d08:	d912      	bls.n	402d30 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  402d0a:	4b20      	ldr	r3, [pc, #128]	; (402d8c <Reset_Handler+0x8c>)
  402d0c:	4a1d      	ldr	r2, [pc, #116]	; (402d84 <Reset_Handler+0x84>)
  402d0e:	429a      	cmp	r2, r3
  402d10:	d21e      	bcs.n	402d50 <Reset_Handler+0x50>
  402d12:	4611      	mov	r1, r2
  402d14:	3b01      	subs	r3, #1
  402d16:	1a9b      	subs	r3, r3, r2
  402d18:	f023 0303 	bic.w	r3, r3, #3
  402d1c:	3304      	adds	r3, #4
  402d1e:	4a1a      	ldr	r2, [pc, #104]	; (402d88 <Reset_Handler+0x88>)
  402d20:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402d22:	f852 0b04 	ldr.w	r0, [r2], #4
  402d26:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  402d2a:	429a      	cmp	r2, r3
  402d2c:	d1f9      	bne.n	402d22 <Reset_Handler+0x22>
  402d2e:	e00f      	b.n	402d50 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402d30:	4b14      	ldr	r3, [pc, #80]	; (402d84 <Reset_Handler+0x84>)
  402d32:	4a15      	ldr	r2, [pc, #84]	; (402d88 <Reset_Handler+0x88>)
  402d34:	429a      	cmp	r2, r3
  402d36:	d20b      	bcs.n	402d50 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402d38:	4b14      	ldr	r3, [pc, #80]	; (402d8c <Reset_Handler+0x8c>)
  402d3a:	4a12      	ldr	r2, [pc, #72]	; (402d84 <Reset_Handler+0x84>)
  402d3c:	1a9a      	subs	r2, r3, r2
  402d3e:	4814      	ldr	r0, [pc, #80]	; (402d90 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402d40:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402d42:	b12a      	cbz	r2, 402d50 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  402d44:	f851 2904 	ldr.w	r2, [r1], #-4
  402d48:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402d4c:	4281      	cmp	r1, r0
  402d4e:	d1f9      	bne.n	402d44 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402d50:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402d52:	4b10      	ldr	r3, [pc, #64]	; (402d94 <Reset_Handler+0x94>)
  402d54:	4a10      	ldr	r2, [pc, #64]	; (402d98 <Reset_Handler+0x98>)
  402d56:	429a      	cmp	r2, r3
  402d58:	d20b      	bcs.n	402d72 <Reset_Handler+0x72>
  402d5a:	1d13      	adds	r3, r2, #4
  402d5c:	4a0f      	ldr	r2, [pc, #60]	; (402d9c <Reset_Handler+0x9c>)
  402d5e:	1ad2      	subs	r2, r2, r3
  402d60:	f022 0203 	bic.w	r2, r2, #3
  402d64:	441a      	add	r2, r3
  402d66:	3b04      	subs	r3, #4
		*pDest++ = 0;
  402d68:	2100      	movs	r1, #0
  402d6a:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402d6e:	429a      	cmp	r2, r3
  402d70:	d1fb      	bne.n	402d6a <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  402d72:	4b0b      	ldr	r3, [pc, #44]	; (402da0 <Reset_Handler+0xa0>)
  402d74:	4a0b      	ldr	r2, [pc, #44]	; (402da4 <Reset_Handler+0xa4>)
  402d76:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  402d78:	4b0b      	ldr	r3, [pc, #44]	; (402da8 <Reset_Handler+0xa8>)
  402d7a:	4798      	blx	r3

	/* Branch to main function */
	main();
  402d7c:	4b0b      	ldr	r3, [pc, #44]	; (402dac <Reset_Handler+0xac>)
  402d7e:	4798      	blx	r3
  402d80:	e7fe      	b.n	402d80 <Reset_Handler+0x80>
  402d82:	bf00      	nop
  402d84:	20000000 	.word	0x20000000
  402d88:	00404834 	.word	0x00404834
  402d8c:	20000c94 	.word	0x20000c94
  402d90:	00404830 	.word	0x00404830
  402d94:	20001040 	.word	0x20001040
  402d98:	20000c94 	.word	0x20000c94
  402d9c:	20001043 	.word	0x20001043
  402da0:	e000ed00 	.word	0xe000ed00
  402da4:	00400000 	.word	0x00400000
  402da8:	00403d5d 	.word	0x00403d5d
  402dac:	00403019 	.word	0x00403019

00402db0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402db0:	4b3d      	ldr	r3, [pc, #244]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402db4:	f003 0303 	and.w	r3, r3, #3
  402db8:	2b03      	cmp	r3, #3
  402dba:	d85d      	bhi.n	402e78 <SystemCoreClockUpdate+0xc8>
  402dbc:	e8df f003 	tbb	[pc, r3]
  402dc0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402dc4:	4b39      	ldr	r3, [pc, #228]	; (402eac <SystemCoreClockUpdate+0xfc>)
  402dc6:	695b      	ldr	r3, [r3, #20]
  402dc8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402dcc:	bf14      	ite	ne
  402dce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402dd2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402dd6:	4b36      	ldr	r3, [pc, #216]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402dd8:	601a      	str	r2, [r3, #0]
  402dda:	e04d      	b.n	402e78 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402ddc:	4b32      	ldr	r3, [pc, #200]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402dde:	6a1b      	ldr	r3, [r3, #32]
  402de0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402de4:	d003      	beq.n	402dee <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402de6:	4a33      	ldr	r2, [pc, #204]	; (402eb4 <SystemCoreClockUpdate+0x104>)
  402de8:	4b31      	ldr	r3, [pc, #196]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402dea:	601a      	str	r2, [r3, #0]
  402dec:	e044      	b.n	402e78 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402dee:	4a32      	ldr	r2, [pc, #200]	; (402eb8 <SystemCoreClockUpdate+0x108>)
  402df0:	4b2f      	ldr	r3, [pc, #188]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402df2:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402df4:	4b2c      	ldr	r3, [pc, #176]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402df6:	6a1b      	ldr	r3, [r3, #32]
  402df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402dfc:	2b10      	cmp	r3, #16
  402dfe:	d002      	beq.n	402e06 <SystemCoreClockUpdate+0x56>
  402e00:	2b20      	cmp	r3, #32
  402e02:	d004      	beq.n	402e0e <SystemCoreClockUpdate+0x5e>
  402e04:	e038      	b.n	402e78 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402e06:	4a2d      	ldr	r2, [pc, #180]	; (402ebc <SystemCoreClockUpdate+0x10c>)
  402e08:	4b29      	ldr	r3, [pc, #164]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e0a:	601a      	str	r2, [r3, #0]
			break;
  402e0c:	e034      	b.n	402e78 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402e0e:	4a29      	ldr	r2, [pc, #164]	; (402eb4 <SystemCoreClockUpdate+0x104>)
  402e10:	4b27      	ldr	r3, [pc, #156]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e12:	601a      	str	r2, [r3, #0]
			break;
  402e14:	e030      	b.n	402e78 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402e16:	4b24      	ldr	r3, [pc, #144]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402e18:	6a1b      	ldr	r3, [r3, #32]
  402e1a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402e1e:	d003      	beq.n	402e28 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402e20:	4a24      	ldr	r2, [pc, #144]	; (402eb4 <SystemCoreClockUpdate+0x104>)
  402e22:	4b23      	ldr	r3, [pc, #140]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e24:	601a      	str	r2, [r3, #0]
  402e26:	e012      	b.n	402e4e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402e28:	4a23      	ldr	r2, [pc, #140]	; (402eb8 <SystemCoreClockUpdate+0x108>)
  402e2a:	4b21      	ldr	r3, [pc, #132]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e2c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402e2e:	4b1e      	ldr	r3, [pc, #120]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402e30:	6a1b      	ldr	r3, [r3, #32]
  402e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e36:	2b10      	cmp	r3, #16
  402e38:	d002      	beq.n	402e40 <SystemCoreClockUpdate+0x90>
  402e3a:	2b20      	cmp	r3, #32
  402e3c:	d004      	beq.n	402e48 <SystemCoreClockUpdate+0x98>
  402e3e:	e006      	b.n	402e4e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402e40:	4a1e      	ldr	r2, [pc, #120]	; (402ebc <SystemCoreClockUpdate+0x10c>)
  402e42:	4b1b      	ldr	r3, [pc, #108]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e44:	601a      	str	r2, [r3, #0]
					break;
  402e46:	e002      	b.n	402e4e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402e48:	4a1a      	ldr	r2, [pc, #104]	; (402eb4 <SystemCoreClockUpdate+0x104>)
  402e4a:	4b19      	ldr	r3, [pc, #100]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e4c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402e4e:	4b16      	ldr	r3, [pc, #88]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e52:	f003 0303 	and.w	r3, r3, #3
  402e56:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402e58:	4a13      	ldr	r2, [pc, #76]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402e5a:	bf07      	ittee	eq
  402e5c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402e5e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402e60:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402e62:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402e64:	4812      	ldr	r0, [pc, #72]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e66:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402e6a:	6803      	ldr	r3, [r0, #0]
  402e6c:	fb01 3303 	mla	r3, r1, r3, r3
  402e70:	b2d2      	uxtb	r2, r2
  402e72:	fbb3 f3f2 	udiv	r3, r3, r2
  402e76:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402e78:	4b0b      	ldr	r3, [pc, #44]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e80:	2b70      	cmp	r3, #112	; 0x70
  402e82:	d107      	bne.n	402e94 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402e84:	4a0a      	ldr	r2, [pc, #40]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e86:	6813      	ldr	r3, [r2, #0]
  402e88:	490d      	ldr	r1, [pc, #52]	; (402ec0 <SystemCoreClockUpdate+0x110>)
  402e8a:	fba1 1303 	umull	r1, r3, r1, r3
  402e8e:	085b      	lsrs	r3, r3, #1
  402e90:	6013      	str	r3, [r2, #0]
  402e92:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402e94:	4b04      	ldr	r3, [pc, #16]	; (402ea8 <SystemCoreClockUpdate+0xf8>)
  402e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402e98:	4905      	ldr	r1, [pc, #20]	; (402eb0 <SystemCoreClockUpdate+0x100>)
  402e9a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  402e9e:	680b      	ldr	r3, [r1, #0]
  402ea0:	40d3      	lsrs	r3, r2
  402ea2:	600b      	str	r3, [r1, #0]
  402ea4:	4770      	bx	lr
  402ea6:	bf00      	nop
  402ea8:	400e0400 	.word	0x400e0400
  402eac:	400e1410 	.word	0x400e1410
  402eb0:	20000450 	.word	0x20000450
  402eb4:	00b71b00 	.word	0x00b71b00
  402eb8:	003d0900 	.word	0x003d0900
  402ebc:	007a1200 	.word	0x007a1200
  402ec0:	aaaaaaab 	.word	0xaaaaaaab

00402ec4 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402ec4:	4b1a      	ldr	r3, [pc, #104]	; (402f30 <system_init_flash+0x6c>)
  402ec6:	4298      	cmp	r0, r3
  402ec8:	d807      	bhi.n	402eda <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402eca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  402ece:	4a19      	ldr	r2, [pc, #100]	; (402f34 <system_init_flash+0x70>)
  402ed0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402ed2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402ed6:	6013      	str	r3, [r2, #0]
  402ed8:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402eda:	4b17      	ldr	r3, [pc, #92]	; (402f38 <system_init_flash+0x74>)
  402edc:	4298      	cmp	r0, r3
  402ede:	d806      	bhi.n	402eee <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402ee0:	4b16      	ldr	r3, [pc, #88]	; (402f3c <system_init_flash+0x78>)
  402ee2:	4a14      	ldr	r2, [pc, #80]	; (402f34 <system_init_flash+0x70>)
  402ee4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402ee6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402eea:	6013      	str	r3, [r2, #0]
  402eec:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402eee:	4b14      	ldr	r3, [pc, #80]	; (402f40 <system_init_flash+0x7c>)
  402ef0:	4298      	cmp	r0, r3
  402ef2:	d806      	bhi.n	402f02 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402ef4:	4b13      	ldr	r3, [pc, #76]	; (402f44 <system_init_flash+0x80>)
  402ef6:	4a0f      	ldr	r2, [pc, #60]	; (402f34 <system_init_flash+0x70>)
  402ef8:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402efa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402efe:	6013      	str	r3, [r2, #0]
  402f00:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402f02:	4b11      	ldr	r3, [pc, #68]	; (402f48 <system_init_flash+0x84>)
  402f04:	4298      	cmp	r0, r3
  402f06:	d806      	bhi.n	402f16 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402f08:	4b10      	ldr	r3, [pc, #64]	; (402f4c <system_init_flash+0x88>)
  402f0a:	4a0a      	ldr	r2, [pc, #40]	; (402f34 <system_init_flash+0x70>)
  402f0c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402f0e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402f12:	6013      	str	r3, [r2, #0]
  402f14:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402f16:	4b0e      	ldr	r3, [pc, #56]	; (402f50 <system_init_flash+0x8c>)
  402f18:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402f1a:	bf94      	ite	ls
  402f1c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402f20:	4b0c      	ldrhi	r3, [pc, #48]	; (402f54 <system_init_flash+0x90>)
  402f22:	4a04      	ldr	r2, [pc, #16]	; (402f34 <system_init_flash+0x70>)
  402f24:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402f26:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402f2a:	6013      	str	r3, [r2, #0]
  402f2c:	4770      	bx	lr
  402f2e:	bf00      	nop
  402f30:	01312cff 	.word	0x01312cff
  402f34:	400e0a00 	.word	0x400e0a00
  402f38:	026259ff 	.word	0x026259ff
  402f3c:	04000100 	.word	0x04000100
  402f40:	039386ff 	.word	0x039386ff
  402f44:	04000200 	.word	0x04000200
  402f48:	04c4b3ff 	.word	0x04c4b3ff
  402f4c:	04000300 	.word	0x04000300
  402f50:	05f5e0ff 	.word	0x05f5e0ff
  402f54:	04000500 	.word	0x04000500

00402f58 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402f58:	4b09      	ldr	r3, [pc, #36]	; (402f80 <_sbrk+0x28>)
  402f5a:	681b      	ldr	r3, [r3, #0]
  402f5c:	b913      	cbnz	r3, 402f64 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402f5e:	4a09      	ldr	r2, [pc, #36]	; (402f84 <_sbrk+0x2c>)
  402f60:	4b07      	ldr	r3, [pc, #28]	; (402f80 <_sbrk+0x28>)
  402f62:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402f64:	4b06      	ldr	r3, [pc, #24]	; (402f80 <_sbrk+0x28>)
  402f66:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402f68:	181a      	adds	r2, r3, r0
  402f6a:	4907      	ldr	r1, [pc, #28]	; (402f88 <_sbrk+0x30>)
  402f6c:	4291      	cmp	r1, r2
  402f6e:	db04      	blt.n	402f7a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402f70:	4610      	mov	r0, r2
  402f72:	4a03      	ldr	r2, [pc, #12]	; (402f80 <_sbrk+0x28>)
  402f74:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402f76:	4618      	mov	r0, r3
  402f78:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  402f7a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  402f7e:	4770      	bx	lr
  402f80:	20000f8c 	.word	0x20000f8c
  402f84:	20004040 	.word	0x20004040
  402f88:	20013ffc 	.word	0x20013ffc

00402f8c <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402f8c:	2807      	cmp	r0, #7
  402f8e:	d80d      	bhi.n	402fac <f_mount+0x20>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
  402f90:	4b07      	ldr	r3, [pc, #28]	; (402fb0 <f_mount+0x24>)
  402f92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (rfs) {
  402f96:	b10b      	cbz	r3, 402f9c <f_mount+0x10>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  402f98:	2200      	movs	r2, #0
  402f9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  402f9c:	b109      	cbz	r1, 402fa2 <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  402f9e:	2300      	movs	r3, #0
  402fa0:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  402fa2:	4b03      	ldr	r3, [pc, #12]	; (402fb0 <f_mount+0x24>)
  402fa4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

	return FR_OK;
  402fa8:	2000      	movs	r0, #0
  402faa:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
  402fac:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402fae:	4770      	bx	lr
  402fb0:	20000f90 	.word	0x20000f90

00402fb4 <button_callback>:
	}
}

void button_callback (tButtonNum b)
{
	button_pressed = true;
  402fb4:	2201      	movs	r2, #1
  402fb6:	4b02      	ldr	r3, [pc, #8]	; (402fc0 <button_callback+0xc>)
  402fb8:	701a      	strb	r2, [r3, #0]
	seleced_button = b;
  402fba:	4b02      	ldr	r3, [pc, #8]	; (402fc4 <button_callback+0x10>)
  402fbc:	6018      	str	r0, [r3, #0]
  402fbe:	4770      	bx	lr
  402fc0:	20000fb2 	.word	0x20000fb2
  402fc4:	20000ff8 	.word	0x20000ff8

00402fc8 <move_aliens>:
}

void move_aliens ()
{
  402fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//move all the aliens in a sort of zig zag movement
	bool move_down = aliens_at_top;
  402fcc:	4b0d      	ldr	r3, [pc, #52]	; (403004 <move_aliens+0x3c>)
  402fce:	781d      	ldrb	r5, [r3, #0]
  402fd0:	4c0d      	ldr	r4, [pc, #52]	; (403008 <move_aliens+0x40>)
  402fd2:	f104 073c 	add.w	r7, r4, #60	; 0x3c
		{
			// move alien down
			move_shape_down(aliens[i]);
		} else {
			// else move it up
			move_shape_up(aliens[i]);
  402fd6:	f8df 9038 	ldr.w	r9, [pc, #56]	; 403010 <move_aliens+0x48>
	for (uint16_t i = 0; i<ALIEN_NUM; i++)
	{
		if (move_down)
		{
			// move alien down
			move_shape_down(aliens[i]);
  402fda:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403014 <move_aliens+0x4c>
		} else {
			// else move it up
			move_shape_up(aliens[i]);
		}
		// and move the aliens to left
		move_shape_left(aliens[i]);
  402fde:	4e0b      	ldr	r6, [pc, #44]	; (40300c <move_aliens+0x44>)
{
	//move all the aliens in a sort of zig zag movement
	bool move_down = aliens_at_top;
	for (uint16_t i = 0; i<ALIEN_NUM; i++)
	{
		if (move_down)
  402fe0:	b115      	cbz	r5, 402fe8 <move_aliens+0x20>
		{
			// move alien down
			move_shape_down(aliens[i]);
  402fe2:	6820      	ldr	r0, [r4, #0]
  402fe4:	47c0      	blx	r8
  402fe6:	e001      	b.n	402fec <move_aliens+0x24>
		} else {
			// else move it up
			move_shape_up(aliens[i]);
  402fe8:	6820      	ldr	r0, [r4, #0]
  402fea:	47c8      	blx	r9
		}
		// and move the aliens to left
		move_shape_left(aliens[i]);
  402fec:	f854 0b04 	ldr.w	r0, [r4], #4
  402ff0:	47b0      	blx	r6

void move_aliens ()
{
	//move all the aliens in a sort of zig zag movement
	bool move_down = aliens_at_top;
	for (uint16_t i = 0; i<ALIEN_NUM; i++)
  402ff2:	42bc      	cmp	r4, r7
  402ff4:	d1f4      	bne.n	402fe0 <move_aliens+0x18>
			move_shape_up(aliens[i]);
		}
		// and move the aliens to left
		move_shape_left(aliens[i]);
	}
	aliens_at_top = !move_down;
  402ff6:	f085 0501 	eor.w	r5, r5, #1
  402ffa:	4b02      	ldr	r3, [pc, #8]	; (403004 <move_aliens+0x3c>)
  402ffc:	701d      	strb	r5, [r3, #0]
  402ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403002:	bf00      	nop
  403004:	20000454 	.word	0x20000454
  403008:	20000ffc 	.word	0x20000ffc
  40300c:	00400e71 	.word	0x00400e71
  403010:	00400e65 	.word	0x00400e65
  403014:	00400e55 	.word	0x00400e55

00403018 <main>:

void button_callback (tButtonNum);
void move_aliens (void);

int main(void)
{
  403018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40301c:	b089      	sub	sp, #36	; 0x24
	//Initializes the system
	system_init();		
  40301e:	4b80      	ldr	r3, [pc, #512]	; (403220 <main+0x208>)
  403020:	4798      	blx	r3
//	sysclk_init();
//	board_init();
	
	// start button
	hal_button_start_int(button_callback);
  403022:	4880      	ldr	r0, [pc, #512]	; (403224 <main+0x20c>)
  403024:	4b80      	ldr	r3, [pc, #512]	; (403228 <main+0x210>)
  403026:	4798      	blx	r3
	
	while (true)
	{
		gameover = false;
  403028:	f8df b240 	ldr.w	fp, [pc, #576]	; 40326c <main+0x254>
		
		Shape *Alien = malloc(15*sizeof(Shape));
		uint16_t k=0;
		for (uint16_t i=10; i<15; i++) {
			for (uint16_t j=0; j<3; j++) {
				Alien[k] = make_shape(alien, i, j);
  40302c:	ab02      	add	r3, sp, #8
  40302e:	9301      	str	r3, [sp, #4]
	// start button
	hal_button_start_int(button_callback);
	
	while (true)
	{
		gameover = false;
  403030:	2700      	movs	r7, #0
  403032:	f88b 7000 	strb.w	r7, [fp]
			Shape Alien = make_shape(alien, (x + 10), i % 3);
			aliens[i] = &Alien;
			x = ((i % 3) == 2) ? x+1 : x;
		}*/
		
		Shape *Alien = malloc(15*sizeof(Shape));
  403036:	2078      	movs	r0, #120	; 0x78
  403038:	4b7c      	ldr	r3, [pc, #496]	; (40322c <main+0x214>)
  40303a:	4798      	blx	r3
  40303c:	4682      	mov	sl, r0
		uint16_t k=0;
		for (uint16_t i=10; i<15; i++) {
  40303e:	f04f 080a 	mov.w	r8, #10
			for (uint16_t j=0; j<3; j++) {
				Alien[k] = make_shape(alien, i, j);
  403042:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 403234 <main+0x21c>
  403046:	e01a      	b.n	40307e <main+0x66>
  403048:	b2ab      	uxth	r3, r5
  40304a:	18fc      	adds	r4, r7, r3
  40304c:	b2a4      	uxth	r4, r4
  40304e:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
  403052:	4642      	mov	r2, r8
  403054:	2100      	movs	r1, #0
  403056:	9801      	ldr	r0, [sp, #4]
  403058:	47c8      	blx	r9
  40305a:	4633      	mov	r3, r6
  40305c:	9802      	ldr	r0, [sp, #8]
  40305e:	9903      	ldr	r1, [sp, #12]
  403060:	c303      	stmia	r3!, {r0, r1}
				aliens[k] = &Alien[k];
  403062:	4b73      	ldr	r3, [pc, #460]	; (403230 <main+0x218>)
  403064:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
  403068:	3501      	adds	r5, #1
		}*/
		
		Shape *Alien = malloc(15*sizeof(Shape));
		uint16_t k=0;
		for (uint16_t i=10; i<15; i++) {
			for (uint16_t j=0; j<3; j++) {
  40306a:	2d03      	cmp	r5, #3
  40306c:	d1ec      	bne.n	403048 <main+0x30>
  40306e:	3703      	adds	r7, #3
  403070:	b2bf      	uxth	r7, r7
			x = ((i % 3) == 2) ? x+1 : x;
		}*/
		
		Shape *Alien = malloc(15*sizeof(Shape));
		uint16_t k=0;
		for (uint16_t i=10; i<15; i++) {
  403072:	f108 0801 	add.w	r8, r8, #1
  403076:	fa1f f888 	uxth.w	r8, r8
  40307a:	2f0f      	cmp	r7, #15
  40307c:	d001      	beq.n	403082 <main+0x6a>

void button_callback (tButtonNum);
void move_aliens (void);

int main(void)
{
  40307e:	2500      	movs	r5, #0
  403080:	e7e2      	b.n	403048 <main+0x30>
		Shape Alien14 = make_shape(alien, 14, 2);
		aliens[14] = &Alien14;
		*/
		
		// initialize the spaceship
		Shape Ship = make_shape(ship, 0, 2);
  403082:	ac04      	add	r4, sp, #16
  403084:	2302      	movs	r3, #2
  403086:	2200      	movs	r2, #0
  403088:	2101      	movs	r1, #1
  40308a:	4620      	mov	r0, r4
  40308c:	4d69      	ldr	r5, [pc, #420]	; (403234 <main+0x21c>)
  40308e:	47a8      	blx	r5
		spaceship = &Ship;
  403090:	4b69      	ldr	r3, [pc, #420]	; (403238 <main+0x220>)
  403092:	601c      	str	r4, [r3, #0]
		
		// create a bullet and set it to not existing
		Shape Bullet = make_shape(bullet, 0, 0);
  403094:	ac06      	add	r4, sp, #24
  403096:	2300      	movs	r3, #0
  403098:	461a      	mov	r2, r3
  40309a:	2102      	movs	r1, #2
  40309c:	4620      	mov	r0, r4
  40309e:	47a8      	blx	r5
		bullets = &Bullet;
  4030a0:	4b66      	ldr	r3, [pc, #408]	; (40323c <main+0x224>)
  4030a2:	601c      	str	r4, [r3, #0]
		bullets->exists = false;
  4030a4:	2300      	movs	r3, #0
  4030a6:	f88d 301e 	strb.w	r3, [sp, #30]
  4030aa:	4f65      	ldr	r7, [pc, #404]	; (403240 <main+0x228>)
  4030ac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
  4030b0:	463d      	mov	r5, r7
		
		// display all the aliens and the space ship
		for (uint16_t i = 0; i < ALIEN_NUM; i++)
		{
			draw_shape(aliens[i]);
  4030b2:	4e64      	ldr	r6, [pc, #400]	; (403244 <main+0x22c>)
  4030b4:	f855 0f04 	ldr.w	r0, [r5, #4]!
  4030b8:	47b0      	blx	r6
		Shape Bullet = make_shape(bullet, 0, 0);
		bullets = &Bullet;
		bullets->exists = false;
		
		// display all the aliens and the space ship
		for (uint16_t i = 0; i < ALIEN_NUM; i++)
  4030ba:	42ac      	cmp	r4, r5
  4030bc:	d1fa      	bne.n	4030b4 <main+0x9c>
		{
			draw_shape(aliens[i]);
		}
		draw_shape(spaceship);
  4030be:	4b5e      	ldr	r3, [pc, #376]	; (403238 <main+0x220>)
  4030c0:	6818      	ldr	r0, [r3, #0]
  4030c2:	4b60      	ldr	r3, [pc, #384]	; (403244 <main+0x22c>)
  4030c4:	4798      	blx	r3
			
			for (uint16_t i = 0; i < 15; i++)
			{
				// if the alien is still alive
				if (aliens[i]->exists)
					draw_shape(aliens[i]);
  4030c6:	4e5f      	ldr	r6, [pc, #380]	; (403244 <main+0x22c>)
			draw_shape(aliens[i]);
		}
		draw_shape(spaceship);
		
		
		while (!gameover)
  4030c8:	e09a      	b.n	403200 <main+0x1e8>
		{
			// do a delay
			hal_delay(200);
  4030ca:	20c8      	movs	r0, #200	; 0xc8
  4030cc:	4b5e      	ldr	r3, [pc, #376]	; (403248 <main+0x230>)
  4030ce:	4798      	blx	r3
			
			// was a button pressed 
			// if yes handle it
			if (button_pressed)
  4030d0:	4b5e      	ldr	r3, [pc, #376]	; (40324c <main+0x234>)
  4030d2:	781b      	ldrb	r3, [r3, #0]
  4030d4:	b323      	cbz	r3, 403120 <main+0x108>
			{
				switch(seleced_button)
  4030d6:	4b5e      	ldr	r3, [pc, #376]	; (403250 <main+0x238>)
  4030d8:	681b      	ldr	r3, [r3, #0]
  4030da:	2b02      	cmp	r3, #2
  4030dc:	d008      	beq.n	4030f0 <main+0xd8>
  4030de:	2b03      	cmp	r3, #3
  4030e0:	d017      	beq.n	403112 <main+0xfa>
  4030e2:	2b01      	cmp	r3, #1
  4030e4:	d119      	bne.n	40311a <main+0x102>
				{
					case Button1:
						// move the space ship up wards
						move_shape_up(spaceship);
  4030e6:	4b54      	ldr	r3, [pc, #336]	; (403238 <main+0x220>)
  4030e8:	6818      	ldr	r0, [r3, #0]
  4030ea:	4b5a      	ldr	r3, [pc, #360]	; (403254 <main+0x23c>)
  4030ec:	4798      	blx	r3
						break;
  4030ee:	e014      	b.n	40311a <main+0x102>
					case  Button2:
						// shoot a bullet from the position of the space ship
						// is there a bullet already? if yes do not shoot.
						// if no shoot
						if (!bullets->exists)
  4030f0:	4b52      	ldr	r3, [pc, #328]	; (40323c <main+0x224>)
  4030f2:	681b      	ldr	r3, [r3, #0]
  4030f4:	799a      	ldrb	r2, [r3, #6]
  4030f6:	b982      	cbnz	r2, 40311a <main+0x102>
						{
							// create a new bullet
							// set bullet position
							// it should be the position right to the current position of the spaceship 
						//	bullets = make_shape(bullet, (spaceship->x + 1), spaceship->y);
							bullets->exists = true;
  4030f8:	2201      	movs	r2, #1
  4030fa:	719a      	strb	r2, [r3, #6]
							bullets->x = spaceship->x + 1;
  4030fc:	494e      	ldr	r1, [pc, #312]	; (403238 <main+0x220>)
  4030fe:	680a      	ldr	r2, [r1, #0]
  403100:	8852      	ldrh	r2, [r2, #2]
  403102:	3201      	adds	r2, #1
  403104:	805a      	strh	r2, [r3, #2]
							bullets->y = spaceship->y;
  403106:	680b      	ldr	r3, [r1, #0]
  403108:	889a      	ldrh	r2, [r3, #4]
  40310a:	4b4c      	ldr	r3, [pc, #304]	; (40323c <main+0x224>)
  40310c:	681b      	ldr	r3, [r3, #0]
  40310e:	809a      	strh	r2, [r3, #4]
  403110:	e003      	b.n	40311a <main+0x102>
						}
						break;
					case Button3:
						// move the space ship down wards
						move_shape_down(spaceship);
  403112:	4b49      	ldr	r3, [pc, #292]	; (403238 <main+0x220>)
  403114:	6818      	ldr	r0, [r3, #0]
  403116:	4b50      	ldr	r3, [pc, #320]	; (403258 <main+0x240>)
  403118:	4798      	blx	r3
						break;
					default:
						/*Error*/
						break;
				}
				button_pressed = false;
  40311a:	2200      	movs	r2, #0
  40311c:	4b4b      	ldr	r3, [pc, #300]	; (40324c <main+0x234>)
  40311e:	701a      	strb	r2, [r3, #0]
			}
			
			// check if the bullet reached the end of the screen
			if (bullets->x == 15)
  403120:	4b46      	ldr	r3, [pc, #280]	; (40323c <main+0x224>)
  403122:	6818      	ldr	r0, [r3, #0]
  403124:	8843      	ldrh	r3, [r0, #2]
  403126:	2b0f      	cmp	r3, #15
  403128:	d102      	bne.n	403130 <main+0x118>
				// destroy the bullet
				bullets->exists = false;
  40312a:	2300      	movs	r3, #0
  40312c:	7183      	strb	r3, [r0, #6]
  40312e:	e003      	b.n	403138 <main+0x120>
			
			// advance bullets
			if (bullets->exists)
  403130:	7983      	ldrb	r3, [r0, #6]
  403132:	b10b      	cbz	r3, 403138 <main+0x120>
				move_shape_right(bullets);
  403134:	4b49      	ldr	r3, [pc, #292]	; (40325c <main+0x244>)
  403136:	4798      	blx	r3
				
			// move the aliens every second or third time
			if (update_alien == ALIEN_UPDATE)
  403138:	4b49      	ldr	r3, [pc, #292]	; (403260 <main+0x248>)
  40313a:	881b      	ldrh	r3, [r3, #0]
  40313c:	2b05      	cmp	r3, #5
  40313e:	d107      	bne.n	403150 <main+0x138>
				move_aliens();
  403140:	4b48      	ldr	r3, [pc, #288]	; (403264 <main+0x24c>)
  403142:	4798      	blx	r3
			
			update_alien = (update_alien == ALIEN_UPDATE) ? 0 : update_alien + 1;
  403144:	4b46      	ldr	r3, [pc, #280]	; (403260 <main+0x248>)
  403146:	881b      	ldrh	r3, [r3, #0]
  403148:	2b05      	cmp	r3, #5
  40314a:	bf08      	it	eq
  40314c:	2300      	moveq	r3, #0
  40314e:	d002      	beq.n	403156 <main+0x13e>
  403150:	3301      	adds	r3, #1
  403152:	b29b      	uxth	r3, r3
  403154:	e7ff      	b.n	403156 <main+0x13e>
  403156:	4a42      	ldr	r2, [pc, #264]	; (403260 <main+0x248>)
  403158:	8013      	strh	r3, [r2, #0]
			Shape* collided_alian = NULL;
			// check for collisions
			for (uint16_t i = 0; i < ALIEN_NUM; i++)
			{
				Shape* current_alien = aliens[i];
				if (bullets->exists && (current_alien->x == bullets->x) && (current_alien->y == bullets->y) && current_alien->exists)
  40315a:	4b38      	ldr	r3, [pc, #224]	; (40323c <main+0x224>)
  40315c:	f8d3 c000 	ldr.w	ip, [r3]
  403160:	f89c 0006 	ldrb.w	r0, [ip, #6]
  403164:	4b32      	ldr	r3, [pc, #200]	; (403230 <main+0x218>)
  403166:	f103 013c 	add.w	r1, r3, #60	; 0x3c
				move_aliens();
			
			update_alien = (update_alien == ALIEN_UPDATE) ? 0 : update_alien + 1;
			
			bool collision_found = false;
			Shape* collided_alian = NULL;
  40316a:	f04f 0900 	mov.w	r9, #0
			if (update_alien == ALIEN_UPDATE)
				move_aliens();
			
			update_alien = (update_alien == ALIEN_UPDATE) ? 0 : update_alien + 1;
			
			bool collision_found = false;
  40316e:	46ca      	mov	sl, r9
			Shape* collided_alian = NULL;
			// check for collisions
			for (uint16_t i = 0; i < ALIEN_NUM; i++)
			{
				Shape* current_alien = aliens[i];
				if (bullets->exists && (current_alien->x == bullets->x) && (current_alien->y == bullets->y) && current_alien->exists)
  403170:	b1a0      	cbz	r0, 40319c <main+0x184>
			bool collision_found = false;
			Shape* collided_alian = NULL;
			// check for collisions
			for (uint16_t i = 0; i < ALIEN_NUM; i++)
			{
				Shape* current_alien = aliens[i];
  403172:	681a      	ldr	r2, [r3, #0]
				if (bullets->exists && (current_alien->x == bullets->x) && (current_alien->y == bullets->y) && current_alien->exists)
  403174:	f8b2 e002 	ldrh.w	lr, [r2, #2]
  403178:	f8bc 5002 	ldrh.w	r5, [ip, #2]
  40317c:	45ae      	cmp	lr, r5
  40317e:	d10d      	bne.n	40319c <main+0x184>
  403180:	f8b2 e004 	ldrh.w	lr, [r2, #4]
  403184:	f8bc 5004 	ldrh.w	r5, [ip, #4]
  403188:	45ae      	cmp	lr, r5
  40318a:	d107      	bne.n	40319c <main+0x184>
  40318c:	7995      	ldrb	r5, [r2, #6]
				{
					collision_found = true;
					collided_alian = current_alien;
  40318e:	2d00      	cmp	r5, #0
  403190:	bf18      	it	ne
  403192:	4691      	movne	r9, r2
  403194:	2d00      	cmp	r5, #0
  403196:	bf18      	it	ne
  403198:	f04f 0a01 	movne.w	sl, #1
  40319c:	3304      	adds	r3, #4
			update_alien = (update_alien == ALIEN_UPDATE) ? 0 : update_alien + 1;
			
			bool collision_found = false;
			Shape* collided_alian = NULL;
			// check for collisions
			for (uint16_t i = 0; i < ALIEN_NUM; i++)
  40319e:	4299      	cmp	r1, r3
  4031a0:	d1e6      	bne.n	403170 <main+0x158>
					collision_found = true;
					collided_alian = current_alien;
				}
			}
			
			if (collision_found)
  4031a2:	f1ba 0f00 	cmp.w	sl, #0
  4031a6:	d004      	beq.n	4031b2 <main+0x19a>
			{
				collided_alian->exists = false;
  4031a8:	2300      	movs	r3, #0
  4031aa:	f889 3006 	strb.w	r3, [r9, #6]
				bullets->exists = false;
  4031ae:	f88c 3006 	strb.w	r3, [ip, #6]
			
			
			// display the new game stat
			// display all the aliens and the space ship
			// remove old game state
			hal_display_cls();
  4031b2:	4b2d      	ldr	r3, [pc, #180]	; (403268 <main+0x250>)
  4031b4:	4798      	blx	r3
  4031b6:	463d      	mov	r5, r7
			
			for (uint16_t i = 0; i < 15; i++)
			{
				// if the alien is still alive
				if (aliens[i]->exists)
  4031b8:	f855 0f04 	ldr.w	r0, [r5, #4]!
  4031bc:	7983      	ldrb	r3, [r0, #6]
  4031be:	b103      	cbz	r3, 4031c2 <main+0x1aa>
					draw_shape(aliens[i]);
  4031c0:	47b0      	blx	r6
			// display the new game stat
			// display all the aliens and the space ship
			// remove old game state
			hal_display_cls();
			
			for (uint16_t i = 0; i < 15; i++)
  4031c2:	42ac      	cmp	r4, r5
  4031c4:	d1f8      	bne.n	4031b8 <main+0x1a0>
				// if the alien is still alive
				if (aliens[i]->exists)
					draw_shape(aliens[i]);
			}
			//draw_shape(alien_test);
			draw_shape(spaceship);
  4031c6:	4b1c      	ldr	r3, [pc, #112]	; (403238 <main+0x220>)
  4031c8:	6818      	ldr	r0, [r3, #0]
  4031ca:	47b0      	blx	r6
			if (bullets->exists)
  4031cc:	4b1b      	ldr	r3, [pc, #108]	; (40323c <main+0x224>)
  4031ce:	6818      	ldr	r0, [r3, #0]
  4031d0:	7983      	ldrb	r3, [r0, #6]
  4031d2:	b103      	cbz	r3, 4031d6 <main+0x1be>
				draw_shape(bullets);
  4031d4:	47b0      	blx	r6
  4031d6:	f89b 0000 	ldrb.w	r0, [fp]
			
			
			// display the new game stat
			// display all the aliens and the space ship
			// remove old game state
			hal_display_cls();
  4031da:	463b      	mov	r3, r7
		
		// game is over -> display gameover state
		// game is over when the aliens have reached the left side of the screen
		for (uint16_t i = 0; i < ALIEN_NUM; i++)
		{
			Shape* current_alien = aliens[i];
  4031dc:	f853 2f04 	ldr.w	r2, [r3, #4]!
			if ((current_alien->x == 0) && current_alien->exists)
  4031e0:	8851      	ldrh	r1, [r2, #2]
  4031e2:	b931      	cbnz	r1, 4031f2 <main+0x1da>
  4031e4:	7992      	ldrb	r2, [r2, #6]
  4031e6:	2a00      	cmp	r2, #0
  4031e8:	bf18      	it	ne
  4031ea:	4690      	movne	r8, r2
  4031ec:	2a00      	cmp	r2, #0
  4031ee:	bf18      	it	ne
  4031f0:	4610      	movne	r0, r2
			// check if all the aliens are gone -> then game is over
		
		
		// game is over -> display gameover state
		// game is over when the aliens have reached the left side of the screen
		for (uint16_t i = 0; i < ALIEN_NUM; i++)
  4031f2:	429c      	cmp	r4, r3
  4031f4:	d1f2      	bne.n	4031dc <main+0x1c4>
  4031f6:	f1b8 0f00 	cmp.w	r8, #0
  4031fa:	d001      	beq.n	403200 <main+0x1e8>
  4031fc:	f88b 0000 	strb.w	r0, [fp]
			draw_shape(aliens[i]);
		}
		draw_shape(spaceship);
		
		
		while (!gameover)
  403200:	f89b 8000 	ldrb.w	r8, [fp]
  403204:	f1b8 0f00 	cmp.w	r8, #0
  403208:	f43f af5f 	beq.w	4030ca <main+0xb2>
		}
		}
		// wait for button to be pressed for a new game state
		
		//display gameover screen
		hal_display_cls();
  40320c:	4b16      	ldr	r3, [pc, #88]	; (403268 <main+0x250>)
  40320e:	4798      	blx	r3
			
		// wait for button to be pressed
		while(!button_pressed)
  403210:	4b0e      	ldr	r3, [pc, #56]	; (40324c <main+0x234>)
  403212:	781b      	ldrb	r3, [r3, #0]
  403214:	2b00      	cmp	r3, #0
  403216:	d0fd      	beq.n	403214 <main+0x1fc>
		{
			
		}
		button_pressed = false;
  403218:	2200      	movs	r2, #0
  40321a:	4b0c      	ldr	r3, [pc, #48]	; (40324c <main+0x234>)
  40321c:	701a      	strb	r2, [r3, #0]
	}
  40321e:	e707      	b.n	403030 <main+0x18>
  403220:	00400d6d 	.word	0x00400d6d
  403224:	00402fb5 	.word	0x00402fb5
  403228:	0040088d 	.word	0x0040088d
  40322c:	00403dad 	.word	0x00403dad
  403230:	20000ffc 	.word	0x20000ffc
  403234:	00400df1 	.word	0x00400df1
  403238:	20001038 	.word	0x20001038
  40323c:	20000ff4 	.word	0x20000ff4
  403240:	20000ff8 	.word	0x20000ff8
  403244:	00400e15 	.word	0x00400e15
  403248:	004001c1 	.word	0x004001c1
  40324c:	20000fb2 	.word	0x20000fb2
  403250:	20000ff8 	.word	0x20000ff8
  403254:	00400e65 	.word	0x00400e65
  403258:	00400e55 	.word	0x00400e55
  40325c:	00400e7d 	.word	0x00400e7d
  403260:	20000fb0 	.word	0x20000fb0
  403264:	00402fc9 	.word	0x00402fc9
  403268:	004006b1 	.word	0x004006b1
  40326c:	20000fb3 	.word	0x20000fb3

00403270 <__aeabi_drsub>:
  403270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403274:	e002      	b.n	40327c <__adddf3>
  403276:	bf00      	nop

00403278 <__aeabi_dsub>:
  403278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040327c <__adddf3>:
  40327c:	b530      	push	{r4, r5, lr}
  40327e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403282:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403286:	ea94 0f05 	teq	r4, r5
  40328a:	bf08      	it	eq
  40328c:	ea90 0f02 	teqeq	r0, r2
  403290:	bf1f      	itttt	ne
  403292:	ea54 0c00 	orrsne.w	ip, r4, r0
  403296:	ea55 0c02 	orrsne.w	ip, r5, r2
  40329a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40329e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4032a2:	f000 80e2 	beq.w	40346a <__adddf3+0x1ee>
  4032a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4032aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4032ae:	bfb8      	it	lt
  4032b0:	426d      	neglt	r5, r5
  4032b2:	dd0c      	ble.n	4032ce <__adddf3+0x52>
  4032b4:	442c      	add	r4, r5
  4032b6:	ea80 0202 	eor.w	r2, r0, r2
  4032ba:	ea81 0303 	eor.w	r3, r1, r3
  4032be:	ea82 0000 	eor.w	r0, r2, r0
  4032c2:	ea83 0101 	eor.w	r1, r3, r1
  4032c6:	ea80 0202 	eor.w	r2, r0, r2
  4032ca:	ea81 0303 	eor.w	r3, r1, r3
  4032ce:	2d36      	cmp	r5, #54	; 0x36
  4032d0:	bf88      	it	hi
  4032d2:	bd30      	pophi	{r4, r5, pc}
  4032d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4032d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4032dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4032e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4032e4:	d002      	beq.n	4032ec <__adddf3+0x70>
  4032e6:	4240      	negs	r0, r0
  4032e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4032ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4032f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4032f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4032f8:	d002      	beq.n	403300 <__adddf3+0x84>
  4032fa:	4252      	negs	r2, r2
  4032fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403300:	ea94 0f05 	teq	r4, r5
  403304:	f000 80a7 	beq.w	403456 <__adddf3+0x1da>
  403308:	f1a4 0401 	sub.w	r4, r4, #1
  40330c:	f1d5 0e20 	rsbs	lr, r5, #32
  403310:	db0d      	blt.n	40332e <__adddf3+0xb2>
  403312:	fa02 fc0e 	lsl.w	ip, r2, lr
  403316:	fa22 f205 	lsr.w	r2, r2, r5
  40331a:	1880      	adds	r0, r0, r2
  40331c:	f141 0100 	adc.w	r1, r1, #0
  403320:	fa03 f20e 	lsl.w	r2, r3, lr
  403324:	1880      	adds	r0, r0, r2
  403326:	fa43 f305 	asr.w	r3, r3, r5
  40332a:	4159      	adcs	r1, r3
  40332c:	e00e      	b.n	40334c <__adddf3+0xd0>
  40332e:	f1a5 0520 	sub.w	r5, r5, #32
  403332:	f10e 0e20 	add.w	lr, lr, #32
  403336:	2a01      	cmp	r2, #1
  403338:	fa03 fc0e 	lsl.w	ip, r3, lr
  40333c:	bf28      	it	cs
  40333e:	f04c 0c02 	orrcs.w	ip, ip, #2
  403342:	fa43 f305 	asr.w	r3, r3, r5
  403346:	18c0      	adds	r0, r0, r3
  403348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40334c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403350:	d507      	bpl.n	403362 <__adddf3+0xe6>
  403352:	f04f 0e00 	mov.w	lr, #0
  403356:	f1dc 0c00 	rsbs	ip, ip, #0
  40335a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40335e:	eb6e 0101 	sbc.w	r1, lr, r1
  403362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403366:	d31b      	bcc.n	4033a0 <__adddf3+0x124>
  403368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40336c:	d30c      	bcc.n	403388 <__adddf3+0x10c>
  40336e:	0849      	lsrs	r1, r1, #1
  403370:	ea5f 0030 	movs.w	r0, r0, rrx
  403374:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403378:	f104 0401 	add.w	r4, r4, #1
  40337c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403384:	f080 809a 	bcs.w	4034bc <__adddf3+0x240>
  403388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40338c:	bf08      	it	eq
  40338e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403392:	f150 0000 	adcs.w	r0, r0, #0
  403396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40339a:	ea41 0105 	orr.w	r1, r1, r5
  40339e:	bd30      	pop	{r4, r5, pc}
  4033a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4033a4:	4140      	adcs	r0, r0
  4033a6:	eb41 0101 	adc.w	r1, r1, r1
  4033aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4033ae:	f1a4 0401 	sub.w	r4, r4, #1
  4033b2:	d1e9      	bne.n	403388 <__adddf3+0x10c>
  4033b4:	f091 0f00 	teq	r1, #0
  4033b8:	bf04      	itt	eq
  4033ba:	4601      	moveq	r1, r0
  4033bc:	2000      	moveq	r0, #0
  4033be:	fab1 f381 	clz	r3, r1
  4033c2:	bf08      	it	eq
  4033c4:	3320      	addeq	r3, #32
  4033c6:	f1a3 030b 	sub.w	r3, r3, #11
  4033ca:	f1b3 0220 	subs.w	r2, r3, #32
  4033ce:	da0c      	bge.n	4033ea <__adddf3+0x16e>
  4033d0:	320c      	adds	r2, #12
  4033d2:	dd08      	ble.n	4033e6 <__adddf3+0x16a>
  4033d4:	f102 0c14 	add.w	ip, r2, #20
  4033d8:	f1c2 020c 	rsb	r2, r2, #12
  4033dc:	fa01 f00c 	lsl.w	r0, r1, ip
  4033e0:	fa21 f102 	lsr.w	r1, r1, r2
  4033e4:	e00c      	b.n	403400 <__adddf3+0x184>
  4033e6:	f102 0214 	add.w	r2, r2, #20
  4033ea:	bfd8      	it	le
  4033ec:	f1c2 0c20 	rsble	ip, r2, #32
  4033f0:	fa01 f102 	lsl.w	r1, r1, r2
  4033f4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4033f8:	bfdc      	itt	le
  4033fa:	ea41 010c 	orrle.w	r1, r1, ip
  4033fe:	4090      	lslle	r0, r2
  403400:	1ae4      	subs	r4, r4, r3
  403402:	bfa2      	ittt	ge
  403404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403408:	4329      	orrge	r1, r5
  40340a:	bd30      	popge	{r4, r5, pc}
  40340c:	ea6f 0404 	mvn.w	r4, r4
  403410:	3c1f      	subs	r4, #31
  403412:	da1c      	bge.n	40344e <__adddf3+0x1d2>
  403414:	340c      	adds	r4, #12
  403416:	dc0e      	bgt.n	403436 <__adddf3+0x1ba>
  403418:	f104 0414 	add.w	r4, r4, #20
  40341c:	f1c4 0220 	rsb	r2, r4, #32
  403420:	fa20 f004 	lsr.w	r0, r0, r4
  403424:	fa01 f302 	lsl.w	r3, r1, r2
  403428:	ea40 0003 	orr.w	r0, r0, r3
  40342c:	fa21 f304 	lsr.w	r3, r1, r4
  403430:	ea45 0103 	orr.w	r1, r5, r3
  403434:	bd30      	pop	{r4, r5, pc}
  403436:	f1c4 040c 	rsb	r4, r4, #12
  40343a:	f1c4 0220 	rsb	r2, r4, #32
  40343e:	fa20 f002 	lsr.w	r0, r0, r2
  403442:	fa01 f304 	lsl.w	r3, r1, r4
  403446:	ea40 0003 	orr.w	r0, r0, r3
  40344a:	4629      	mov	r1, r5
  40344c:	bd30      	pop	{r4, r5, pc}
  40344e:	fa21 f004 	lsr.w	r0, r1, r4
  403452:	4629      	mov	r1, r5
  403454:	bd30      	pop	{r4, r5, pc}
  403456:	f094 0f00 	teq	r4, #0
  40345a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40345e:	bf06      	itte	eq
  403460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403464:	3401      	addeq	r4, #1
  403466:	3d01      	subne	r5, #1
  403468:	e74e      	b.n	403308 <__adddf3+0x8c>
  40346a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40346e:	bf18      	it	ne
  403470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403474:	d029      	beq.n	4034ca <__adddf3+0x24e>
  403476:	ea94 0f05 	teq	r4, r5
  40347a:	bf08      	it	eq
  40347c:	ea90 0f02 	teqeq	r0, r2
  403480:	d005      	beq.n	40348e <__adddf3+0x212>
  403482:	ea54 0c00 	orrs.w	ip, r4, r0
  403486:	bf04      	itt	eq
  403488:	4619      	moveq	r1, r3
  40348a:	4610      	moveq	r0, r2
  40348c:	bd30      	pop	{r4, r5, pc}
  40348e:	ea91 0f03 	teq	r1, r3
  403492:	bf1e      	ittt	ne
  403494:	2100      	movne	r1, #0
  403496:	2000      	movne	r0, #0
  403498:	bd30      	popne	{r4, r5, pc}
  40349a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40349e:	d105      	bne.n	4034ac <__adddf3+0x230>
  4034a0:	0040      	lsls	r0, r0, #1
  4034a2:	4149      	adcs	r1, r1
  4034a4:	bf28      	it	cs
  4034a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4034aa:	bd30      	pop	{r4, r5, pc}
  4034ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4034b0:	bf3c      	itt	cc
  4034b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4034b6:	bd30      	popcc	{r4, r5, pc}
  4034b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4034bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4034c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4034c4:	f04f 0000 	mov.w	r0, #0
  4034c8:	bd30      	pop	{r4, r5, pc}
  4034ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4034ce:	bf1a      	itte	ne
  4034d0:	4619      	movne	r1, r3
  4034d2:	4610      	movne	r0, r2
  4034d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4034d8:	bf1c      	itt	ne
  4034da:	460b      	movne	r3, r1
  4034dc:	4602      	movne	r2, r0
  4034de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4034e2:	bf06      	itte	eq
  4034e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4034e8:	ea91 0f03 	teqeq	r1, r3
  4034ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4034f0:	bd30      	pop	{r4, r5, pc}
  4034f2:	bf00      	nop

004034f4 <__aeabi_ui2d>:
  4034f4:	f090 0f00 	teq	r0, #0
  4034f8:	bf04      	itt	eq
  4034fa:	2100      	moveq	r1, #0
  4034fc:	4770      	bxeq	lr
  4034fe:	b530      	push	{r4, r5, lr}
  403500:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403504:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403508:	f04f 0500 	mov.w	r5, #0
  40350c:	f04f 0100 	mov.w	r1, #0
  403510:	e750      	b.n	4033b4 <__adddf3+0x138>
  403512:	bf00      	nop

00403514 <__aeabi_i2d>:
  403514:	f090 0f00 	teq	r0, #0
  403518:	bf04      	itt	eq
  40351a:	2100      	moveq	r1, #0
  40351c:	4770      	bxeq	lr
  40351e:	b530      	push	{r4, r5, lr}
  403520:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403524:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40352c:	bf48      	it	mi
  40352e:	4240      	negmi	r0, r0
  403530:	f04f 0100 	mov.w	r1, #0
  403534:	e73e      	b.n	4033b4 <__adddf3+0x138>
  403536:	bf00      	nop

00403538 <__aeabi_f2d>:
  403538:	0042      	lsls	r2, r0, #1
  40353a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40353e:	ea4f 0131 	mov.w	r1, r1, rrx
  403542:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403546:	bf1f      	itttt	ne
  403548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40354c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403554:	4770      	bxne	lr
  403556:	f092 0f00 	teq	r2, #0
  40355a:	bf14      	ite	ne
  40355c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403560:	4770      	bxeq	lr
  403562:	b530      	push	{r4, r5, lr}
  403564:	f44f 7460 	mov.w	r4, #896	; 0x380
  403568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40356c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403570:	e720      	b.n	4033b4 <__adddf3+0x138>
  403572:	bf00      	nop

00403574 <__aeabi_ul2d>:
  403574:	ea50 0201 	orrs.w	r2, r0, r1
  403578:	bf08      	it	eq
  40357a:	4770      	bxeq	lr
  40357c:	b530      	push	{r4, r5, lr}
  40357e:	f04f 0500 	mov.w	r5, #0
  403582:	e00a      	b.n	40359a <__aeabi_l2d+0x16>

00403584 <__aeabi_l2d>:
  403584:	ea50 0201 	orrs.w	r2, r0, r1
  403588:	bf08      	it	eq
  40358a:	4770      	bxeq	lr
  40358c:	b530      	push	{r4, r5, lr}
  40358e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403592:	d502      	bpl.n	40359a <__aeabi_l2d+0x16>
  403594:	4240      	negs	r0, r0
  403596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40359a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40359e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4035a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4035a6:	f43f aedc 	beq.w	403362 <__adddf3+0xe6>
  4035aa:	f04f 0203 	mov.w	r2, #3
  4035ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4035b2:	bf18      	it	ne
  4035b4:	3203      	addne	r2, #3
  4035b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4035ba:	bf18      	it	ne
  4035bc:	3203      	addne	r2, #3
  4035be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4035c2:	f1c2 0320 	rsb	r3, r2, #32
  4035c6:	fa00 fc03 	lsl.w	ip, r0, r3
  4035ca:	fa20 f002 	lsr.w	r0, r0, r2
  4035ce:	fa01 fe03 	lsl.w	lr, r1, r3
  4035d2:	ea40 000e 	orr.w	r0, r0, lr
  4035d6:	fa21 f102 	lsr.w	r1, r1, r2
  4035da:	4414      	add	r4, r2
  4035dc:	e6c1      	b.n	403362 <__adddf3+0xe6>
  4035de:	bf00      	nop

004035e0 <__aeabi_dmul>:
  4035e0:	b570      	push	{r4, r5, r6, lr}
  4035e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4035e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4035ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4035ee:	bf1d      	ittte	ne
  4035f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4035f4:	ea94 0f0c 	teqne	r4, ip
  4035f8:	ea95 0f0c 	teqne	r5, ip
  4035fc:	f000 f8de 	bleq	4037bc <__aeabi_dmul+0x1dc>
  403600:	442c      	add	r4, r5
  403602:	ea81 0603 	eor.w	r6, r1, r3
  403606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40360a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40360e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403612:	bf18      	it	ne
  403614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40361c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403620:	d038      	beq.n	403694 <__aeabi_dmul+0xb4>
  403622:	fba0 ce02 	umull	ip, lr, r0, r2
  403626:	f04f 0500 	mov.w	r5, #0
  40362a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40362e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403632:	fbe0 e503 	umlal	lr, r5, r0, r3
  403636:	f04f 0600 	mov.w	r6, #0
  40363a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40363e:	f09c 0f00 	teq	ip, #0
  403642:	bf18      	it	ne
  403644:	f04e 0e01 	orrne.w	lr, lr, #1
  403648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40364c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403654:	d204      	bcs.n	403660 <__aeabi_dmul+0x80>
  403656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40365a:	416d      	adcs	r5, r5
  40365c:	eb46 0606 	adc.w	r6, r6, r6
  403660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40366c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403678:	bf88      	it	hi
  40367a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40367e:	d81e      	bhi.n	4036be <__aeabi_dmul+0xde>
  403680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403684:	bf08      	it	eq
  403686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40368a:	f150 0000 	adcs.w	r0, r0, #0
  40368e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403692:	bd70      	pop	{r4, r5, r6, pc}
  403694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403698:	ea46 0101 	orr.w	r1, r6, r1
  40369c:	ea40 0002 	orr.w	r0, r0, r2
  4036a0:	ea81 0103 	eor.w	r1, r1, r3
  4036a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4036a8:	bfc2      	ittt	gt
  4036aa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4036ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4036b2:	bd70      	popgt	{r4, r5, r6, pc}
  4036b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4036b8:	f04f 0e00 	mov.w	lr, #0
  4036bc:	3c01      	subs	r4, #1
  4036be:	f300 80ab 	bgt.w	403818 <__aeabi_dmul+0x238>
  4036c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4036c6:	bfde      	ittt	le
  4036c8:	2000      	movle	r0, #0
  4036ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4036ce:	bd70      	pople	{r4, r5, r6, pc}
  4036d0:	f1c4 0400 	rsb	r4, r4, #0
  4036d4:	3c20      	subs	r4, #32
  4036d6:	da35      	bge.n	403744 <__aeabi_dmul+0x164>
  4036d8:	340c      	adds	r4, #12
  4036da:	dc1b      	bgt.n	403714 <__aeabi_dmul+0x134>
  4036dc:	f104 0414 	add.w	r4, r4, #20
  4036e0:	f1c4 0520 	rsb	r5, r4, #32
  4036e4:	fa00 f305 	lsl.w	r3, r0, r5
  4036e8:	fa20 f004 	lsr.w	r0, r0, r4
  4036ec:	fa01 f205 	lsl.w	r2, r1, r5
  4036f0:	ea40 0002 	orr.w	r0, r0, r2
  4036f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4036f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4036fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403700:	fa21 f604 	lsr.w	r6, r1, r4
  403704:	eb42 0106 	adc.w	r1, r2, r6
  403708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40370c:	bf08      	it	eq
  40370e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403712:	bd70      	pop	{r4, r5, r6, pc}
  403714:	f1c4 040c 	rsb	r4, r4, #12
  403718:	f1c4 0520 	rsb	r5, r4, #32
  40371c:	fa00 f304 	lsl.w	r3, r0, r4
  403720:	fa20 f005 	lsr.w	r0, r0, r5
  403724:	fa01 f204 	lsl.w	r2, r1, r4
  403728:	ea40 0002 	orr.w	r0, r0, r2
  40372c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403734:	f141 0100 	adc.w	r1, r1, #0
  403738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40373c:	bf08      	it	eq
  40373e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403742:	bd70      	pop	{r4, r5, r6, pc}
  403744:	f1c4 0520 	rsb	r5, r4, #32
  403748:	fa00 f205 	lsl.w	r2, r0, r5
  40374c:	ea4e 0e02 	orr.w	lr, lr, r2
  403750:	fa20 f304 	lsr.w	r3, r0, r4
  403754:	fa01 f205 	lsl.w	r2, r1, r5
  403758:	ea43 0302 	orr.w	r3, r3, r2
  40375c:	fa21 f004 	lsr.w	r0, r1, r4
  403760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403764:	fa21 f204 	lsr.w	r2, r1, r4
  403768:	ea20 0002 	bic.w	r0, r0, r2
  40376c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403774:	bf08      	it	eq
  403776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40377a:	bd70      	pop	{r4, r5, r6, pc}
  40377c:	f094 0f00 	teq	r4, #0
  403780:	d10f      	bne.n	4037a2 <__aeabi_dmul+0x1c2>
  403782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403786:	0040      	lsls	r0, r0, #1
  403788:	eb41 0101 	adc.w	r1, r1, r1
  40378c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403790:	bf08      	it	eq
  403792:	3c01      	subeq	r4, #1
  403794:	d0f7      	beq.n	403786 <__aeabi_dmul+0x1a6>
  403796:	ea41 0106 	orr.w	r1, r1, r6
  40379a:	f095 0f00 	teq	r5, #0
  40379e:	bf18      	it	ne
  4037a0:	4770      	bxne	lr
  4037a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4037a6:	0052      	lsls	r2, r2, #1
  4037a8:	eb43 0303 	adc.w	r3, r3, r3
  4037ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4037b0:	bf08      	it	eq
  4037b2:	3d01      	subeq	r5, #1
  4037b4:	d0f7      	beq.n	4037a6 <__aeabi_dmul+0x1c6>
  4037b6:	ea43 0306 	orr.w	r3, r3, r6
  4037ba:	4770      	bx	lr
  4037bc:	ea94 0f0c 	teq	r4, ip
  4037c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4037c4:	bf18      	it	ne
  4037c6:	ea95 0f0c 	teqne	r5, ip
  4037ca:	d00c      	beq.n	4037e6 <__aeabi_dmul+0x206>
  4037cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037d0:	bf18      	it	ne
  4037d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037d6:	d1d1      	bne.n	40377c <__aeabi_dmul+0x19c>
  4037d8:	ea81 0103 	eor.w	r1, r1, r3
  4037dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4037e0:	f04f 0000 	mov.w	r0, #0
  4037e4:	bd70      	pop	{r4, r5, r6, pc}
  4037e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037ea:	bf06      	itte	eq
  4037ec:	4610      	moveq	r0, r2
  4037ee:	4619      	moveq	r1, r3
  4037f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037f4:	d019      	beq.n	40382a <__aeabi_dmul+0x24a>
  4037f6:	ea94 0f0c 	teq	r4, ip
  4037fa:	d102      	bne.n	403802 <__aeabi_dmul+0x222>
  4037fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403800:	d113      	bne.n	40382a <__aeabi_dmul+0x24a>
  403802:	ea95 0f0c 	teq	r5, ip
  403806:	d105      	bne.n	403814 <__aeabi_dmul+0x234>
  403808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40380c:	bf1c      	itt	ne
  40380e:	4610      	movne	r0, r2
  403810:	4619      	movne	r1, r3
  403812:	d10a      	bne.n	40382a <__aeabi_dmul+0x24a>
  403814:	ea81 0103 	eor.w	r1, r1, r3
  403818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40381c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403824:	f04f 0000 	mov.w	r0, #0
  403828:	bd70      	pop	{r4, r5, r6, pc}
  40382a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40382e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403832:	bd70      	pop	{r4, r5, r6, pc}

00403834 <__aeabi_ddiv>:
  403834:	b570      	push	{r4, r5, r6, lr}
  403836:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40383a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40383e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403842:	bf1d      	ittte	ne
  403844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403848:	ea94 0f0c 	teqne	r4, ip
  40384c:	ea95 0f0c 	teqne	r5, ip
  403850:	f000 f8a7 	bleq	4039a2 <__aeabi_ddiv+0x16e>
  403854:	eba4 0405 	sub.w	r4, r4, r5
  403858:	ea81 0e03 	eor.w	lr, r1, r3
  40385c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403860:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403864:	f000 8088 	beq.w	403978 <__aeabi_ddiv+0x144>
  403868:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40386c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403878:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40387c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403884:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40388c:	429d      	cmp	r5, r3
  40388e:	bf08      	it	eq
  403890:	4296      	cmpeq	r6, r2
  403892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403896:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40389a:	d202      	bcs.n	4038a2 <__aeabi_ddiv+0x6e>
  40389c:	085b      	lsrs	r3, r3, #1
  40389e:	ea4f 0232 	mov.w	r2, r2, rrx
  4038a2:	1ab6      	subs	r6, r6, r2
  4038a4:	eb65 0503 	sbc.w	r5, r5, r3
  4038a8:	085b      	lsrs	r3, r3, #1
  4038aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4038ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4038b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4038b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4038ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038be:	bf22      	ittt	cs
  4038c0:	1ab6      	subcs	r6, r6, r2
  4038c2:	4675      	movcs	r5, lr
  4038c4:	ea40 000c 	orrcs.w	r0, r0, ip
  4038c8:	085b      	lsrs	r3, r3, #1
  4038ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4038ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4038d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038d6:	bf22      	ittt	cs
  4038d8:	1ab6      	subcs	r6, r6, r2
  4038da:	4675      	movcs	r5, lr
  4038dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4038e0:	085b      	lsrs	r3, r3, #1
  4038e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4038e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4038ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038ee:	bf22      	ittt	cs
  4038f0:	1ab6      	subcs	r6, r6, r2
  4038f2:	4675      	movcs	r5, lr
  4038f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4038f8:	085b      	lsrs	r3, r3, #1
  4038fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4038fe:	ebb6 0e02 	subs.w	lr, r6, r2
  403902:	eb75 0e03 	sbcs.w	lr, r5, r3
  403906:	bf22      	ittt	cs
  403908:	1ab6      	subcs	r6, r6, r2
  40390a:	4675      	movcs	r5, lr
  40390c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403910:	ea55 0e06 	orrs.w	lr, r5, r6
  403914:	d018      	beq.n	403948 <__aeabi_ddiv+0x114>
  403916:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40391a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40391e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40392a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40392e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403932:	d1c0      	bne.n	4038b6 <__aeabi_ddiv+0x82>
  403934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403938:	d10b      	bne.n	403952 <__aeabi_ddiv+0x11e>
  40393a:	ea41 0100 	orr.w	r1, r1, r0
  40393e:	f04f 0000 	mov.w	r0, #0
  403942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403946:	e7b6      	b.n	4038b6 <__aeabi_ddiv+0x82>
  403948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40394c:	bf04      	itt	eq
  40394e:	4301      	orreq	r1, r0
  403950:	2000      	moveq	r0, #0
  403952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403956:	bf88      	it	hi
  403958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40395c:	f63f aeaf 	bhi.w	4036be <__aeabi_dmul+0xde>
  403960:	ebb5 0c03 	subs.w	ip, r5, r3
  403964:	bf04      	itt	eq
  403966:	ebb6 0c02 	subseq.w	ip, r6, r2
  40396a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40396e:	f150 0000 	adcs.w	r0, r0, #0
  403972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403976:	bd70      	pop	{r4, r5, r6, pc}
  403978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40397c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403984:	bfc2      	ittt	gt
  403986:	ebd4 050c 	rsbsgt	r5, r4, ip
  40398a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40398e:	bd70      	popgt	{r4, r5, r6, pc}
  403990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403994:	f04f 0e00 	mov.w	lr, #0
  403998:	3c01      	subs	r4, #1
  40399a:	e690      	b.n	4036be <__aeabi_dmul+0xde>
  40399c:	ea45 0e06 	orr.w	lr, r5, r6
  4039a0:	e68d      	b.n	4036be <__aeabi_dmul+0xde>
  4039a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4039a6:	ea94 0f0c 	teq	r4, ip
  4039aa:	bf08      	it	eq
  4039ac:	ea95 0f0c 	teqeq	r5, ip
  4039b0:	f43f af3b 	beq.w	40382a <__aeabi_dmul+0x24a>
  4039b4:	ea94 0f0c 	teq	r4, ip
  4039b8:	d10a      	bne.n	4039d0 <__aeabi_ddiv+0x19c>
  4039ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4039be:	f47f af34 	bne.w	40382a <__aeabi_dmul+0x24a>
  4039c2:	ea95 0f0c 	teq	r5, ip
  4039c6:	f47f af25 	bne.w	403814 <__aeabi_dmul+0x234>
  4039ca:	4610      	mov	r0, r2
  4039cc:	4619      	mov	r1, r3
  4039ce:	e72c      	b.n	40382a <__aeabi_dmul+0x24a>
  4039d0:	ea95 0f0c 	teq	r5, ip
  4039d4:	d106      	bne.n	4039e4 <__aeabi_ddiv+0x1b0>
  4039d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4039da:	f43f aefd 	beq.w	4037d8 <__aeabi_dmul+0x1f8>
  4039de:	4610      	mov	r0, r2
  4039e0:	4619      	mov	r1, r3
  4039e2:	e722      	b.n	40382a <__aeabi_dmul+0x24a>
  4039e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4039e8:	bf18      	it	ne
  4039ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4039ee:	f47f aec5 	bne.w	40377c <__aeabi_dmul+0x19c>
  4039f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4039f6:	f47f af0d 	bne.w	403814 <__aeabi_dmul+0x234>
  4039fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4039fe:	f47f aeeb 	bne.w	4037d8 <__aeabi_dmul+0x1f8>
  403a02:	e712      	b.n	40382a <__aeabi_dmul+0x24a>

00403a04 <__aeabi_d2uiz>:
  403a04:	004a      	lsls	r2, r1, #1
  403a06:	d211      	bcs.n	403a2c <__aeabi_d2uiz+0x28>
  403a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403a0c:	d211      	bcs.n	403a32 <__aeabi_d2uiz+0x2e>
  403a0e:	d50d      	bpl.n	403a2c <__aeabi_d2uiz+0x28>
  403a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403a18:	d40e      	bmi.n	403a38 <__aeabi_d2uiz+0x34>
  403a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403a26:	fa23 f002 	lsr.w	r0, r3, r2
  403a2a:	4770      	bx	lr
  403a2c:	f04f 0000 	mov.w	r0, #0
  403a30:	4770      	bx	lr
  403a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403a36:	d102      	bne.n	403a3e <__aeabi_d2uiz+0x3a>
  403a38:	f04f 30ff 	mov.w	r0, #4294967295
  403a3c:	4770      	bx	lr
  403a3e:	f04f 0000 	mov.w	r0, #0
  403a42:	4770      	bx	lr

00403a44 <__aeabi_uldivmod>:
  403a44:	b953      	cbnz	r3, 403a5c <__aeabi_uldivmod+0x18>
  403a46:	b94a      	cbnz	r2, 403a5c <__aeabi_uldivmod+0x18>
  403a48:	2900      	cmp	r1, #0
  403a4a:	bf08      	it	eq
  403a4c:	2800      	cmpeq	r0, #0
  403a4e:	bf1c      	itt	ne
  403a50:	f04f 31ff 	movne.w	r1, #4294967295
  403a54:	f04f 30ff 	movne.w	r0, #4294967295
  403a58:	f000 b97e 	b.w	403d58 <__aeabi_idiv0>
  403a5c:	f1ad 0c08 	sub.w	ip, sp, #8
  403a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403a64:	f000 f806 	bl	403a74 <__udivmoddi4>
  403a68:	f8dd e004 	ldr.w	lr, [sp, #4]
  403a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403a70:	b004      	add	sp, #16
  403a72:	4770      	bx	lr

00403a74 <__udivmoddi4>:
  403a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a78:	468c      	mov	ip, r1
  403a7a:	460e      	mov	r6, r1
  403a7c:	4604      	mov	r4, r0
  403a7e:	9d08      	ldr	r5, [sp, #32]
  403a80:	2b00      	cmp	r3, #0
  403a82:	d150      	bne.n	403b26 <__udivmoddi4+0xb2>
  403a84:	428a      	cmp	r2, r1
  403a86:	4617      	mov	r7, r2
  403a88:	d96c      	bls.n	403b64 <__udivmoddi4+0xf0>
  403a8a:	fab2 fe82 	clz	lr, r2
  403a8e:	f1be 0f00 	cmp.w	lr, #0
  403a92:	d00b      	beq.n	403aac <__udivmoddi4+0x38>
  403a94:	f1ce 0420 	rsb	r4, lr, #32
  403a98:	fa20 f404 	lsr.w	r4, r0, r4
  403a9c:	fa01 f60e 	lsl.w	r6, r1, lr
  403aa0:	ea44 0c06 	orr.w	ip, r4, r6
  403aa4:	fa02 f70e 	lsl.w	r7, r2, lr
  403aa8:	fa00 f40e 	lsl.w	r4, r0, lr
  403aac:	ea4f 4917 	mov.w	r9, r7, lsr #16
  403ab0:	0c22      	lsrs	r2, r4, #16
  403ab2:	fbbc f0f9 	udiv	r0, ip, r9
  403ab6:	fa1f f887 	uxth.w	r8, r7
  403aba:	fb09 c610 	mls	r6, r9, r0, ip
  403abe:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403ac2:	fb00 f308 	mul.w	r3, r0, r8
  403ac6:	42b3      	cmp	r3, r6
  403ac8:	d909      	bls.n	403ade <__udivmoddi4+0x6a>
  403aca:	19f6      	adds	r6, r6, r7
  403acc:	f100 32ff 	add.w	r2, r0, #4294967295
  403ad0:	f080 8122 	bcs.w	403d18 <__udivmoddi4+0x2a4>
  403ad4:	42b3      	cmp	r3, r6
  403ad6:	f240 811f 	bls.w	403d18 <__udivmoddi4+0x2a4>
  403ada:	3802      	subs	r0, #2
  403adc:	443e      	add	r6, r7
  403ade:	1af6      	subs	r6, r6, r3
  403ae0:	b2a2      	uxth	r2, r4
  403ae2:	fbb6 f3f9 	udiv	r3, r6, r9
  403ae6:	fb09 6613 	mls	r6, r9, r3, r6
  403aea:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403aee:	fb03 f808 	mul.w	r8, r3, r8
  403af2:	45a0      	cmp	r8, r4
  403af4:	d909      	bls.n	403b0a <__udivmoddi4+0x96>
  403af6:	19e4      	adds	r4, r4, r7
  403af8:	f103 32ff 	add.w	r2, r3, #4294967295
  403afc:	f080 810a 	bcs.w	403d14 <__udivmoddi4+0x2a0>
  403b00:	45a0      	cmp	r8, r4
  403b02:	f240 8107 	bls.w	403d14 <__udivmoddi4+0x2a0>
  403b06:	3b02      	subs	r3, #2
  403b08:	443c      	add	r4, r7
  403b0a:	ebc8 0404 	rsb	r4, r8, r4
  403b0e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403b12:	2100      	movs	r1, #0
  403b14:	2d00      	cmp	r5, #0
  403b16:	d062      	beq.n	403bde <__udivmoddi4+0x16a>
  403b18:	fa24 f40e 	lsr.w	r4, r4, lr
  403b1c:	2300      	movs	r3, #0
  403b1e:	602c      	str	r4, [r5, #0]
  403b20:	606b      	str	r3, [r5, #4]
  403b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b26:	428b      	cmp	r3, r1
  403b28:	d907      	bls.n	403b3a <__udivmoddi4+0xc6>
  403b2a:	2d00      	cmp	r5, #0
  403b2c:	d055      	beq.n	403bda <__udivmoddi4+0x166>
  403b2e:	2100      	movs	r1, #0
  403b30:	e885 0041 	stmia.w	r5, {r0, r6}
  403b34:	4608      	mov	r0, r1
  403b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b3a:	fab3 f183 	clz	r1, r3
  403b3e:	2900      	cmp	r1, #0
  403b40:	f040 8090 	bne.w	403c64 <__udivmoddi4+0x1f0>
  403b44:	42b3      	cmp	r3, r6
  403b46:	d302      	bcc.n	403b4e <__udivmoddi4+0xda>
  403b48:	4282      	cmp	r2, r0
  403b4a:	f200 80f8 	bhi.w	403d3e <__udivmoddi4+0x2ca>
  403b4e:	1a84      	subs	r4, r0, r2
  403b50:	eb66 0603 	sbc.w	r6, r6, r3
  403b54:	2001      	movs	r0, #1
  403b56:	46b4      	mov	ip, r6
  403b58:	2d00      	cmp	r5, #0
  403b5a:	d040      	beq.n	403bde <__udivmoddi4+0x16a>
  403b5c:	e885 1010 	stmia.w	r5, {r4, ip}
  403b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b64:	b912      	cbnz	r2, 403b6c <__udivmoddi4+0xf8>
  403b66:	2701      	movs	r7, #1
  403b68:	fbb7 f7f2 	udiv	r7, r7, r2
  403b6c:	fab7 fe87 	clz	lr, r7
  403b70:	f1be 0f00 	cmp.w	lr, #0
  403b74:	d135      	bne.n	403be2 <__udivmoddi4+0x16e>
  403b76:	1bf3      	subs	r3, r6, r7
  403b78:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403b7c:	fa1f fc87 	uxth.w	ip, r7
  403b80:	2101      	movs	r1, #1
  403b82:	fbb3 f0f8 	udiv	r0, r3, r8
  403b86:	0c22      	lsrs	r2, r4, #16
  403b88:	fb08 3610 	mls	r6, r8, r0, r3
  403b8c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403b90:	fb0c f300 	mul.w	r3, ip, r0
  403b94:	42b3      	cmp	r3, r6
  403b96:	d907      	bls.n	403ba8 <__udivmoddi4+0x134>
  403b98:	19f6      	adds	r6, r6, r7
  403b9a:	f100 32ff 	add.w	r2, r0, #4294967295
  403b9e:	d202      	bcs.n	403ba6 <__udivmoddi4+0x132>
  403ba0:	42b3      	cmp	r3, r6
  403ba2:	f200 80ce 	bhi.w	403d42 <__udivmoddi4+0x2ce>
  403ba6:	4610      	mov	r0, r2
  403ba8:	1af6      	subs	r6, r6, r3
  403baa:	b2a2      	uxth	r2, r4
  403bac:	fbb6 f3f8 	udiv	r3, r6, r8
  403bb0:	fb08 6613 	mls	r6, r8, r3, r6
  403bb4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403bb8:	fb0c fc03 	mul.w	ip, ip, r3
  403bbc:	45a4      	cmp	ip, r4
  403bbe:	d907      	bls.n	403bd0 <__udivmoddi4+0x15c>
  403bc0:	19e4      	adds	r4, r4, r7
  403bc2:	f103 32ff 	add.w	r2, r3, #4294967295
  403bc6:	d202      	bcs.n	403bce <__udivmoddi4+0x15a>
  403bc8:	45a4      	cmp	ip, r4
  403bca:	f200 80b5 	bhi.w	403d38 <__udivmoddi4+0x2c4>
  403bce:	4613      	mov	r3, r2
  403bd0:	ebcc 0404 	rsb	r4, ip, r4
  403bd4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403bd8:	e79c      	b.n	403b14 <__udivmoddi4+0xa0>
  403bda:	4629      	mov	r1, r5
  403bdc:	4628      	mov	r0, r5
  403bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403be2:	f1ce 0120 	rsb	r1, lr, #32
  403be6:	fa06 f30e 	lsl.w	r3, r6, lr
  403bea:	fa07 f70e 	lsl.w	r7, r7, lr
  403bee:	fa20 f901 	lsr.w	r9, r0, r1
  403bf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403bf6:	40ce      	lsrs	r6, r1
  403bf8:	ea49 0903 	orr.w	r9, r9, r3
  403bfc:	fbb6 faf8 	udiv	sl, r6, r8
  403c00:	ea4f 4419 	mov.w	r4, r9, lsr #16
  403c04:	fb08 661a 	mls	r6, r8, sl, r6
  403c08:	fa1f fc87 	uxth.w	ip, r7
  403c0c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  403c10:	fb0a f20c 	mul.w	r2, sl, ip
  403c14:	429a      	cmp	r2, r3
  403c16:	fa00 f40e 	lsl.w	r4, r0, lr
  403c1a:	d90a      	bls.n	403c32 <__udivmoddi4+0x1be>
  403c1c:	19db      	adds	r3, r3, r7
  403c1e:	f10a 31ff 	add.w	r1, sl, #4294967295
  403c22:	f080 8087 	bcs.w	403d34 <__udivmoddi4+0x2c0>
  403c26:	429a      	cmp	r2, r3
  403c28:	f240 8084 	bls.w	403d34 <__udivmoddi4+0x2c0>
  403c2c:	f1aa 0a02 	sub.w	sl, sl, #2
  403c30:	443b      	add	r3, r7
  403c32:	1a9b      	subs	r3, r3, r2
  403c34:	fa1f f989 	uxth.w	r9, r9
  403c38:	fbb3 f1f8 	udiv	r1, r3, r8
  403c3c:	fb08 3311 	mls	r3, r8, r1, r3
  403c40:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  403c44:	fb01 f60c 	mul.w	r6, r1, ip
  403c48:	429e      	cmp	r6, r3
  403c4a:	d907      	bls.n	403c5c <__udivmoddi4+0x1e8>
  403c4c:	19db      	adds	r3, r3, r7
  403c4e:	f101 32ff 	add.w	r2, r1, #4294967295
  403c52:	d26b      	bcs.n	403d2c <__udivmoddi4+0x2b8>
  403c54:	429e      	cmp	r6, r3
  403c56:	d969      	bls.n	403d2c <__udivmoddi4+0x2b8>
  403c58:	3902      	subs	r1, #2
  403c5a:	443b      	add	r3, r7
  403c5c:	1b9b      	subs	r3, r3, r6
  403c5e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  403c62:	e78e      	b.n	403b82 <__udivmoddi4+0x10e>
  403c64:	f1c1 0e20 	rsb	lr, r1, #32
  403c68:	fa22 f40e 	lsr.w	r4, r2, lr
  403c6c:	408b      	lsls	r3, r1
  403c6e:	4323      	orrs	r3, r4
  403c70:	fa20 f70e 	lsr.w	r7, r0, lr
  403c74:	fa06 f401 	lsl.w	r4, r6, r1
  403c78:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403c7c:	fa26 f60e 	lsr.w	r6, r6, lr
  403c80:	433c      	orrs	r4, r7
  403c82:	fbb6 f9fc 	udiv	r9, r6, ip
  403c86:	0c27      	lsrs	r7, r4, #16
  403c88:	fb0c 6619 	mls	r6, ip, r9, r6
  403c8c:	fa1f f883 	uxth.w	r8, r3
  403c90:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  403c94:	fb09 f708 	mul.w	r7, r9, r8
  403c98:	42b7      	cmp	r7, r6
  403c9a:	fa02 f201 	lsl.w	r2, r2, r1
  403c9e:	fa00 fa01 	lsl.w	sl, r0, r1
  403ca2:	d908      	bls.n	403cb6 <__udivmoddi4+0x242>
  403ca4:	18f6      	adds	r6, r6, r3
  403ca6:	f109 30ff 	add.w	r0, r9, #4294967295
  403caa:	d241      	bcs.n	403d30 <__udivmoddi4+0x2bc>
  403cac:	42b7      	cmp	r7, r6
  403cae:	d93f      	bls.n	403d30 <__udivmoddi4+0x2bc>
  403cb0:	f1a9 0902 	sub.w	r9, r9, #2
  403cb4:	441e      	add	r6, r3
  403cb6:	1bf6      	subs	r6, r6, r7
  403cb8:	b2a0      	uxth	r0, r4
  403cba:	fbb6 f4fc 	udiv	r4, r6, ip
  403cbe:	fb0c 6614 	mls	r6, ip, r4, r6
  403cc2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  403cc6:	fb04 f808 	mul.w	r8, r4, r8
  403cca:	45b8      	cmp	r8, r7
  403ccc:	d907      	bls.n	403cde <__udivmoddi4+0x26a>
  403cce:	18ff      	adds	r7, r7, r3
  403cd0:	f104 30ff 	add.w	r0, r4, #4294967295
  403cd4:	d228      	bcs.n	403d28 <__udivmoddi4+0x2b4>
  403cd6:	45b8      	cmp	r8, r7
  403cd8:	d926      	bls.n	403d28 <__udivmoddi4+0x2b4>
  403cda:	3c02      	subs	r4, #2
  403cdc:	441f      	add	r7, r3
  403cde:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  403ce2:	ebc8 0707 	rsb	r7, r8, r7
  403ce6:	fba0 8902 	umull	r8, r9, r0, r2
  403cea:	454f      	cmp	r7, r9
  403cec:	4644      	mov	r4, r8
  403cee:	464e      	mov	r6, r9
  403cf0:	d314      	bcc.n	403d1c <__udivmoddi4+0x2a8>
  403cf2:	d029      	beq.n	403d48 <__udivmoddi4+0x2d4>
  403cf4:	b365      	cbz	r5, 403d50 <__udivmoddi4+0x2dc>
  403cf6:	ebba 0304 	subs.w	r3, sl, r4
  403cfa:	eb67 0706 	sbc.w	r7, r7, r6
  403cfe:	fa07 fe0e 	lsl.w	lr, r7, lr
  403d02:	40cb      	lsrs	r3, r1
  403d04:	40cf      	lsrs	r7, r1
  403d06:	ea4e 0303 	orr.w	r3, lr, r3
  403d0a:	e885 0088 	stmia.w	r5, {r3, r7}
  403d0e:	2100      	movs	r1, #0
  403d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d14:	4613      	mov	r3, r2
  403d16:	e6f8      	b.n	403b0a <__udivmoddi4+0x96>
  403d18:	4610      	mov	r0, r2
  403d1a:	e6e0      	b.n	403ade <__udivmoddi4+0x6a>
  403d1c:	ebb8 0402 	subs.w	r4, r8, r2
  403d20:	eb69 0603 	sbc.w	r6, r9, r3
  403d24:	3801      	subs	r0, #1
  403d26:	e7e5      	b.n	403cf4 <__udivmoddi4+0x280>
  403d28:	4604      	mov	r4, r0
  403d2a:	e7d8      	b.n	403cde <__udivmoddi4+0x26a>
  403d2c:	4611      	mov	r1, r2
  403d2e:	e795      	b.n	403c5c <__udivmoddi4+0x1e8>
  403d30:	4681      	mov	r9, r0
  403d32:	e7c0      	b.n	403cb6 <__udivmoddi4+0x242>
  403d34:	468a      	mov	sl, r1
  403d36:	e77c      	b.n	403c32 <__udivmoddi4+0x1be>
  403d38:	3b02      	subs	r3, #2
  403d3a:	443c      	add	r4, r7
  403d3c:	e748      	b.n	403bd0 <__udivmoddi4+0x15c>
  403d3e:	4608      	mov	r0, r1
  403d40:	e70a      	b.n	403b58 <__udivmoddi4+0xe4>
  403d42:	3802      	subs	r0, #2
  403d44:	443e      	add	r6, r7
  403d46:	e72f      	b.n	403ba8 <__udivmoddi4+0x134>
  403d48:	45c2      	cmp	sl, r8
  403d4a:	d3e7      	bcc.n	403d1c <__udivmoddi4+0x2a8>
  403d4c:	463e      	mov	r6, r7
  403d4e:	e7d1      	b.n	403cf4 <__udivmoddi4+0x280>
  403d50:	4629      	mov	r1, r5
  403d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d56:	bf00      	nop

00403d58 <__aeabi_idiv0>:
  403d58:	4770      	bx	lr
  403d5a:	bf00      	nop

00403d5c <__libc_init_array>:
  403d5c:	b570      	push	{r4, r5, r6, lr}
  403d5e:	4e0f      	ldr	r6, [pc, #60]	; (403d9c <__libc_init_array+0x40>)
  403d60:	4d0f      	ldr	r5, [pc, #60]	; (403da0 <__libc_init_array+0x44>)
  403d62:	1b76      	subs	r6, r6, r5
  403d64:	10b6      	asrs	r6, r6, #2
  403d66:	bf18      	it	ne
  403d68:	2400      	movne	r4, #0
  403d6a:	d005      	beq.n	403d78 <__libc_init_array+0x1c>
  403d6c:	3401      	adds	r4, #1
  403d6e:	f855 3b04 	ldr.w	r3, [r5], #4
  403d72:	4798      	blx	r3
  403d74:	42a6      	cmp	r6, r4
  403d76:	d1f9      	bne.n	403d6c <__libc_init_array+0x10>
  403d78:	4e0a      	ldr	r6, [pc, #40]	; (403da4 <__libc_init_array+0x48>)
  403d7a:	4d0b      	ldr	r5, [pc, #44]	; (403da8 <__libc_init_array+0x4c>)
  403d7c:	1b76      	subs	r6, r6, r5
  403d7e:	f000 fd43 	bl	404808 <_init>
  403d82:	10b6      	asrs	r6, r6, #2
  403d84:	bf18      	it	ne
  403d86:	2400      	movne	r4, #0
  403d88:	d006      	beq.n	403d98 <__libc_init_array+0x3c>
  403d8a:	3401      	adds	r4, #1
  403d8c:	f855 3b04 	ldr.w	r3, [r5], #4
  403d90:	4798      	blx	r3
  403d92:	42a6      	cmp	r6, r4
  403d94:	d1f9      	bne.n	403d8a <__libc_init_array+0x2e>
  403d96:	bd70      	pop	{r4, r5, r6, pc}
  403d98:	bd70      	pop	{r4, r5, r6, pc}
  403d9a:	bf00      	nop
  403d9c:	00404814 	.word	0x00404814
  403da0:	00404814 	.word	0x00404814
  403da4:	0040481c 	.word	0x0040481c
  403da8:	00404814 	.word	0x00404814

00403dac <malloc>:
  403dac:	4b02      	ldr	r3, [pc, #8]	; (403db8 <malloc+0xc>)
  403dae:	4601      	mov	r1, r0
  403db0:	6818      	ldr	r0, [r3, #0]
  403db2:	f000 b803 	b.w	403dbc <_malloc_r>
  403db6:	bf00      	nop
  403db8:	20000880 	.word	0x20000880

00403dbc <_malloc_r>:
  403dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403dc0:	f101 050b 	add.w	r5, r1, #11
  403dc4:	2d16      	cmp	r5, #22
  403dc6:	b083      	sub	sp, #12
  403dc8:	4606      	mov	r6, r0
  403dca:	f240 809f 	bls.w	403f0c <_malloc_r+0x150>
  403dce:	f035 0507 	bics.w	r5, r5, #7
  403dd2:	f100 80bf 	bmi.w	403f54 <_malloc_r+0x198>
  403dd6:	42a9      	cmp	r1, r5
  403dd8:	f200 80bc 	bhi.w	403f54 <_malloc_r+0x198>
  403ddc:	f000 faf4 	bl	4043c8 <__malloc_lock>
  403de0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403de4:	f0c0 829c 	bcc.w	404320 <_malloc_r+0x564>
  403de8:	0a6b      	lsrs	r3, r5, #9
  403dea:	f000 80ba 	beq.w	403f62 <_malloc_r+0x1a6>
  403dee:	2b04      	cmp	r3, #4
  403df0:	f200 8183 	bhi.w	4040fa <_malloc_r+0x33e>
  403df4:	09a8      	lsrs	r0, r5, #6
  403df6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  403dfa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403dfe:	3038      	adds	r0, #56	; 0x38
  403e00:	4fc4      	ldr	r7, [pc, #784]	; (404114 <_malloc_r+0x358>)
  403e02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403e06:	f1a3 0108 	sub.w	r1, r3, #8
  403e0a:	685c      	ldr	r4, [r3, #4]
  403e0c:	42a1      	cmp	r1, r4
  403e0e:	d107      	bne.n	403e20 <_malloc_r+0x64>
  403e10:	e0ac      	b.n	403f6c <_malloc_r+0x1b0>
  403e12:	2a00      	cmp	r2, #0
  403e14:	f280 80ac 	bge.w	403f70 <_malloc_r+0x1b4>
  403e18:	68e4      	ldr	r4, [r4, #12]
  403e1a:	42a1      	cmp	r1, r4
  403e1c:	f000 80a6 	beq.w	403f6c <_malloc_r+0x1b0>
  403e20:	6863      	ldr	r3, [r4, #4]
  403e22:	f023 0303 	bic.w	r3, r3, #3
  403e26:	1b5a      	subs	r2, r3, r5
  403e28:	2a0f      	cmp	r2, #15
  403e2a:	ddf2      	ble.n	403e12 <_malloc_r+0x56>
  403e2c:	49b9      	ldr	r1, [pc, #740]	; (404114 <_malloc_r+0x358>)
  403e2e:	693c      	ldr	r4, [r7, #16]
  403e30:	f101 0e08 	add.w	lr, r1, #8
  403e34:	4574      	cmp	r4, lr
  403e36:	f000 81b3 	beq.w	4041a0 <_malloc_r+0x3e4>
  403e3a:	6863      	ldr	r3, [r4, #4]
  403e3c:	f023 0303 	bic.w	r3, r3, #3
  403e40:	1b5a      	subs	r2, r3, r5
  403e42:	2a0f      	cmp	r2, #15
  403e44:	f300 8199 	bgt.w	40417a <_malloc_r+0x3be>
  403e48:	2a00      	cmp	r2, #0
  403e4a:	f8c1 e014 	str.w	lr, [r1, #20]
  403e4e:	f8c1 e010 	str.w	lr, [r1, #16]
  403e52:	f280 809e 	bge.w	403f92 <_malloc_r+0x1d6>
  403e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403e5a:	f080 8167 	bcs.w	40412c <_malloc_r+0x370>
  403e5e:	08db      	lsrs	r3, r3, #3
  403e60:	f103 0c01 	add.w	ip, r3, #1
  403e64:	2201      	movs	r2, #1
  403e66:	109b      	asrs	r3, r3, #2
  403e68:	fa02 f303 	lsl.w	r3, r2, r3
  403e6c:	684a      	ldr	r2, [r1, #4]
  403e6e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  403e72:	f8c4 8008 	str.w	r8, [r4, #8]
  403e76:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  403e7a:	431a      	orrs	r2, r3
  403e7c:	f1a9 0308 	sub.w	r3, r9, #8
  403e80:	60e3      	str	r3, [r4, #12]
  403e82:	604a      	str	r2, [r1, #4]
  403e84:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  403e88:	f8c8 400c 	str.w	r4, [r8, #12]
  403e8c:	1083      	asrs	r3, r0, #2
  403e8e:	2401      	movs	r4, #1
  403e90:	409c      	lsls	r4, r3
  403e92:	4294      	cmp	r4, r2
  403e94:	f200 808a 	bhi.w	403fac <_malloc_r+0x1f0>
  403e98:	4214      	tst	r4, r2
  403e9a:	d106      	bne.n	403eaa <_malloc_r+0xee>
  403e9c:	f020 0003 	bic.w	r0, r0, #3
  403ea0:	0064      	lsls	r4, r4, #1
  403ea2:	4214      	tst	r4, r2
  403ea4:	f100 0004 	add.w	r0, r0, #4
  403ea8:	d0fa      	beq.n	403ea0 <_malloc_r+0xe4>
  403eaa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403eae:	46cc      	mov	ip, r9
  403eb0:	4680      	mov	r8, r0
  403eb2:	f8dc 100c 	ldr.w	r1, [ip, #12]
  403eb6:	458c      	cmp	ip, r1
  403eb8:	d107      	bne.n	403eca <_malloc_r+0x10e>
  403eba:	e173      	b.n	4041a4 <_malloc_r+0x3e8>
  403ebc:	2a00      	cmp	r2, #0
  403ebe:	f280 8181 	bge.w	4041c4 <_malloc_r+0x408>
  403ec2:	68c9      	ldr	r1, [r1, #12]
  403ec4:	458c      	cmp	ip, r1
  403ec6:	f000 816d 	beq.w	4041a4 <_malloc_r+0x3e8>
  403eca:	684b      	ldr	r3, [r1, #4]
  403ecc:	f023 0303 	bic.w	r3, r3, #3
  403ed0:	1b5a      	subs	r2, r3, r5
  403ed2:	2a0f      	cmp	r2, #15
  403ed4:	ddf2      	ble.n	403ebc <_malloc_r+0x100>
  403ed6:	460c      	mov	r4, r1
  403ed8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403edc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403ee0:	194b      	adds	r3, r1, r5
  403ee2:	f045 0501 	orr.w	r5, r5, #1
  403ee6:	604d      	str	r5, [r1, #4]
  403ee8:	f042 0101 	orr.w	r1, r2, #1
  403eec:	f8c8 c00c 	str.w	ip, [r8, #12]
  403ef0:	4630      	mov	r0, r6
  403ef2:	f8cc 8008 	str.w	r8, [ip, #8]
  403ef6:	617b      	str	r3, [r7, #20]
  403ef8:	613b      	str	r3, [r7, #16]
  403efa:	f8c3 e00c 	str.w	lr, [r3, #12]
  403efe:	f8c3 e008 	str.w	lr, [r3, #8]
  403f02:	6059      	str	r1, [r3, #4]
  403f04:	509a      	str	r2, [r3, r2]
  403f06:	f000 fa61 	bl	4043cc <__malloc_unlock>
  403f0a:	e01f      	b.n	403f4c <_malloc_r+0x190>
  403f0c:	2910      	cmp	r1, #16
  403f0e:	d821      	bhi.n	403f54 <_malloc_r+0x198>
  403f10:	f000 fa5a 	bl	4043c8 <__malloc_lock>
  403f14:	2510      	movs	r5, #16
  403f16:	2306      	movs	r3, #6
  403f18:	2002      	movs	r0, #2
  403f1a:	4f7e      	ldr	r7, [pc, #504]	; (404114 <_malloc_r+0x358>)
  403f1c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403f20:	f1a3 0208 	sub.w	r2, r3, #8
  403f24:	685c      	ldr	r4, [r3, #4]
  403f26:	4294      	cmp	r4, r2
  403f28:	f000 8145 	beq.w	4041b6 <_malloc_r+0x3fa>
  403f2c:	6863      	ldr	r3, [r4, #4]
  403f2e:	68e1      	ldr	r1, [r4, #12]
  403f30:	68a5      	ldr	r5, [r4, #8]
  403f32:	f023 0303 	bic.w	r3, r3, #3
  403f36:	4423      	add	r3, r4
  403f38:	4630      	mov	r0, r6
  403f3a:	685a      	ldr	r2, [r3, #4]
  403f3c:	60e9      	str	r1, [r5, #12]
  403f3e:	f042 0201 	orr.w	r2, r2, #1
  403f42:	608d      	str	r5, [r1, #8]
  403f44:	605a      	str	r2, [r3, #4]
  403f46:	f000 fa41 	bl	4043cc <__malloc_unlock>
  403f4a:	3408      	adds	r4, #8
  403f4c:	4620      	mov	r0, r4
  403f4e:	b003      	add	sp, #12
  403f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f54:	2400      	movs	r4, #0
  403f56:	230c      	movs	r3, #12
  403f58:	4620      	mov	r0, r4
  403f5a:	6033      	str	r3, [r6, #0]
  403f5c:	b003      	add	sp, #12
  403f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f62:	2380      	movs	r3, #128	; 0x80
  403f64:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403f68:	203f      	movs	r0, #63	; 0x3f
  403f6a:	e749      	b.n	403e00 <_malloc_r+0x44>
  403f6c:	4670      	mov	r0, lr
  403f6e:	e75d      	b.n	403e2c <_malloc_r+0x70>
  403f70:	4423      	add	r3, r4
  403f72:	68e1      	ldr	r1, [r4, #12]
  403f74:	685a      	ldr	r2, [r3, #4]
  403f76:	68a5      	ldr	r5, [r4, #8]
  403f78:	f042 0201 	orr.w	r2, r2, #1
  403f7c:	60e9      	str	r1, [r5, #12]
  403f7e:	4630      	mov	r0, r6
  403f80:	608d      	str	r5, [r1, #8]
  403f82:	605a      	str	r2, [r3, #4]
  403f84:	f000 fa22 	bl	4043cc <__malloc_unlock>
  403f88:	3408      	adds	r4, #8
  403f8a:	4620      	mov	r0, r4
  403f8c:	b003      	add	sp, #12
  403f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f92:	4423      	add	r3, r4
  403f94:	4630      	mov	r0, r6
  403f96:	685a      	ldr	r2, [r3, #4]
  403f98:	f042 0201 	orr.w	r2, r2, #1
  403f9c:	605a      	str	r2, [r3, #4]
  403f9e:	f000 fa15 	bl	4043cc <__malloc_unlock>
  403fa2:	3408      	adds	r4, #8
  403fa4:	4620      	mov	r0, r4
  403fa6:	b003      	add	sp, #12
  403fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fac:	68bc      	ldr	r4, [r7, #8]
  403fae:	6863      	ldr	r3, [r4, #4]
  403fb0:	f023 0803 	bic.w	r8, r3, #3
  403fb4:	45a8      	cmp	r8, r5
  403fb6:	d304      	bcc.n	403fc2 <_malloc_r+0x206>
  403fb8:	ebc5 0308 	rsb	r3, r5, r8
  403fbc:	2b0f      	cmp	r3, #15
  403fbe:	f300 808c 	bgt.w	4040da <_malloc_r+0x31e>
  403fc2:	4b55      	ldr	r3, [pc, #340]	; (404118 <_malloc_r+0x35c>)
  403fc4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404128 <_malloc_r+0x36c>
  403fc8:	681a      	ldr	r2, [r3, #0]
  403fca:	f8d9 3000 	ldr.w	r3, [r9]
  403fce:	3301      	adds	r3, #1
  403fd0:	442a      	add	r2, r5
  403fd2:	eb04 0a08 	add.w	sl, r4, r8
  403fd6:	f000 8160 	beq.w	40429a <_malloc_r+0x4de>
  403fda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  403fde:	320f      	adds	r2, #15
  403fe0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403fe4:	f022 020f 	bic.w	r2, r2, #15
  403fe8:	4611      	mov	r1, r2
  403fea:	4630      	mov	r0, r6
  403fec:	9201      	str	r2, [sp, #4]
  403fee:	f000 f9ef 	bl	4043d0 <_sbrk_r>
  403ff2:	f1b0 3fff 	cmp.w	r0, #4294967295
  403ff6:	4683      	mov	fp, r0
  403ff8:	9a01      	ldr	r2, [sp, #4]
  403ffa:	f000 8158 	beq.w	4042ae <_malloc_r+0x4f2>
  403ffe:	4582      	cmp	sl, r0
  404000:	f200 80fc 	bhi.w	4041fc <_malloc_r+0x440>
  404004:	4b45      	ldr	r3, [pc, #276]	; (40411c <_malloc_r+0x360>)
  404006:	6819      	ldr	r1, [r3, #0]
  404008:	45da      	cmp	sl, fp
  40400a:	4411      	add	r1, r2
  40400c:	6019      	str	r1, [r3, #0]
  40400e:	f000 8153 	beq.w	4042b8 <_malloc_r+0x4fc>
  404012:	f8d9 0000 	ldr.w	r0, [r9]
  404016:	f8df e110 	ldr.w	lr, [pc, #272]	; 404128 <_malloc_r+0x36c>
  40401a:	3001      	adds	r0, #1
  40401c:	bf1b      	ittet	ne
  40401e:	ebca 0a0b 	rsbne	sl, sl, fp
  404022:	4451      	addne	r1, sl
  404024:	f8ce b000 	streq.w	fp, [lr]
  404028:	6019      	strne	r1, [r3, #0]
  40402a:	f01b 0107 	ands.w	r1, fp, #7
  40402e:	f000 8117 	beq.w	404260 <_malloc_r+0x4a4>
  404032:	f1c1 0008 	rsb	r0, r1, #8
  404036:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40403a:	4483      	add	fp, r0
  40403c:	3108      	adds	r1, #8
  40403e:	445a      	add	r2, fp
  404040:	f3c2 020b 	ubfx	r2, r2, #0, #12
  404044:	ebc2 0901 	rsb	r9, r2, r1
  404048:	4649      	mov	r1, r9
  40404a:	4630      	mov	r0, r6
  40404c:	9301      	str	r3, [sp, #4]
  40404e:	f000 f9bf 	bl	4043d0 <_sbrk_r>
  404052:	1c43      	adds	r3, r0, #1
  404054:	9b01      	ldr	r3, [sp, #4]
  404056:	f000 813f 	beq.w	4042d8 <_malloc_r+0x51c>
  40405a:	ebcb 0200 	rsb	r2, fp, r0
  40405e:	444a      	add	r2, r9
  404060:	f042 0201 	orr.w	r2, r2, #1
  404064:	6819      	ldr	r1, [r3, #0]
  404066:	f8c7 b008 	str.w	fp, [r7, #8]
  40406a:	4449      	add	r1, r9
  40406c:	42bc      	cmp	r4, r7
  40406e:	f8cb 2004 	str.w	r2, [fp, #4]
  404072:	6019      	str	r1, [r3, #0]
  404074:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40411c <_malloc_r+0x360>
  404078:	d016      	beq.n	4040a8 <_malloc_r+0x2ec>
  40407a:	f1b8 0f0f 	cmp.w	r8, #15
  40407e:	f240 80fd 	bls.w	40427c <_malloc_r+0x4c0>
  404082:	6862      	ldr	r2, [r4, #4]
  404084:	f1a8 030c 	sub.w	r3, r8, #12
  404088:	f023 0307 	bic.w	r3, r3, #7
  40408c:	18e0      	adds	r0, r4, r3
  40408e:	f002 0201 	and.w	r2, r2, #1
  404092:	f04f 0e05 	mov.w	lr, #5
  404096:	431a      	orrs	r2, r3
  404098:	2b0f      	cmp	r3, #15
  40409a:	6062      	str	r2, [r4, #4]
  40409c:	f8c0 e004 	str.w	lr, [r0, #4]
  4040a0:	f8c0 e008 	str.w	lr, [r0, #8]
  4040a4:	f200 811c 	bhi.w	4042e0 <_malloc_r+0x524>
  4040a8:	4b1d      	ldr	r3, [pc, #116]	; (404120 <_malloc_r+0x364>)
  4040aa:	68bc      	ldr	r4, [r7, #8]
  4040ac:	681a      	ldr	r2, [r3, #0]
  4040ae:	4291      	cmp	r1, r2
  4040b0:	bf88      	it	hi
  4040b2:	6019      	strhi	r1, [r3, #0]
  4040b4:	4b1b      	ldr	r3, [pc, #108]	; (404124 <_malloc_r+0x368>)
  4040b6:	681a      	ldr	r2, [r3, #0]
  4040b8:	4291      	cmp	r1, r2
  4040ba:	6862      	ldr	r2, [r4, #4]
  4040bc:	bf88      	it	hi
  4040be:	6019      	strhi	r1, [r3, #0]
  4040c0:	f022 0203 	bic.w	r2, r2, #3
  4040c4:	4295      	cmp	r5, r2
  4040c6:	eba2 0305 	sub.w	r3, r2, r5
  4040ca:	d801      	bhi.n	4040d0 <_malloc_r+0x314>
  4040cc:	2b0f      	cmp	r3, #15
  4040ce:	dc04      	bgt.n	4040da <_malloc_r+0x31e>
  4040d0:	4630      	mov	r0, r6
  4040d2:	f000 f97b 	bl	4043cc <__malloc_unlock>
  4040d6:	2400      	movs	r4, #0
  4040d8:	e738      	b.n	403f4c <_malloc_r+0x190>
  4040da:	1962      	adds	r2, r4, r5
  4040dc:	f043 0301 	orr.w	r3, r3, #1
  4040e0:	f045 0501 	orr.w	r5, r5, #1
  4040e4:	6065      	str	r5, [r4, #4]
  4040e6:	4630      	mov	r0, r6
  4040e8:	60ba      	str	r2, [r7, #8]
  4040ea:	6053      	str	r3, [r2, #4]
  4040ec:	f000 f96e 	bl	4043cc <__malloc_unlock>
  4040f0:	3408      	adds	r4, #8
  4040f2:	4620      	mov	r0, r4
  4040f4:	b003      	add	sp, #12
  4040f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040fa:	2b14      	cmp	r3, #20
  4040fc:	d971      	bls.n	4041e2 <_malloc_r+0x426>
  4040fe:	2b54      	cmp	r3, #84	; 0x54
  404100:	f200 80a4 	bhi.w	40424c <_malloc_r+0x490>
  404104:	0b28      	lsrs	r0, r5, #12
  404106:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40410a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40410e:	306e      	adds	r0, #110	; 0x6e
  404110:	e676      	b.n	403e00 <_malloc_r+0x44>
  404112:	bf00      	nop
  404114:	20000884 	.word	0x20000884
  404118:	20000fbc 	.word	0x20000fbc
  40411c:	20000fc0 	.word	0x20000fc0
  404120:	20000fb8 	.word	0x20000fb8
  404124:	20000fb4 	.word	0x20000fb4
  404128:	20000c90 	.word	0x20000c90
  40412c:	0a5a      	lsrs	r2, r3, #9
  40412e:	2a04      	cmp	r2, #4
  404130:	d95e      	bls.n	4041f0 <_malloc_r+0x434>
  404132:	2a14      	cmp	r2, #20
  404134:	f200 80b3 	bhi.w	40429e <_malloc_r+0x4e2>
  404138:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40413c:	0049      	lsls	r1, r1, #1
  40413e:	325b      	adds	r2, #91	; 0x5b
  404140:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  404144:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404148:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 404328 <_malloc_r+0x56c>
  40414c:	f1ac 0c08 	sub.w	ip, ip, #8
  404150:	458c      	cmp	ip, r1
  404152:	f000 8088 	beq.w	404266 <_malloc_r+0x4aa>
  404156:	684a      	ldr	r2, [r1, #4]
  404158:	f022 0203 	bic.w	r2, r2, #3
  40415c:	4293      	cmp	r3, r2
  40415e:	d202      	bcs.n	404166 <_malloc_r+0x3aa>
  404160:	6889      	ldr	r1, [r1, #8]
  404162:	458c      	cmp	ip, r1
  404164:	d1f7      	bne.n	404156 <_malloc_r+0x39a>
  404166:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40416a:	687a      	ldr	r2, [r7, #4]
  40416c:	f8c4 c00c 	str.w	ip, [r4, #12]
  404170:	60a1      	str	r1, [r4, #8]
  404172:	f8cc 4008 	str.w	r4, [ip, #8]
  404176:	60cc      	str	r4, [r1, #12]
  404178:	e688      	b.n	403e8c <_malloc_r+0xd0>
  40417a:	1963      	adds	r3, r4, r5
  40417c:	f042 0701 	orr.w	r7, r2, #1
  404180:	f045 0501 	orr.w	r5, r5, #1
  404184:	6065      	str	r5, [r4, #4]
  404186:	4630      	mov	r0, r6
  404188:	614b      	str	r3, [r1, #20]
  40418a:	610b      	str	r3, [r1, #16]
  40418c:	f8c3 e00c 	str.w	lr, [r3, #12]
  404190:	f8c3 e008 	str.w	lr, [r3, #8]
  404194:	605f      	str	r7, [r3, #4]
  404196:	509a      	str	r2, [r3, r2]
  404198:	3408      	adds	r4, #8
  40419a:	f000 f917 	bl	4043cc <__malloc_unlock>
  40419e:	e6d5      	b.n	403f4c <_malloc_r+0x190>
  4041a0:	684a      	ldr	r2, [r1, #4]
  4041a2:	e673      	b.n	403e8c <_malloc_r+0xd0>
  4041a4:	f108 0801 	add.w	r8, r8, #1
  4041a8:	f018 0f03 	tst.w	r8, #3
  4041ac:	f10c 0c08 	add.w	ip, ip, #8
  4041b0:	f47f ae7f 	bne.w	403eb2 <_malloc_r+0xf6>
  4041b4:	e030      	b.n	404218 <_malloc_r+0x45c>
  4041b6:	68dc      	ldr	r4, [r3, #12]
  4041b8:	42a3      	cmp	r3, r4
  4041ba:	bf08      	it	eq
  4041bc:	3002      	addeq	r0, #2
  4041be:	f43f ae35 	beq.w	403e2c <_malloc_r+0x70>
  4041c2:	e6b3      	b.n	403f2c <_malloc_r+0x170>
  4041c4:	440b      	add	r3, r1
  4041c6:	460c      	mov	r4, r1
  4041c8:	685a      	ldr	r2, [r3, #4]
  4041ca:	68c9      	ldr	r1, [r1, #12]
  4041cc:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4041d0:	f042 0201 	orr.w	r2, r2, #1
  4041d4:	605a      	str	r2, [r3, #4]
  4041d6:	4630      	mov	r0, r6
  4041d8:	60e9      	str	r1, [r5, #12]
  4041da:	608d      	str	r5, [r1, #8]
  4041dc:	f000 f8f6 	bl	4043cc <__malloc_unlock>
  4041e0:	e6b4      	b.n	403f4c <_malloc_r+0x190>
  4041e2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4041e6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4041ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4041ee:	e607      	b.n	403e00 <_malloc_r+0x44>
  4041f0:	099a      	lsrs	r2, r3, #6
  4041f2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4041f6:	0049      	lsls	r1, r1, #1
  4041f8:	3238      	adds	r2, #56	; 0x38
  4041fa:	e7a1      	b.n	404140 <_malloc_r+0x384>
  4041fc:	42bc      	cmp	r4, r7
  4041fe:	4b4a      	ldr	r3, [pc, #296]	; (404328 <_malloc_r+0x56c>)
  404200:	f43f af00 	beq.w	404004 <_malloc_r+0x248>
  404204:	689c      	ldr	r4, [r3, #8]
  404206:	6862      	ldr	r2, [r4, #4]
  404208:	f022 0203 	bic.w	r2, r2, #3
  40420c:	e75a      	b.n	4040c4 <_malloc_r+0x308>
  40420e:	f859 3908 	ldr.w	r3, [r9], #-8
  404212:	4599      	cmp	r9, r3
  404214:	f040 8082 	bne.w	40431c <_malloc_r+0x560>
  404218:	f010 0f03 	tst.w	r0, #3
  40421c:	f100 30ff 	add.w	r0, r0, #4294967295
  404220:	d1f5      	bne.n	40420e <_malloc_r+0x452>
  404222:	687b      	ldr	r3, [r7, #4]
  404224:	ea23 0304 	bic.w	r3, r3, r4
  404228:	607b      	str	r3, [r7, #4]
  40422a:	0064      	lsls	r4, r4, #1
  40422c:	429c      	cmp	r4, r3
  40422e:	f63f aebd 	bhi.w	403fac <_malloc_r+0x1f0>
  404232:	2c00      	cmp	r4, #0
  404234:	f43f aeba 	beq.w	403fac <_malloc_r+0x1f0>
  404238:	421c      	tst	r4, r3
  40423a:	4640      	mov	r0, r8
  40423c:	f47f ae35 	bne.w	403eaa <_malloc_r+0xee>
  404240:	0064      	lsls	r4, r4, #1
  404242:	421c      	tst	r4, r3
  404244:	f100 0004 	add.w	r0, r0, #4
  404248:	d0fa      	beq.n	404240 <_malloc_r+0x484>
  40424a:	e62e      	b.n	403eaa <_malloc_r+0xee>
  40424c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404250:	d818      	bhi.n	404284 <_malloc_r+0x4c8>
  404252:	0be8      	lsrs	r0, r5, #15
  404254:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404258:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40425c:	3077      	adds	r0, #119	; 0x77
  40425e:	e5cf      	b.n	403e00 <_malloc_r+0x44>
  404260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404264:	e6eb      	b.n	40403e <_malloc_r+0x282>
  404266:	2101      	movs	r1, #1
  404268:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40426c:	1092      	asrs	r2, r2, #2
  40426e:	fa01 f202 	lsl.w	r2, r1, r2
  404272:	431a      	orrs	r2, r3
  404274:	f8c8 2004 	str.w	r2, [r8, #4]
  404278:	4661      	mov	r1, ip
  40427a:	e777      	b.n	40416c <_malloc_r+0x3b0>
  40427c:	2301      	movs	r3, #1
  40427e:	f8cb 3004 	str.w	r3, [fp, #4]
  404282:	e725      	b.n	4040d0 <_malloc_r+0x314>
  404284:	f240 5254 	movw	r2, #1364	; 0x554
  404288:	4293      	cmp	r3, r2
  40428a:	d820      	bhi.n	4042ce <_malloc_r+0x512>
  40428c:	0ca8      	lsrs	r0, r5, #18
  40428e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  404292:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404296:	307c      	adds	r0, #124	; 0x7c
  404298:	e5b2      	b.n	403e00 <_malloc_r+0x44>
  40429a:	3210      	adds	r2, #16
  40429c:	e6a4      	b.n	403fe8 <_malloc_r+0x22c>
  40429e:	2a54      	cmp	r2, #84	; 0x54
  4042a0:	d826      	bhi.n	4042f0 <_malloc_r+0x534>
  4042a2:	0b1a      	lsrs	r2, r3, #12
  4042a4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4042a8:	0049      	lsls	r1, r1, #1
  4042aa:	326e      	adds	r2, #110	; 0x6e
  4042ac:	e748      	b.n	404140 <_malloc_r+0x384>
  4042ae:	68bc      	ldr	r4, [r7, #8]
  4042b0:	6862      	ldr	r2, [r4, #4]
  4042b2:	f022 0203 	bic.w	r2, r2, #3
  4042b6:	e705      	b.n	4040c4 <_malloc_r+0x308>
  4042b8:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4042bc:	2800      	cmp	r0, #0
  4042be:	f47f aea8 	bne.w	404012 <_malloc_r+0x256>
  4042c2:	4442      	add	r2, r8
  4042c4:	68bb      	ldr	r3, [r7, #8]
  4042c6:	f042 0201 	orr.w	r2, r2, #1
  4042ca:	605a      	str	r2, [r3, #4]
  4042cc:	e6ec      	b.n	4040a8 <_malloc_r+0x2ec>
  4042ce:	23fe      	movs	r3, #254	; 0xfe
  4042d0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4042d4:	207e      	movs	r0, #126	; 0x7e
  4042d6:	e593      	b.n	403e00 <_malloc_r+0x44>
  4042d8:	2201      	movs	r2, #1
  4042da:	f04f 0900 	mov.w	r9, #0
  4042de:	e6c1      	b.n	404064 <_malloc_r+0x2a8>
  4042e0:	f104 0108 	add.w	r1, r4, #8
  4042e4:	4630      	mov	r0, r6
  4042e6:	f000 f8f7 	bl	4044d8 <_free_r>
  4042ea:	f8d9 1000 	ldr.w	r1, [r9]
  4042ee:	e6db      	b.n	4040a8 <_malloc_r+0x2ec>
  4042f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4042f4:	d805      	bhi.n	404302 <_malloc_r+0x546>
  4042f6:	0bda      	lsrs	r2, r3, #15
  4042f8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4042fc:	0049      	lsls	r1, r1, #1
  4042fe:	3277      	adds	r2, #119	; 0x77
  404300:	e71e      	b.n	404140 <_malloc_r+0x384>
  404302:	f240 5154 	movw	r1, #1364	; 0x554
  404306:	428a      	cmp	r2, r1
  404308:	d805      	bhi.n	404316 <_malloc_r+0x55a>
  40430a:	0c9a      	lsrs	r2, r3, #18
  40430c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404310:	0049      	lsls	r1, r1, #1
  404312:	327c      	adds	r2, #124	; 0x7c
  404314:	e714      	b.n	404140 <_malloc_r+0x384>
  404316:	21fe      	movs	r1, #254	; 0xfe
  404318:	227e      	movs	r2, #126	; 0x7e
  40431a:	e711      	b.n	404140 <_malloc_r+0x384>
  40431c:	687b      	ldr	r3, [r7, #4]
  40431e:	e784      	b.n	40422a <_malloc_r+0x46e>
  404320:	08e8      	lsrs	r0, r5, #3
  404322:	1c43      	adds	r3, r0, #1
  404324:	005b      	lsls	r3, r3, #1
  404326:	e5f8      	b.n	403f1a <_malloc_r+0x15e>
  404328:	20000884 	.word	0x20000884

0040432c <memset>:
  40432c:	b470      	push	{r4, r5, r6}
  40432e:	0784      	lsls	r4, r0, #30
  404330:	d046      	beq.n	4043c0 <memset+0x94>
  404332:	1e54      	subs	r4, r2, #1
  404334:	2a00      	cmp	r2, #0
  404336:	d041      	beq.n	4043bc <memset+0x90>
  404338:	b2cd      	uxtb	r5, r1
  40433a:	4603      	mov	r3, r0
  40433c:	e002      	b.n	404344 <memset+0x18>
  40433e:	1e62      	subs	r2, r4, #1
  404340:	b3e4      	cbz	r4, 4043bc <memset+0x90>
  404342:	4614      	mov	r4, r2
  404344:	f803 5b01 	strb.w	r5, [r3], #1
  404348:	079a      	lsls	r2, r3, #30
  40434a:	d1f8      	bne.n	40433e <memset+0x12>
  40434c:	2c03      	cmp	r4, #3
  40434e:	d92e      	bls.n	4043ae <memset+0x82>
  404350:	b2cd      	uxtb	r5, r1
  404352:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404356:	2c0f      	cmp	r4, #15
  404358:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40435c:	d919      	bls.n	404392 <memset+0x66>
  40435e:	f103 0210 	add.w	r2, r3, #16
  404362:	4626      	mov	r6, r4
  404364:	3e10      	subs	r6, #16
  404366:	2e0f      	cmp	r6, #15
  404368:	f842 5c10 	str.w	r5, [r2, #-16]
  40436c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404370:	f842 5c08 	str.w	r5, [r2, #-8]
  404374:	f842 5c04 	str.w	r5, [r2, #-4]
  404378:	f102 0210 	add.w	r2, r2, #16
  40437c:	d8f2      	bhi.n	404364 <memset+0x38>
  40437e:	f1a4 0210 	sub.w	r2, r4, #16
  404382:	f022 020f 	bic.w	r2, r2, #15
  404386:	f004 040f 	and.w	r4, r4, #15
  40438a:	3210      	adds	r2, #16
  40438c:	2c03      	cmp	r4, #3
  40438e:	4413      	add	r3, r2
  404390:	d90d      	bls.n	4043ae <memset+0x82>
  404392:	461e      	mov	r6, r3
  404394:	4622      	mov	r2, r4
  404396:	3a04      	subs	r2, #4
  404398:	2a03      	cmp	r2, #3
  40439a:	f846 5b04 	str.w	r5, [r6], #4
  40439e:	d8fa      	bhi.n	404396 <memset+0x6a>
  4043a0:	1f22      	subs	r2, r4, #4
  4043a2:	f022 0203 	bic.w	r2, r2, #3
  4043a6:	3204      	adds	r2, #4
  4043a8:	4413      	add	r3, r2
  4043aa:	f004 0403 	and.w	r4, r4, #3
  4043ae:	b12c      	cbz	r4, 4043bc <memset+0x90>
  4043b0:	b2c9      	uxtb	r1, r1
  4043b2:	441c      	add	r4, r3
  4043b4:	f803 1b01 	strb.w	r1, [r3], #1
  4043b8:	42a3      	cmp	r3, r4
  4043ba:	d1fb      	bne.n	4043b4 <memset+0x88>
  4043bc:	bc70      	pop	{r4, r5, r6}
  4043be:	4770      	bx	lr
  4043c0:	4614      	mov	r4, r2
  4043c2:	4603      	mov	r3, r0
  4043c4:	e7c2      	b.n	40434c <memset+0x20>
  4043c6:	bf00      	nop

004043c8 <__malloc_lock>:
  4043c8:	4770      	bx	lr
  4043ca:	bf00      	nop

004043cc <__malloc_unlock>:
  4043cc:	4770      	bx	lr
  4043ce:	bf00      	nop

004043d0 <_sbrk_r>:
  4043d0:	b538      	push	{r3, r4, r5, lr}
  4043d2:	4c07      	ldr	r4, [pc, #28]	; (4043f0 <_sbrk_r+0x20>)
  4043d4:	2300      	movs	r3, #0
  4043d6:	4605      	mov	r5, r0
  4043d8:	4608      	mov	r0, r1
  4043da:	6023      	str	r3, [r4, #0]
  4043dc:	f7fe fdbc 	bl	402f58 <_sbrk>
  4043e0:	1c43      	adds	r3, r0, #1
  4043e2:	d000      	beq.n	4043e6 <_sbrk_r+0x16>
  4043e4:	bd38      	pop	{r3, r4, r5, pc}
  4043e6:	6823      	ldr	r3, [r4, #0]
  4043e8:	2b00      	cmp	r3, #0
  4043ea:	d0fb      	beq.n	4043e4 <_sbrk_r+0x14>
  4043ec:	602b      	str	r3, [r5, #0]
  4043ee:	bd38      	pop	{r3, r4, r5, pc}
  4043f0:	2000103c 	.word	0x2000103c

004043f4 <register_fini>:
  4043f4:	4b02      	ldr	r3, [pc, #8]	; (404400 <register_fini+0xc>)
  4043f6:	b113      	cbz	r3, 4043fe <register_fini+0xa>
  4043f8:	4802      	ldr	r0, [pc, #8]	; (404404 <register_fini+0x10>)
  4043fa:	f000 b805 	b.w	404408 <atexit>
  4043fe:	4770      	bx	lr
  404400:	00000000 	.word	0x00000000
  404404:	00404415 	.word	0x00404415

00404408 <atexit>:
  404408:	2300      	movs	r3, #0
  40440a:	4601      	mov	r1, r0
  40440c:	461a      	mov	r2, r3
  40440e:	4618      	mov	r0, r3
  404410:	f000 b94a 	b.w	4046a8 <__register_exitproc>

00404414 <__libc_fini_array>:
  404414:	b538      	push	{r3, r4, r5, lr}
  404416:	4d07      	ldr	r5, [pc, #28]	; (404434 <__libc_fini_array+0x20>)
  404418:	4c07      	ldr	r4, [pc, #28]	; (404438 <__libc_fini_array+0x24>)
  40441a:	1b2c      	subs	r4, r5, r4
  40441c:	10a4      	asrs	r4, r4, #2
  40441e:	d005      	beq.n	40442c <__libc_fini_array+0x18>
  404420:	3c01      	subs	r4, #1
  404422:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404426:	4798      	blx	r3
  404428:	2c00      	cmp	r4, #0
  40442a:	d1f9      	bne.n	404420 <__libc_fini_array+0xc>
  40442c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404430:	f000 b9f4 	b.w	40481c <_fini>
  404434:	0040482c 	.word	0x0040482c
  404438:	00404828 	.word	0x00404828

0040443c <_malloc_trim_r>:
  40443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40443e:	4f23      	ldr	r7, [pc, #140]	; (4044cc <_malloc_trim_r+0x90>)
  404440:	460c      	mov	r4, r1
  404442:	4606      	mov	r6, r0
  404444:	f7ff ffc0 	bl	4043c8 <__malloc_lock>
  404448:	68bb      	ldr	r3, [r7, #8]
  40444a:	685d      	ldr	r5, [r3, #4]
  40444c:	f025 0503 	bic.w	r5, r5, #3
  404450:	1b29      	subs	r1, r5, r4
  404452:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  404456:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40445a:	f021 010f 	bic.w	r1, r1, #15
  40445e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404462:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404466:	db07      	blt.n	404478 <_malloc_trim_r+0x3c>
  404468:	2100      	movs	r1, #0
  40446a:	4630      	mov	r0, r6
  40446c:	f7ff ffb0 	bl	4043d0 <_sbrk_r>
  404470:	68bb      	ldr	r3, [r7, #8]
  404472:	442b      	add	r3, r5
  404474:	4298      	cmp	r0, r3
  404476:	d004      	beq.n	404482 <_malloc_trim_r+0x46>
  404478:	4630      	mov	r0, r6
  40447a:	f7ff ffa7 	bl	4043cc <__malloc_unlock>
  40447e:	2000      	movs	r0, #0
  404480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404482:	4261      	negs	r1, r4
  404484:	4630      	mov	r0, r6
  404486:	f7ff ffa3 	bl	4043d0 <_sbrk_r>
  40448a:	3001      	adds	r0, #1
  40448c:	d00d      	beq.n	4044aa <_malloc_trim_r+0x6e>
  40448e:	4b10      	ldr	r3, [pc, #64]	; (4044d0 <_malloc_trim_r+0x94>)
  404490:	68ba      	ldr	r2, [r7, #8]
  404492:	6819      	ldr	r1, [r3, #0]
  404494:	1b2d      	subs	r5, r5, r4
  404496:	f045 0501 	orr.w	r5, r5, #1
  40449a:	4630      	mov	r0, r6
  40449c:	1b09      	subs	r1, r1, r4
  40449e:	6055      	str	r5, [r2, #4]
  4044a0:	6019      	str	r1, [r3, #0]
  4044a2:	f7ff ff93 	bl	4043cc <__malloc_unlock>
  4044a6:	2001      	movs	r0, #1
  4044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044aa:	2100      	movs	r1, #0
  4044ac:	4630      	mov	r0, r6
  4044ae:	f7ff ff8f 	bl	4043d0 <_sbrk_r>
  4044b2:	68ba      	ldr	r2, [r7, #8]
  4044b4:	1a83      	subs	r3, r0, r2
  4044b6:	2b0f      	cmp	r3, #15
  4044b8:	ddde      	ble.n	404478 <_malloc_trim_r+0x3c>
  4044ba:	4c06      	ldr	r4, [pc, #24]	; (4044d4 <_malloc_trim_r+0x98>)
  4044bc:	4904      	ldr	r1, [pc, #16]	; (4044d0 <_malloc_trim_r+0x94>)
  4044be:	6824      	ldr	r4, [r4, #0]
  4044c0:	f043 0301 	orr.w	r3, r3, #1
  4044c4:	1b00      	subs	r0, r0, r4
  4044c6:	6053      	str	r3, [r2, #4]
  4044c8:	6008      	str	r0, [r1, #0]
  4044ca:	e7d5      	b.n	404478 <_malloc_trim_r+0x3c>
  4044cc:	20000884 	.word	0x20000884
  4044d0:	20000fc0 	.word	0x20000fc0
  4044d4:	20000c90 	.word	0x20000c90

004044d8 <_free_r>:
  4044d8:	2900      	cmp	r1, #0
  4044da:	d045      	beq.n	404568 <_free_r+0x90>
  4044dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044e0:	460d      	mov	r5, r1
  4044e2:	4680      	mov	r8, r0
  4044e4:	f7ff ff70 	bl	4043c8 <__malloc_lock>
  4044e8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4044ec:	496a      	ldr	r1, [pc, #424]	; (404698 <_free_r+0x1c0>)
  4044ee:	f027 0301 	bic.w	r3, r7, #1
  4044f2:	f1a5 0408 	sub.w	r4, r5, #8
  4044f6:	18e2      	adds	r2, r4, r3
  4044f8:	688e      	ldr	r6, [r1, #8]
  4044fa:	6850      	ldr	r0, [r2, #4]
  4044fc:	42b2      	cmp	r2, r6
  4044fe:	f020 0003 	bic.w	r0, r0, #3
  404502:	d062      	beq.n	4045ca <_free_r+0xf2>
  404504:	07fe      	lsls	r6, r7, #31
  404506:	6050      	str	r0, [r2, #4]
  404508:	d40b      	bmi.n	404522 <_free_r+0x4a>
  40450a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40450e:	1be4      	subs	r4, r4, r7
  404510:	f101 0e08 	add.w	lr, r1, #8
  404514:	68a5      	ldr	r5, [r4, #8]
  404516:	4575      	cmp	r5, lr
  404518:	443b      	add	r3, r7
  40451a:	d06f      	beq.n	4045fc <_free_r+0x124>
  40451c:	68e7      	ldr	r7, [r4, #12]
  40451e:	60ef      	str	r7, [r5, #12]
  404520:	60bd      	str	r5, [r7, #8]
  404522:	1815      	adds	r5, r2, r0
  404524:	686d      	ldr	r5, [r5, #4]
  404526:	07ed      	lsls	r5, r5, #31
  404528:	d542      	bpl.n	4045b0 <_free_r+0xd8>
  40452a:	f043 0201 	orr.w	r2, r3, #1
  40452e:	6062      	str	r2, [r4, #4]
  404530:	50e3      	str	r3, [r4, r3]
  404532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404536:	d218      	bcs.n	40456a <_free_r+0x92>
  404538:	08db      	lsrs	r3, r3, #3
  40453a:	1c5a      	adds	r2, r3, #1
  40453c:	684d      	ldr	r5, [r1, #4]
  40453e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  404542:	60a7      	str	r7, [r4, #8]
  404544:	2001      	movs	r0, #1
  404546:	109b      	asrs	r3, r3, #2
  404548:	fa00 f303 	lsl.w	r3, r0, r3
  40454c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  404550:	431d      	orrs	r5, r3
  404552:	3808      	subs	r0, #8
  404554:	60e0      	str	r0, [r4, #12]
  404556:	604d      	str	r5, [r1, #4]
  404558:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40455c:	60fc      	str	r4, [r7, #12]
  40455e:	4640      	mov	r0, r8
  404560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404564:	f7ff bf32 	b.w	4043cc <__malloc_unlock>
  404568:	4770      	bx	lr
  40456a:	0a5a      	lsrs	r2, r3, #9
  40456c:	2a04      	cmp	r2, #4
  40456e:	d853      	bhi.n	404618 <_free_r+0x140>
  404570:	099a      	lsrs	r2, r3, #6
  404572:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404576:	007f      	lsls	r7, r7, #1
  404578:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40457c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  404580:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  404584:	4944      	ldr	r1, [pc, #272]	; (404698 <_free_r+0x1c0>)
  404586:	3808      	subs	r0, #8
  404588:	4290      	cmp	r0, r2
  40458a:	d04d      	beq.n	404628 <_free_r+0x150>
  40458c:	6851      	ldr	r1, [r2, #4]
  40458e:	f021 0103 	bic.w	r1, r1, #3
  404592:	428b      	cmp	r3, r1
  404594:	d202      	bcs.n	40459c <_free_r+0xc4>
  404596:	6892      	ldr	r2, [r2, #8]
  404598:	4290      	cmp	r0, r2
  40459a:	d1f7      	bne.n	40458c <_free_r+0xb4>
  40459c:	68d0      	ldr	r0, [r2, #12]
  40459e:	60e0      	str	r0, [r4, #12]
  4045a0:	60a2      	str	r2, [r4, #8]
  4045a2:	6084      	str	r4, [r0, #8]
  4045a4:	60d4      	str	r4, [r2, #12]
  4045a6:	4640      	mov	r0, r8
  4045a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4045ac:	f7ff bf0e 	b.w	4043cc <__malloc_unlock>
  4045b0:	6895      	ldr	r5, [r2, #8]
  4045b2:	4f3a      	ldr	r7, [pc, #232]	; (40469c <_free_r+0x1c4>)
  4045b4:	42bd      	cmp	r5, r7
  4045b6:	4403      	add	r3, r0
  4045b8:	d03f      	beq.n	40463a <_free_r+0x162>
  4045ba:	68d0      	ldr	r0, [r2, #12]
  4045bc:	60e8      	str	r0, [r5, #12]
  4045be:	f043 0201 	orr.w	r2, r3, #1
  4045c2:	6085      	str	r5, [r0, #8]
  4045c4:	6062      	str	r2, [r4, #4]
  4045c6:	50e3      	str	r3, [r4, r3]
  4045c8:	e7b3      	b.n	404532 <_free_r+0x5a>
  4045ca:	07ff      	lsls	r7, r7, #31
  4045cc:	4403      	add	r3, r0
  4045ce:	d407      	bmi.n	4045e0 <_free_r+0x108>
  4045d0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4045d4:	1aa4      	subs	r4, r4, r2
  4045d6:	4413      	add	r3, r2
  4045d8:	68a0      	ldr	r0, [r4, #8]
  4045da:	68e2      	ldr	r2, [r4, #12]
  4045dc:	60c2      	str	r2, [r0, #12]
  4045de:	6090      	str	r0, [r2, #8]
  4045e0:	4a2f      	ldr	r2, [pc, #188]	; (4046a0 <_free_r+0x1c8>)
  4045e2:	6812      	ldr	r2, [r2, #0]
  4045e4:	f043 0001 	orr.w	r0, r3, #1
  4045e8:	4293      	cmp	r3, r2
  4045ea:	6060      	str	r0, [r4, #4]
  4045ec:	608c      	str	r4, [r1, #8]
  4045ee:	d3b6      	bcc.n	40455e <_free_r+0x86>
  4045f0:	4b2c      	ldr	r3, [pc, #176]	; (4046a4 <_free_r+0x1cc>)
  4045f2:	4640      	mov	r0, r8
  4045f4:	6819      	ldr	r1, [r3, #0]
  4045f6:	f7ff ff21 	bl	40443c <_malloc_trim_r>
  4045fa:	e7b0      	b.n	40455e <_free_r+0x86>
  4045fc:	1811      	adds	r1, r2, r0
  4045fe:	6849      	ldr	r1, [r1, #4]
  404600:	07c9      	lsls	r1, r1, #31
  404602:	d444      	bmi.n	40468e <_free_r+0x1b6>
  404604:	6891      	ldr	r1, [r2, #8]
  404606:	68d2      	ldr	r2, [r2, #12]
  404608:	60ca      	str	r2, [r1, #12]
  40460a:	4403      	add	r3, r0
  40460c:	f043 0001 	orr.w	r0, r3, #1
  404610:	6091      	str	r1, [r2, #8]
  404612:	6060      	str	r0, [r4, #4]
  404614:	50e3      	str	r3, [r4, r3]
  404616:	e7a2      	b.n	40455e <_free_r+0x86>
  404618:	2a14      	cmp	r2, #20
  40461a:	d817      	bhi.n	40464c <_free_r+0x174>
  40461c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404620:	007f      	lsls	r7, r7, #1
  404622:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404626:	e7a9      	b.n	40457c <_free_r+0xa4>
  404628:	10aa      	asrs	r2, r5, #2
  40462a:	684b      	ldr	r3, [r1, #4]
  40462c:	2501      	movs	r5, #1
  40462e:	fa05 f202 	lsl.w	r2, r5, r2
  404632:	4313      	orrs	r3, r2
  404634:	604b      	str	r3, [r1, #4]
  404636:	4602      	mov	r2, r0
  404638:	e7b1      	b.n	40459e <_free_r+0xc6>
  40463a:	f043 0201 	orr.w	r2, r3, #1
  40463e:	614c      	str	r4, [r1, #20]
  404640:	610c      	str	r4, [r1, #16]
  404642:	60e5      	str	r5, [r4, #12]
  404644:	60a5      	str	r5, [r4, #8]
  404646:	6062      	str	r2, [r4, #4]
  404648:	50e3      	str	r3, [r4, r3]
  40464a:	e788      	b.n	40455e <_free_r+0x86>
  40464c:	2a54      	cmp	r2, #84	; 0x54
  40464e:	d806      	bhi.n	40465e <_free_r+0x186>
  404650:	0b1a      	lsrs	r2, r3, #12
  404652:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404656:	007f      	lsls	r7, r7, #1
  404658:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40465c:	e78e      	b.n	40457c <_free_r+0xa4>
  40465e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404662:	d806      	bhi.n	404672 <_free_r+0x19a>
  404664:	0bda      	lsrs	r2, r3, #15
  404666:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40466a:	007f      	lsls	r7, r7, #1
  40466c:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404670:	e784      	b.n	40457c <_free_r+0xa4>
  404672:	f240 5054 	movw	r0, #1364	; 0x554
  404676:	4282      	cmp	r2, r0
  404678:	d806      	bhi.n	404688 <_free_r+0x1b0>
  40467a:	0c9a      	lsrs	r2, r3, #18
  40467c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404680:	007f      	lsls	r7, r7, #1
  404682:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404686:	e779      	b.n	40457c <_free_r+0xa4>
  404688:	27fe      	movs	r7, #254	; 0xfe
  40468a:	257e      	movs	r5, #126	; 0x7e
  40468c:	e776      	b.n	40457c <_free_r+0xa4>
  40468e:	f043 0201 	orr.w	r2, r3, #1
  404692:	6062      	str	r2, [r4, #4]
  404694:	50e3      	str	r3, [r4, r3]
  404696:	e762      	b.n	40455e <_free_r+0x86>
  404698:	20000884 	.word	0x20000884
  40469c:	2000088c 	.word	0x2000088c
  4046a0:	20000c8c 	.word	0x20000c8c
  4046a4:	20000fbc 	.word	0x20000fbc

004046a8 <__register_exitproc>:
  4046a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4046ac:	4c25      	ldr	r4, [pc, #148]	; (404744 <__register_exitproc+0x9c>)
  4046ae:	6825      	ldr	r5, [r4, #0]
  4046b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4046b4:	4606      	mov	r6, r0
  4046b6:	4688      	mov	r8, r1
  4046b8:	4692      	mov	sl, r2
  4046ba:	4699      	mov	r9, r3
  4046bc:	b3c4      	cbz	r4, 404730 <__register_exitproc+0x88>
  4046be:	6860      	ldr	r0, [r4, #4]
  4046c0:	281f      	cmp	r0, #31
  4046c2:	dc17      	bgt.n	4046f4 <__register_exitproc+0x4c>
  4046c4:	1c43      	adds	r3, r0, #1
  4046c6:	b176      	cbz	r6, 4046e6 <__register_exitproc+0x3e>
  4046c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4046cc:	2201      	movs	r2, #1
  4046ce:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4046d2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4046d6:	4082      	lsls	r2, r0
  4046d8:	4311      	orrs	r1, r2
  4046da:	2e02      	cmp	r6, #2
  4046dc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4046e0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4046e4:	d01e      	beq.n	404724 <__register_exitproc+0x7c>
  4046e6:	3002      	adds	r0, #2
  4046e8:	6063      	str	r3, [r4, #4]
  4046ea:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4046ee:	2000      	movs	r0, #0
  4046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046f4:	4b14      	ldr	r3, [pc, #80]	; (404748 <__register_exitproc+0xa0>)
  4046f6:	b303      	cbz	r3, 40473a <__register_exitproc+0x92>
  4046f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4046fc:	f7ff fb56 	bl	403dac <malloc>
  404700:	4604      	mov	r4, r0
  404702:	b1d0      	cbz	r0, 40473a <__register_exitproc+0x92>
  404704:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404708:	2700      	movs	r7, #0
  40470a:	e880 0088 	stmia.w	r0, {r3, r7}
  40470e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404712:	4638      	mov	r0, r7
  404714:	2301      	movs	r3, #1
  404716:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40471a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40471e:	2e00      	cmp	r6, #0
  404720:	d0e1      	beq.n	4046e6 <__register_exitproc+0x3e>
  404722:	e7d1      	b.n	4046c8 <__register_exitproc+0x20>
  404724:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404728:	430a      	orrs	r2, r1
  40472a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40472e:	e7da      	b.n	4046e6 <__register_exitproc+0x3e>
  404730:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404734:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404738:	e7c1      	b.n	4046be <__register_exitproc+0x16>
  40473a:	f04f 30ff 	mov.w	r0, #4294967295
  40473e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404742:	bf00      	nop
  404744:	00404804 	.word	0x00404804
  404748:	00403dad 	.word	0x00403dad
  40474c:	00000000 	.word	0x00000000
  404750:	0000000d 	.word	0x0000000d
  404754:	00000000 	.word	0x00000000
  404758:	0000000e 	.word	0x0000000e
  40475c:	00000007 	.word	0x00000007
  404760:	000007c7 	.word	0x000007c7

00404764 <sd_trans_multipliers>:
  404764:	00000000 0000000a 0000000c 0000000d     ................
  404774:	0000000f 00000014 00000019 0000001e     ................
  404784:	00000023 00000028 0000002d 00000032     #...(...-...2...
  404794:	00000037 0000003c 00000046 00000050     7...<...F...P...

004047a4 <sd_mmc_trans_units>:
  4047a4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

004047c0 <mmc_trans_multipliers>:
  4047c0:	00000000 0000000a 0000000c 0000000d     ................
  4047d0:	0000000f 00000014 0000001a 0000001e     ................
  4047e0:	00000023 00000028 0000002d 00000034     #...(...-...4...
  4047f0:	00000037 0000003c 00000046 00000050     7...<...F...P...
  404800:	00000043                                C...

00404804 <_global_impure_ptr>:
  404804:	20000458                                X.. 

00404808 <_init>:
  404808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40480a:	bf00      	nop
  40480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40480e:	bc08      	pop	{r3}
  404810:	469e      	mov	lr, r3
  404812:	4770      	bx	lr

00404814 <__init_array_start>:
  404814:	004043f5 	.word	0x004043f5

00404818 <__frame_dummy_init_array_entry>:
  404818:	004000f1                                ..@.

0040481c <_fini>:
  40481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40481e:	bf00      	nop
  404820:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404822:	bc08      	pop	{r3}
  404824:	469e      	mov	lr, r3
  404826:	4770      	bx	lr

00404828 <__fini_array_start>:
  404828:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <Font08px_58>:
2000000c:	4401 0000                                   .D..

20000010 <Font08px_59>:
20000010:	c401 0000                                   ....

20000014 <Font08px_UY>:
20000014:	0605 f008 0608 0000                         ........

2000001c <Font08px_91>:
2000001c:	fe03 8282                                   ....

20000020 <Font08px_92>:
20000020:	0603 c038                                   ..8.

20000024 <Font08px_93>:
20000024:	8203 fe82                                   ....

20000028 <Font08px_94>:
20000028:	0403 0402                                   ....

2000002c <Font08px_95>:
2000002c:	8003 8080                                   ....

20000030 <Font08px_96>:
20000030:	0202 0004                                   ....

20000034 <font_table>:
20000034:	0244 2000 0250 2000 025c 2000 0268 2000     D.. P.. \.. h.. 
20000044:	0274 2000 0280 2000 0288 2000 0290 2000     t.. ... ... ... 
20000054:	0354 2000 0358 2000 035c 2000 0360 2000     T.. X.. \.. `.. 
20000064:	0364 2000 0368 2000 036c 2000 0370 2000     d.. h.. l.. p.. 
20000074:	0304 2000 030c 2000 0314 2000 031c 2000     ... ... ... ... 
20000084:	01b0 2000 032c 2000 0234 2000 01b8 2000     ... ,.. 4.. ... 
20000094:	0344 2000 01c0 2000 000c 2000 0010 2000     D.. ... ... ... 
200000a4:	01c8 2000 01d0 2000 01d8 2000 01e0 2000     ... ... ... ... 
200000b4:	01e8 2000 0294 2000 029c 2000 02a4 2000     ... ... ... ... 
200000c4:	01f4 2000 01fc 2000 0204 2000 020c 2000     ... ... ... ... 
200000d4:	02c0 2000 02c8 2000 02cc 2000 02d4 2000     ... ... ... ... 
200000e4:	02dc 2000 02e4 2000 02ec 2000 02f4 2000     ... ... ... ... 
200000f4:	02fc 2000 0214 2000 021c 2000 0224 2000     ... ... ... $.. 
20000104:	022c 2000 0324 2000 023c 2000 0334 2000     ,.. $.. <.. 4.. 
20000114:	033c 2000 0014 2000 034c 2000 001c 2000     <.. ... L.. ... 
20000124:	0020 2000 0024 2000 0028 2000 002c 2000      .. $.. (.. ,.. 
20000134:	0030 2000 0374 2000 037c 2000 0384 2000     0.. t.. |.. ... 
20000144:	038c 2000 0394 2000 039c 2000 03a0 2000     ... ... ... ... 
20000154:	03a8 2000 03b0 2000 03b4 2000 03b8 2000     ... ... ... ... 
20000164:	03c0 2000 03c4 2000 03cc 2000 03d4 2000     ... ... ... ... 
20000174:	03dc 2000 03e4 2000 03ec 2000 03f0 2000     ... ... ... ... 
20000184:	03f8 2000 03fc 2000 0404 2000 040c 2000     ... ... ... ... 
20000194:	0414 2000 041c 2000 0424 2000 02ac 2000     ... ... $.. ... 
200001a4:	02b0 2000 02b4 2000 02b8 2000               ... ... ... 

200001b0 <Font08px_N4>:
200001b0:	3005 2428 20fe 0000                         .0($. ..

200001b8 <Font08px_N7>:
200001b8:	0205 f202 060a 0000                         ........

200001c0 <Font08px_N9>:
200001c0:	4c05 9292 7c92 0000                         .L...|..

200001c8 <Font08px_60>:
200001c8:	1004 4428 0082 0000                         ..(D....

200001d0 <Font08px_61>:
200001d0:	2804 2828 0028 0000                         .((((...

200001d8 <Font08px_62>:
200001d8:	8204 2844 0010 0000                         ..D(....

200001e0 <Font08px_63>:
200001e0:	0405 a202 0c12 0000                         ........

200001e8 <Font08px_64>:
200001e8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200001f4 <Font08px_UD>:
200001f4:	fe04 8282 007c 0000                         ....|...

200001fc <Font08px_UE>:
200001fc:	fe04 9292 0082 0000                         ........

20000204 <Font08px_UF>:
20000204:	fe04 1212 0002 0000                         ........

2000020c <Font08px_UG>:
2000020c:	7c05 9282 f492 0000                         .|......

20000214 <Font08px_UQ>:
20000214:	7c05 a282 bc42 0000                         .|..B...

2000021c <Font08px_UR>:
2000021c:	fe04 3212 00cc 0000                         ...2....

20000224 <Font08px_US>:
20000224:	4c04 9292 0064 0000                         .L..d...

2000022c <Font08px_UT>:
2000022c:	0205 fe02 0202 0000                         ........

20000234 <Font08px_N6>:
20000234:	7c05 9292 6492 0000                         .|...d..

2000023c <Font08px_UV>:
2000023c:	0e05 c030 0e30 0000                         ..0.0...

20000244 <Font08px_32>:
20000244:	0008 0000 0000 0000 0000 0000               ............

20000250 <Font08px_33>:
20000250:	9908 3c7e 2424 3c3c 0018 0000               ..~<$$<<....

2000025c <Font08px_34>:
2000025c:	0408 66bd 3e3c bc65 0004 0000               ...f<>e.....

20000268 <Font08px_35>:
20000268:	1808 1818 0018 0000 0000 0000               ............

20000274 <Font08px_36>:
20000274:	0008 0000 1800 1818 0018 0000               ............

20000280 <Font08px_37>:
20000280:	4605 1026 c4c8 0000                         .F&.....

20000288 <Font08px_38>:
20000288:	6c05 ac92 a040 0000                         .l..@...

20000290 <Font08px_39>:
20000290:	0601 0000                                   ....

20000294 <Font08px_UA>:
20000294:	f805 1214 f814 0000                         ........

2000029c <Font08px_UB>:
2000029c:	fe04 9292 006c 0000                         ....l...

200002a4 <Font08px_UC>:
200002a4:	7c04 8282 0044 0000                         .|..D...

200002ac <Font08px_123>:
200002ac:	1003 826c                                   ..l.

200002b0 <Font08px_124>:
200002b0:	fe01 0000                                   ....

200002b4 <Font08px_125>:
200002b4:	8203 106c                                   ..l.

200002b8 <Font08px_126>:
200002b8:	1005 1008 1020 0000                         .... ...

200002c0 <Font08px_UH>:
200002c0:	fe04 1010 00fe 0000                         ........

200002c8 <Font08px_UI>:
200002c8:	8203 82fe                                   ....

200002cc <Font08px_UJ>:
200002cc:	4004 8080 007e 0000                         .@..~...

200002d4 <Font08px_UK>:
200002d4:	fe05 2810 8244 0000                         ...(D...

200002dc <Font08px_UL>:
200002dc:	fe04 8080 0080 0000                         ........

200002e4 <Font08px_UM>:
200002e4:	fe05 0804 fe04 0000                         ........

200002ec <Font08px_UN>:
200002ec:	fe05 1804 fe60 0000                         ....`...

200002f4 <Font08px_UO>:
200002f4:	7c04 8282 007c 0000                         .|..|...

200002fc <Font08px_UP>:
200002fc:	fe04 1212 000c 0000                         ........

20000304 <Font08px_N0>:
20000304:	7c05 92a2 7c8a 0000                         .|...|..

2000030c <Font08px_N1>:
2000030c:	0005 fe84 0080 0000                         ........

20000314 <Font08px_N2>:
20000314:	8405 a2c2 8c92 0000                         ........

2000031c <Font08px_N3>:
2000031c:	4405 9282 6c92 0000                         .D...l..

20000324 <Font08px_UU>:
20000324:	7e04 8080 007e 0000                         .~..~...

2000032c <Font08px_N5>:
2000032c:	5e05 8a8a 728a 0000                         .^...r..

20000334 <Font08px_UW>:
20000334:	3e05 38c0 3ec0 0000                         .>.8.>..

2000033c <Font08px_UX>:
2000033c:	c605 1028 c628 0000                         ..(.(...

20000344 <Font08px_N8>:
20000344:	6c05 9292 6c92 0000                         .l...l..

2000034c <Font08px_UZ>:
2000034c:	c205 92a2 868a 0000                         ........

20000354 <Font08px_40>:
20000354:	3803 8244                                   .8D.

20000358 <Font08px_41>:
20000358:	8203 3844                                   ..D8

2000035c <Font08px_42>:
2000035c:	2803 2810                                   .(.(

20000360 <Font08px_43>:
20000360:	1003 1038                                   ..8.

20000364 <Font08px_44>:
20000364:	c001 0000                                   ....

20000368 <Font08px_45>:
20000368:	1003 1010                                   ....

2000036c <Font08px_46>:
2000036c:	8001 0000                                   ....

20000370 <Font08px_47>:
20000370:	c003 0638                                   ..8.

20000374 <Font08px_la>:
20000374:	7004 8888 00f8 0000                         .p......

2000037c <Font08px_lb>:
2000037c:	fe04 8888 0070 0000                         ....p...

20000384 <Font08px_lc>:
20000384:	7004 8888 0088 0000                         .p......

2000038c <Font08px_ld>:
2000038c:	7004 8888 00fe 0000                         .p......

20000394 <Font08px_le>:
20000394:	7004 a8a8 0030 0000                         .p..0...

2000039c <Font08px_lf>:
2000039c:	fc03 0212                                   ....

200003a0 <Font08px_lg>:
200003a0:	1004 a8a8 0078 0000                         ....x...

200003a8 <Font08px_lh>:
200003a8:	fe04 0810 00f0 0000                         ........

200003b0 <Font08px_li>:
200003b0:	fa01 0000                                   ....

200003b4 <Font08px_lj>:
200003b4:	8002 007a                                   ..z.

200003b8 <Font08px_lk>:
200003b8:	fe04 5020 0088 0000                         .. P....

200003c0 <Font08px_ll>:
200003c0:	fe01 0000                                   ....

200003c4 <Font08px_lm>:
200003c4:	f805 f008 f008 0000                         ........

200003cc <Font08px_ln>:
200003cc:	f804 0810 00f0 0000                         ........

200003d4 <Font08px_lo>:
200003d4:	7004 8888 0070 0000                         .p..p...

200003dc <Font08px_lp>:
200003dc:	f804 2828 0010 0000                         ..((....

200003e4 <Font08px_lq>:
200003e4:	1004 2828 00f8 0000                         ..((....

200003ec <Font08px_lr>:
200003ec:	f803 0810                                   ....

200003f0 <Font08px_ls>:
200003f0:	9004 a8a8 0048 0000                         ....H...

200003f8 <Font08px_lt>:
200003f8:	0803 887c                                   ..|.

200003fc <Font08px_lu>:
200003fc:	7804 8080 00f8 0000                         .x......

20000404 <Font08px_lv>:
20000404:	1805 8060 1860 0000                         ..`.`...

2000040c <Font08px_lw>:
2000040c:	3805 30c0 38c0 0000                         .8.0.8..

20000414 <Font08px_lx>:
20000414:	8805 2050 8850 0000                         ..P P...

2000041c <Font08px_ly>:
2000041c:	1804 a0a0 0078 0000                         ....x...

20000424 <Font08px_lz>:
20000424:	c803 98a8                                   ....

20000428 <sd_mmc_cards>:
	...
20000430:	004c 0000 0000 0000 0000 0000 0000 0000     L...............
	...

2000044c <sd_mmc_spi_devices>:
2000044c:	0001 0000                                   ....

20000450 <SystemCoreClock>:
20000450:	0900 003d                                   ..=.

20000454 <aliens_at_top>:
20000454:	0001 0000                                   ....

20000458 <impure_data>:
20000458:	0000 0000 0744 2000 07ac 2000 0814 2000     ....D.. ... ... 
	...
2000048c:	4800 0040 0000 0000 0000 0000 0000 0000     .H@.............
	...
20000500:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000510:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000880 <_impure_ptr>:
20000880:	0458 2000                                   X.. 

20000884 <__malloc_av_>:
	...
2000088c:	0884 2000 0884 2000 088c 2000 088c 2000     ... ... ... ... 
2000089c:	0894 2000 0894 2000 089c 2000 089c 2000     ... ... ... ... 
200008ac:	08a4 2000 08a4 2000 08ac 2000 08ac 2000     ... ... ... ... 
200008bc:	08b4 2000 08b4 2000 08bc 2000 08bc 2000     ... ... ... ... 
200008cc:	08c4 2000 08c4 2000 08cc 2000 08cc 2000     ... ... ... ... 
200008dc:	08d4 2000 08d4 2000 08dc 2000 08dc 2000     ... ... ... ... 
200008ec:	08e4 2000 08e4 2000 08ec 2000 08ec 2000     ... ... ... ... 
200008fc:	08f4 2000 08f4 2000 08fc 2000 08fc 2000     ... ... ... ... 
2000090c:	0904 2000 0904 2000 090c 2000 090c 2000     ... ... ... ... 
2000091c:	0914 2000 0914 2000 091c 2000 091c 2000     ... ... ... ... 
2000092c:	0924 2000 0924 2000 092c 2000 092c 2000     $.. $.. ,.. ,.. 
2000093c:	0934 2000 0934 2000 093c 2000 093c 2000     4.. 4.. <.. <.. 
2000094c:	0944 2000 0944 2000 094c 2000 094c 2000     D.. D.. L.. L.. 
2000095c:	0954 2000 0954 2000 095c 2000 095c 2000     T.. T.. \.. \.. 
2000096c:	0964 2000 0964 2000 096c 2000 096c 2000     d.. d.. l.. l.. 
2000097c:	0974 2000 0974 2000 097c 2000 097c 2000     t.. t.. |.. |.. 
2000098c:	0984 2000 0984 2000 098c 2000 098c 2000     ... ... ... ... 
2000099c:	0994 2000 0994 2000 099c 2000 099c 2000     ... ... ... ... 
200009ac:	09a4 2000 09a4 2000 09ac 2000 09ac 2000     ... ... ... ... 
200009bc:	09b4 2000 09b4 2000 09bc 2000 09bc 2000     ... ... ... ... 
200009cc:	09c4 2000 09c4 2000 09cc 2000 09cc 2000     ... ... ... ... 
200009dc:	09d4 2000 09d4 2000 09dc 2000 09dc 2000     ... ... ... ... 
200009ec:	09e4 2000 09e4 2000 09ec 2000 09ec 2000     ... ... ... ... 
200009fc:	09f4 2000 09f4 2000 09fc 2000 09fc 2000     ... ... ... ... 
20000a0c:	0a04 2000 0a04 2000 0a0c 2000 0a0c 2000     ... ... ... ... 
20000a1c:	0a14 2000 0a14 2000 0a1c 2000 0a1c 2000     ... ... ... ... 
20000a2c:	0a24 2000 0a24 2000 0a2c 2000 0a2c 2000     $.. $.. ,.. ,.. 
20000a3c:	0a34 2000 0a34 2000 0a3c 2000 0a3c 2000     4.. 4.. <.. <.. 
20000a4c:	0a44 2000 0a44 2000 0a4c 2000 0a4c 2000     D.. D.. L.. L.. 
20000a5c:	0a54 2000 0a54 2000 0a5c 2000 0a5c 2000     T.. T.. \.. \.. 
20000a6c:	0a64 2000 0a64 2000 0a6c 2000 0a6c 2000     d.. d.. l.. l.. 
20000a7c:	0a74 2000 0a74 2000 0a7c 2000 0a7c 2000     t.. t.. |.. |.. 
20000a8c:	0a84 2000 0a84 2000 0a8c 2000 0a8c 2000     ... ... ... ... 
20000a9c:	0a94 2000 0a94 2000 0a9c 2000 0a9c 2000     ... ... ... ... 
20000aac:	0aa4 2000 0aa4 2000 0aac 2000 0aac 2000     ... ... ... ... 
20000abc:	0ab4 2000 0ab4 2000 0abc 2000 0abc 2000     ... ... ... ... 
20000acc:	0ac4 2000 0ac4 2000 0acc 2000 0acc 2000     ... ... ... ... 
20000adc:	0ad4 2000 0ad4 2000 0adc 2000 0adc 2000     ... ... ... ... 
20000aec:	0ae4 2000 0ae4 2000 0aec 2000 0aec 2000     ... ... ... ... 
20000afc:	0af4 2000 0af4 2000 0afc 2000 0afc 2000     ... ... ... ... 
20000b0c:	0b04 2000 0b04 2000 0b0c 2000 0b0c 2000     ... ... ... ... 
20000b1c:	0b14 2000 0b14 2000 0b1c 2000 0b1c 2000     ... ... ... ... 
20000b2c:	0b24 2000 0b24 2000 0b2c 2000 0b2c 2000     $.. $.. ,.. ,.. 
20000b3c:	0b34 2000 0b34 2000 0b3c 2000 0b3c 2000     4.. 4.. <.. <.. 
20000b4c:	0b44 2000 0b44 2000 0b4c 2000 0b4c 2000     D.. D.. L.. L.. 
20000b5c:	0b54 2000 0b54 2000 0b5c 2000 0b5c 2000     T.. T.. \.. \.. 
20000b6c:	0b64 2000 0b64 2000 0b6c 2000 0b6c 2000     d.. d.. l.. l.. 
20000b7c:	0b74 2000 0b74 2000 0b7c 2000 0b7c 2000     t.. t.. |.. |.. 
20000b8c:	0b84 2000 0b84 2000 0b8c 2000 0b8c 2000     ... ... ... ... 
20000b9c:	0b94 2000 0b94 2000 0b9c 2000 0b9c 2000     ... ... ... ... 
20000bac:	0ba4 2000 0ba4 2000 0bac 2000 0bac 2000     ... ... ... ... 
20000bbc:	0bb4 2000 0bb4 2000 0bbc 2000 0bbc 2000     ... ... ... ... 
20000bcc:	0bc4 2000 0bc4 2000 0bcc 2000 0bcc 2000     ... ... ... ... 
20000bdc:	0bd4 2000 0bd4 2000 0bdc 2000 0bdc 2000     ... ... ... ... 
20000bec:	0be4 2000 0be4 2000 0bec 2000 0bec 2000     ... ... ... ... 
20000bfc:	0bf4 2000 0bf4 2000 0bfc 2000 0bfc 2000     ... ... ... ... 
20000c0c:	0c04 2000 0c04 2000 0c0c 2000 0c0c 2000     ... ... ... ... 
20000c1c:	0c14 2000 0c14 2000 0c1c 2000 0c1c 2000     ... ... ... ... 
20000c2c:	0c24 2000 0c24 2000 0c2c 2000 0c2c 2000     $.. $.. ,.. ,.. 
20000c3c:	0c34 2000 0c34 2000 0c3c 2000 0c3c 2000     4.. 4.. <.. <.. 
20000c4c:	0c44 2000 0c44 2000 0c4c 2000 0c4c 2000     D.. D.. L.. L.. 
20000c5c:	0c54 2000 0c54 2000 0c5c 2000 0c5c 2000     T.. T.. \.. \.. 
20000c6c:	0c64 2000 0c64 2000 0c6c 2000 0c6c 2000     d.. d.. l.. l.. 
20000c7c:	0c74 2000 0c74 2000 0c7c 2000 0c7c 2000     t.. t.. |.. |.. 

20000c8c <__malloc_trim_threshold>:
20000c8c:	0000 0002                                   ....

20000c90 <__malloc_sbrk_base>:
20000c90:	ffff ffff                                   ....
