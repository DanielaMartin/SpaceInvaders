
MiniOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007fa4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407fa4  00407fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e08  20000000  00407fac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000003d0  20000e08  00408db4  00020e08  2**2
                  ALLOC
  4 .stack        00003000  200011d8  00409184  00020e08  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020e08  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020e32  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d425  00000000  00000000  00020e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006072  00000000  00000000  0004e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011158  00000000  00000000  00054322  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001350  00000000  00000000  00065480  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000015f8  00000000  00000000  000667d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c254  00000000  00000000  00067dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a118  00000000  00000000  0008401c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005ecd3  00000000  00000000  0009e134  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003b1c  00000000  00000000  000fce08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 41 00 20 79 2c 40 00 75 2c 40 00 75 2c 40 00     .A. y,@.u,@.u,@.
  400010:	75 2c 40 00 75 2c 40 00 75 2c 40 00 00 00 00 00     u,@.u,@.u,@.....
	...
  40002c:	0d 02 40 00 75 2c 40 00 00 00 00 00 75 2c 40 00     ..@.u,@.....u,@.
  40003c:	c1 01 40 00 75 2c 40 00 75 2c 40 00 75 2c 40 00     ..@.u,@.u,@.u,@.
  40004c:	01 04 40 00 75 2c 40 00 75 2c 40 00 75 2c 40 00     ..@.u,@.u,@.u,@.
  40005c:	75 2c 40 00 75 2c 40 00 35 0a 40 00 00 00 00 00     u,@.u,@.5.@.....
  40006c:	7d 23 40 00 91 23 40 00 a5 23 40 00 75 2c 40 00     }#@..#@..#@.u,@.
  40007c:	71 0a 40 00 00 00 00 00 00 00 00 00 75 2c 40 00     q.@.........u,@.
  40008c:	75 2c 40 00 75 2c 40 00 75 2c 40 00 75 2c 40 00     u,@.u,@.u,@.u,@.
  40009c:	75 2c 40 00 75 2c 40 00 75 2c 40 00 75 2c 40 00     u,@.u,@.u,@.u,@.
  4000ac:	75 2c 40 00 75 2c 40 00 75 2c 40 00 75 2c 40 00     u,@.u,@.u,@.u,@.
  4000bc:	75 2c 40 00 75 2c 40 00 75 2c 40 00 75 2c 40 00     u,@.u,@.u,@.u,@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000e08 	.word	0x20000e08
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00407fac 	.word	0x00407fac

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00407fac 	.word	0x00407fac
  40012c:	20000e0c 	.word	0x20000e0c
  400130:	00407fac 	.word	0x00407fac
  400134:	00000000 	.word	0x00000000

00400138 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400138:	4b03      	ldr	r3, [pc, #12]	; (400148 <rtt_init+0x10>)
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400140:	4319      	orrs	r1, r3
  400142:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400144:	2000      	movs	r0, #0
  400146:	4770      	bx	lr
  400148:	20000e24 	.word	0x20000e24

0040014c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40014c:	b941      	cbnz	r1, 400160 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40014e:	4a09      	ldr	r2, [pc, #36]	; (400174 <rtt_sel_source+0x28>)
  400150:	6813      	ldr	r3, [r2, #0]
  400152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400156:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400158:	6802      	ldr	r2, [r0, #0]
  40015a:	4313      	orrs	r3, r2
  40015c:	6003      	str	r3, [r0, #0]
  40015e:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400160:	4a04      	ldr	r2, [pc, #16]	; (400174 <rtt_sel_source+0x28>)
  400162:	6813      	ldr	r3, [r2, #0]
  400164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400168:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40016a:	6802      	ldr	r2, [r0, #0]
  40016c:	4313      	orrs	r3, r2
  40016e:	6003      	str	r3, [r0, #0]
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	20000e24 	.word	0x20000e24

00400178 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400178:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40017a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40017e:	4b02      	ldr	r3, [pc, #8]	; (400188 <rtt_disable_interrupt+0x10>)
  400180:	681b      	ldr	r3, [r3, #0]
  400182:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400184:	6001      	str	r1, [r0, #0]
  400186:	4770      	bx	lr
  400188:	20000e24 	.word	0x20000e24

0040018c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  40018c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  40018e:	6883      	ldr	r3, [r0, #8]
  400190:	429a      	cmp	r2, r3
  400192:	d003      	beq.n	40019c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400194:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  400196:	6883      	ldr	r3, [r0, #8]
  400198:	4293      	cmp	r3, r2
  40019a:	d1fb      	bne.n	400194 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  40019c:	4618      	mov	r0, r3
  40019e:	4770      	bx	lr

004001a0 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4001a0:	68c0      	ldr	r0, [r0, #12]
}
  4001a2:	4770      	bx	lr

004001a4 <console_init>:
static uint8_t* newline; 

/*
*
*/
void console_init( ){
  4001a4:	4770      	bx	lr
	...

004001a8 <hal_cpu_init>:
*
*	Initializes the CPU. This function must be called before 
*	HAL IO Init. That is: hal_cpu_init(); hal_io_init(); 
*
*/
void hal_cpu_init(void){	
  4001a8:	b508      	push	{r3, lr}
	sysclk_init();  //initialize clocks
  4001aa:	4b01      	ldr	r3, [pc, #4]	; (4001b0 <hal_cpu_init+0x8>)
  4001ac:	4798      	blx	r3
  4001ae:	bd08      	pop	{r3, pc}
  4001b0:	00401b41 	.word	0x00401b41

004001b4 <hal_svc_start>:
*	execution of an SVC instruction
*
*	@param callback the function that gets called on supervisor calls
*/
void hal_svc_start( void(*callback)(void) ){
	svc_callback = callback; //SVC Handler definition is in hal_cpu_asm.s
  4001b4:	4b01      	ldr	r3, [pc, #4]	; (4001bc <hal_svc_start+0x8>)
  4001b6:	6018      	str	r0, [r3, #0]
  4001b8:	4770      	bx	lr
  4001ba:	bf00      	nop
  4001bc:	20001160 	.word	0x20001160

004001c0 <SysTick_Handler>:
	SysTick_Config( ms_to_ticks(tick_freq_in_ms) );
}

//The actual handler in the vector table entry
//(careful with the capital T in SysTick)
void SysTick_Handler(void){
  4001c0:	b508      	push	{r3, lr}
	(*systick_callback)();
  4001c2:	4b02      	ldr	r3, [pc, #8]	; (4001cc <SysTick_Handler+0xc>)
  4001c4:	681b      	ldr	r3, [r3, #0]
  4001c6:	4798      	blx	r3
  4001c8:	bd08      	pop	{r3, pc}
  4001ca:	bf00      	nop
  4001cc:	2000115c 	.word	0x2000115c

004001d0 <hal_delay>:
*
*	Busy-waiting delay
*
*	@param delay_in_ms delay in milliseconds
*/
void hal_delay(uint32_t delay_in_ms){
  4001d0:	b538      	push	{r3, r4, r5, lr}
	delay_ms(delay_in_ms);
  4001d2:	b918      	cbnz	r0, 4001dc <hal_delay+0xc>
  4001d4:	2009      	movs	r0, #9
  4001d6:	4b0a      	ldr	r3, [pc, #40]	; (400200 <hal_delay+0x30>)
  4001d8:	4798      	blx	r3
  4001da:	bd38      	pop	{r3, r4, r5, pc}
  4001dc:	4601      	mov	r1, r0
  4001de:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4001e2:	2300      	movs	r3, #0
  4001e4:	f243 64af 	movw	r4, #13999	; 0x36af
  4001e8:	2500      	movs	r5, #0
  4001ea:	4806      	ldr	r0, [pc, #24]	; (400204 <hal_delay+0x34>)
  4001ec:	fbe0 4501 	umlal	r4, r5, r0, r1
  4001f0:	4620      	mov	r0, r4
  4001f2:	4629      	mov	r1, r5
  4001f4:	4c04      	ldr	r4, [pc, #16]	; (400208 <hal_delay+0x38>)
  4001f6:	47a0      	blx	r4
  4001f8:	4b01      	ldr	r3, [pc, #4]	; (400200 <hal_delay+0x30>)
  4001fa:	4798      	blx	r3
  4001fc:	bd38      	pop	{r3, r4, r5, pc}
  4001fe:	bf00      	nop
  400200:	20000001 	.word	0x20000001
  400204:	07270e00 	.word	0x07270e00
  400208:	00403aa5 	.word	0x00403aa5

0040020c <SVC_Handler>:
//(no prologue and no epilogue to avoid
// changing the offsets of the stacked frame on SVC interrupt)
.thumb_func 
.global SVC_Handler
SVC_Handler:
	ldr	r3, =svc_callback
  40020c:	4b0d      	ldr	r3, [pc, #52]	; (400244 <hal_cpu_set_psp+0x8>)
	ldr r3, [r3]
  40020e:	681b      	ldr	r3, [r3, #0]
	bx	r3
  400210:	4718      	bx	r3

00400212 <hal_cpu_get_psp>:
*	Returns the process stack pointer
*/
.thumb_func 
.global hal_cpu_get_psp
hal_cpu_get_psp:
	mrs	r0, psp  //return psp
  400212:	f3ef 8009 	mrs	r0, PSP
	bx lr 
  400216:	4770      	bx	lr

00400218 <hal_cpu_set_unprivileged>:
*	Set the CPU as unprivileged (when in thread mode)s
*/
.thumb_func 
.global hal_cpu_set_unprivileged
hal_cpu_set_unprivileged:
	mrs r3, control
  400218:	f3ef 8314 	mrs	r3, CONTROL
	orr	r3, r3, #1
  40021c:	f043 0301 	orr.w	r3, r3, #1
	msr control, r3 /* control |= 1 */
  400220:	f383 8814 	msr	CONTROL, r3
	isb
  400224:	f3bf 8f6f 	isb	sy

	bx lr
  400228:	4770      	bx	lr

0040022a <hal_cpu_set_psp_active>:
*	Sets the Process Stack Pointer as active (when in thread mode)
*/
.thumb_func 
.global hal_cpu_set_psp_active
hal_cpu_set_psp_active:
	mrs r3, control
  40022a:	f3ef 8314 	mrs	r3, CONTROL
	orr	r3, r3, #2
  40022e:	f043 0302 	orr.w	r3, r3, #2
	msr control, r3 /* control |= 2 */
  400232:	f383 8814 	msr	CONTROL, r3
	isb
  400236:	f3bf 8f6f 	isb	sy

	bx lr
  40023a:	4770      	bx	lr

0040023c <hal_cpu_set_psp>:
*	Sets the Process Stack Pointer value
*/
.thumb_func 
.global hal_cpu_set_psp
hal_cpu_set_psp:
     msr psp, r0
  40023c:	f380 8809 	msr	PSP, r0

     bx lr
  400240:	4770      	bx	lr
  400242:	0000      	.short	0x0000
	ldr	r3, =svc_callback
  400244:	20001160 	.word	0x20001160

00400248 <button_handler>:
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, buttons_irq_priority);
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
}

//The Button interrupt service routine (ISR)
static void button_handler(uint32_t id, uint32_t mask){
  400248:	b508      	push	{r3, lr}
	
	if((PIN_PUSHBUTTON_0_ID == id) && (PIN_PUSHBUTTON_0_MASK == mask)){
  40024a:	280b      	cmp	r0, #11
  40024c:	d002      	beq.n	400254 <button_handler+0xc>
	}
	else if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask)){
		//Button 1 was pressed
		(*button_callback)(1);
	}
	else if((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask)){
  40024e:	280d      	cmp	r0, #13
  400250:	d00e      	beq.n	400270 <button_handler+0x28>
  400252:	bd08      	pop	{r3, pc}
	if((PIN_PUSHBUTTON_0_ID == id) && (PIN_PUSHBUTTON_0_MASK == mask)){
  400254:	2904      	cmp	r1, #4
  400256:	d006      	beq.n	400266 <button_handler+0x1e>
	else if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask)){
  400258:	2901      	cmp	r1, #1
  40025a:	d1fa      	bne.n	400252 <button_handler+0xa>
		(*button_callback)(1);
  40025c:	4b0c      	ldr	r3, [pc, #48]	; (400290 <button_handler+0x48>)
  40025e:	681b      	ldr	r3, [r3, #0]
  400260:	2001      	movs	r0, #1
  400262:	4798      	blx	r3
  400264:	bd08      	pop	{r3, pc}
		(*button_callback)(0);	
  400266:	4b0a      	ldr	r3, [pc, #40]	; (400290 <button_handler+0x48>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	2000      	movs	r0, #0
  40026c:	4798      	blx	r3
  40026e:	bd08      	pop	{r3, pc}
	else if((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask)){
  400270:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400274:	d007      	beq.n	400286 <button_handler+0x3e>
		//Button 2 was pressed
		(*button_callback)(2);
	}
	else if((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask)){
  400276:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  40027a:	d1ea      	bne.n	400252 <button_handler+0xa>
		//Button 3 was pressed
		(*button_callback)(3);
  40027c:	4b04      	ldr	r3, [pc, #16]	; (400290 <button_handler+0x48>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2003      	movs	r0, #3
  400282:	4798      	blx	r3
	}
	else{
		//Error
	}
}
  400284:	e7e5      	b.n	400252 <button_handler+0xa>
		(*button_callback)(2);
  400286:	4b02      	ldr	r3, [pc, #8]	; (400290 <button_handler+0x48>)
  400288:	681b      	ldr	r3, [r3, #0]
  40028a:	2002      	movs	r0, #2
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	20000e28 	.word	0x20000e28

00400294 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400294:	b570      	push	{r4, r5, r6, lr}
  400296:	b082      	sub	sp, #8
  400298:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40029a:	ac02      	add	r4, sp, #8
  40029c:	2302      	movs	r3, #2
  40029e:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4002a2:	4d09      	ldr	r5, [pc, #36]	; (4002c8 <ssd1306_write_command+0x34>)
  4002a4:	4621      	mov	r1, r4
  4002a6:	4628      	mov	r0, r5
  4002a8:	4b08      	ldr	r3, [pc, #32]	; (4002cc <ssd1306_write_command+0x38>)
  4002aa:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4002ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002b0:	4b07      	ldr	r3, [pc, #28]	; (4002d0 <ssd1306_write_command+0x3c>)
  4002b2:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4002b4:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  4002b6:	2056      	movs	r0, #86	; 0x56
  4002b8:	4b06      	ldr	r3, [pc, #24]	; (4002d4 <ssd1306_write_command+0x40>)
  4002ba:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4002bc:	4621      	mov	r1, r4
  4002be:	4628      	mov	r0, r5
  4002c0:	4b05      	ldr	r3, [pc, #20]	; (4002d8 <ssd1306_write_command+0x44>)
  4002c2:	4798      	blx	r3
#endif
}
  4002c4:	b002      	add	sp, #8
  4002c6:	bd70      	pop	{r4, r5, r6, pc}
  4002c8:	40008000 	.word	0x40008000
  4002cc:	00401c79 	.word	0x00401c79
  4002d0:	400e1200 	.word	0x400e1200
  4002d4:	20000001 	.word	0x20000001
  4002d8:	00401ca9 	.word	0x00401ca9

004002dc <configure_uart1>:
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
	NVIC_EnableIRQ(USART1_IRQn);
}


void configure_uart1(uint32_t baudrate){
  4002dc:	b530      	push	{r4, r5, lr}
  4002de:	b085      	sub	sp, #20
  4002e0:	4604      	mov	r4, r0
	pio_configure(PINS_UART1_PIO, PINS_UART1_TYPE, PINS_UART1_MASK, PINS_UART1_ATTR);
  4002e2:	2300      	movs	r3, #0
  4002e4:	220c      	movs	r2, #12
  4002e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002ea:	480c      	ldr	r0, [pc, #48]	; (40031c <configure_uart1+0x40>)
  4002ec:	4d0c      	ldr	r5, [pc, #48]	; (400320 <configure_uart1+0x44>)
  4002ee:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART1);
  4002f0:	2009      	movs	r0, #9
  4002f2:	4b0c      	ldr	r3, [pc, #48]	; (400324 <configure_uart1+0x48>)
  4002f4:	4798      	blx	r3
	
	const sam_uart_opt_t uart1_sett = { sysclk_get_cpu_hz(), baudrate, UART_SERIAL_MODE };
  4002f6:	4b0c      	ldr	r3, [pc, #48]	; (400328 <configure_uart1+0x4c>)
  4002f8:	9301      	str	r3, [sp, #4]
  4002fa:	9402      	str	r4, [sp, #8]
  4002fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400300:	9303      	str	r3, [sp, #12]
	uart_init(UART1,&uart1_sett);
  400302:	4c0a      	ldr	r4, [pc, #40]	; (40032c <configure_uart1+0x50>)
  400304:	a901      	add	r1, sp, #4
  400306:	4620      	mov	r0, r4
  400308:	4b09      	ldr	r3, [pc, #36]	; (400330 <configure_uart1+0x54>)
  40030a:	4798      	blx	r3
	uart_enable_tx(UART1);
  40030c:	4620      	mov	r0, r4
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <configure_uart1+0x58>)
  400310:	4798      	blx	r3
	uart_enable_rx(UART1);
  400312:	4620      	mov	r0, r4
  400314:	4b08      	ldr	r3, [pc, #32]	; (400338 <configure_uart1+0x5c>)
  400316:	4798      	blx	r3
}
  400318:	b005      	add	sp, #20
  40031a:	bd30      	pop	{r4, r5, pc}
  40031c:	400e1000 	.word	0x400e1000
  400320:	00401fc5 	.word	0x00401fc5
  400324:	00402565 	.word	0x00402565
  400328:	07270e00 	.word	0x07270e00
  40032c:	400e0800 	.word	0x400e0800
  400330:	00402aed 	.word	0x00402aed
  400334:	00402b23 	.word	0x00402b23
  400338:	00402b29 	.word	0x00402b29

0040033c <configure_usart1>:

void configure_usart1(uint32_t baudrate){
  40033c:	b530      	push	{r4, r5, lr}
  40033e:	b087      	sub	sp, #28
  400340:	4605      	mov	r5, r0
	pio_configure(PINS_USART1_PIO, PINS_USART1_TYPE, PINS_USART1_MASK, PINS_USART1_ATTR);
  400342:	2300      	movs	r3, #0
  400344:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  400348:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40034c:	480f      	ldr	r0, [pc, #60]	; (40038c <configure_usart1+0x50>)
  40034e:	4c10      	ldr	r4, [pc, #64]	; (400390 <configure_usart1+0x54>)
  400350:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_USART1);
  400352:	200f      	movs	r0, #15
  400354:	4c0f      	ldr	r4, [pc, #60]	; (400394 <configure_usart1+0x58>)
  400356:	47a0      	blx	r4

	const sam_usart_opt_t usart_console_settings = {
  400358:	2300      	movs	r3, #0
  40035a:	9303      	str	r3, [sp, #12]
  40035c:	9304      	str	r3, [sp, #16]
  40035e:	9305      	str	r3, [sp, #20]
  400360:	9500      	str	r5, [sp, #0]
  400362:	23c0      	movs	r3, #192	; 0xc0
  400364:	9301      	str	r3, [sp, #4]
  400366:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40036a:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40036c:	200f      	movs	r0, #15
  40036e:	47a0      	blx	r4
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};

	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	usart_init_rs232(USART_SERIAL, &usart_console_settings, sysclk_get_peripheral_hz());
  400370:	4c09      	ldr	r4, [pc, #36]	; (400398 <configure_usart1+0x5c>)
  400372:	4a0a      	ldr	r2, [pc, #40]	; (40039c <configure_usart1+0x60>)
  400374:	4669      	mov	r1, sp
  400376:	4620      	mov	r0, r4
  400378:	4b09      	ldr	r3, [pc, #36]	; (4003a0 <configure_usart1+0x64>)
  40037a:	4798      	blx	r3
	usart_enable_tx(USART_SERIAL);
  40037c:	4620      	mov	r0, r4
  40037e:	4b09      	ldr	r3, [pc, #36]	; (4003a4 <configure_usart1+0x68>)
  400380:	4798      	blx	r3
	usart_enable_rx(USART_SERIAL);
  400382:	4620      	mov	r0, r4
  400384:	4b08      	ldr	r3, [pc, #32]	; (4003a8 <configure_usart1+0x6c>)
  400386:	4798      	blx	r3
}
  400388:	b007      	add	sp, #28
  40038a:	bd30      	pop	{r4, r5, pc}
  40038c:	400e0e00 	.word	0x400e0e00
  400390:	00401fc5 	.word	0x00401fc5
  400394:	00402565 	.word	0x00402565
  400398:	40028000 	.word	0x40028000
  40039c:	07270e00 	.word	0x07270e00
  4003a0:	00402bdd 	.word	0x00402bdd
  4003a4:	00402c31 	.word	0x00402c31
  4003a8:	00402c37 	.word	0x00402c37

004003ac <hal_io_init>:
void hal_io_init(void){
  4003ac:	b510      	push	{r4, lr}
	board_init();		//initialize board pins
  4003ae:	4b05      	ldr	r3, [pc, #20]	; (4003c4 <hal_io_init+0x18>)
  4003b0:	4798      	blx	r3
  4003b2:	200b      	movs	r0, #11
  4003b4:	4c04      	ldr	r4, [pc, #16]	; (4003c8 <hal_io_init+0x1c>)
  4003b6:	47a0      	blx	r4
  4003b8:	200c      	movs	r0, #12
  4003ba:	47a0      	blx	r4
  4003bc:	200d      	movs	r0, #13
  4003be:	47a0      	blx	r4
  4003c0:	bd10      	pop	{r4, pc}
  4003c2:	bf00      	nop
  4003c4:	00401d51 	.word	0x00401d51
  4003c8:	00402565 	.word	0x00402565

004003cc <hal_mtimer_start>:
void hal_mtimer_start( uint32_t ms_steps ){
  4003cc:	b538      	push	{r3, r4, r5, lr}
  4003ce:	4604      	mov	r4, r0
	rtt_sel_source(RTT, false);
  4003d0:	4d08      	ldr	r5, [pc, #32]	; (4003f4 <hal_mtimer_start+0x28>)
  4003d2:	2100      	movs	r1, #0
  4003d4:	4628      	mov	r0, r5
  4003d6:	4b08      	ldr	r3, [pc, #32]	; (4003f8 <hal_mtimer_start+0x2c>)
  4003d8:	4798      	blx	r3
	uint32_t steps = ms_steps*33 > RTT_MAX_VAL ? RTT_MAX_VAL : ms_steps*33; 
  4003da:	eb04 1444 	add.w	r4, r4, r4, lsl #5
  4003de:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  4003e2:	bf28      	it	cs
  4003e4:	f44f 4400 	movcs.w	r4, #32768	; 0x8000
	rtt_init(RTT, steps ); 
  4003e8:	b2a1      	uxth	r1, r4
  4003ea:	4628      	mov	r0, r5
  4003ec:	4b03      	ldr	r3, [pc, #12]	; (4003fc <hal_mtimer_start+0x30>)
  4003ee:	4798      	blx	r3
  4003f0:	bd38      	pop	{r3, r4, r5, pc}
  4003f2:	bf00      	nop
  4003f4:	400e1430 	.word	0x400e1430
  4003f8:	0040014d 	.word	0x0040014d
  4003fc:	00400139 	.word	0x00400139

00400400 <RTT_Handler>:
void RTT_Handler(void){
  400400:	b508      	push	{r3, lr}
	uint32_t ul_status = rtt_get_status(RTT);
  400402:	4805      	ldr	r0, [pc, #20]	; (400418 <RTT_Handler+0x18>)
  400404:	4b05      	ldr	r3, [pc, #20]	; (40041c <RTT_Handler+0x1c>)
  400406:	4798      	blx	r3
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
  400408:	f010 0f02 	tst.w	r0, #2
  40040c:	d100      	bne.n	400410 <RTT_Handler+0x10>
  40040e:	bd08      	pop	{r3, pc}
		(*timer_callback)(); //call registered callback
  400410:	4b03      	ldr	r3, [pc, #12]	; (400420 <RTT_Handler+0x20>)
  400412:	681b      	ldr	r3, [r3, #0]
  400414:	4798      	blx	r3
}
  400416:	e7fa      	b.n	40040e <RTT_Handler+0xe>
  400418:	400e1430 	.word	0x400e1430
  40041c:	004001a1 	.word	0x004001a1
  400420:	20000e2c 	.word	0x20000e2c

00400424 <hal_mtimer_stop>:
void hal_mtimer_stop(void){
  400424:	b508      	push	{r3, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400426:	4b06      	ldr	r3, [pc, #24]	; (400440 <hal_mtimer_stop+0x1c>)
  400428:	2208      	movs	r2, #8
  40042a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40042e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN);
  400432:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400436:	4803      	ldr	r0, [pc, #12]	; (400444 <hal_mtimer_stop+0x20>)
  400438:	4b03      	ldr	r3, [pc, #12]	; (400448 <hal_mtimer_stop+0x24>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	e000e100 	.word	0xe000e100
  400444:	400e1430 	.word	0x400e1430
  400448:	00400179 	.word	0x00400179

0040044c <hal_mtimer_read>:
uint32_t hal_mtimer_read( void ){
  40044c:	b508      	push	{r3, lr}
	return rtt_read_timer_value (RTT);
  40044e:	4802      	ldr	r0, [pc, #8]	; (400458 <hal_mtimer_read+0xc>)
  400450:	4b02      	ldr	r3, [pc, #8]	; (40045c <hal_mtimer_read+0x10>)
  400452:	4798      	blx	r3
}
  400454:	bd08      	pop	{r3, pc}
  400456:	bf00      	nop
  400458:	400e1430 	.word	0x400e1430
  40045c:	0040018d 	.word	0x0040018d

00400460 <hal_led_start>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400460:	4b0f      	ldr	r3, [pc, #60]	; (4004a0 <hal_led_start+0x40>)
  400462:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400466:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400468:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40046c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400470:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400472:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400476:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  40047a:	f5a2 32f9 	sub.w	r2, r2, #127488	; 0x1f200
  40047e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400482:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400484:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400488:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40048c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40048e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400492:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400496:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400498:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  40049c:	4770      	bx	lr
  40049e:	bf00      	nop
  4004a0:	400e1200 	.word	0x400e1200

004004a4 <hal_led_write>:
	switch(lednum){
  4004a4:	2804      	cmp	r0, #4
  4004a6:	d81b      	bhi.n	4004e0 <hal_led_write+0x3c>
  4004a8:	e8df f000 	tbb	[pc, r0]
  4004ac:	16141203 	.word	0x16141203
  4004b0:	18          	.byte	0x18
  4004b1:	00          	.byte	0x00
		case Led0: IOLine = IOPORT_CREATE_PIN(PIOC, 23); break;
  4004b2:	2257      	movs	r2, #87	; 0x57
	return pin >> 5;
  4004b4:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4004b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004ba:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004be:	025b      	lsls	r3, r3, #9
	if (level) {
  4004c0:	b181      	cbz	r1, 4004e4 <hal_led_write+0x40>
	return 1U << (pin & 0x1F);
  4004c2:	f002 021f 	and.w	r2, r2, #31
  4004c6:	2101      	movs	r1, #1
  4004c8:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4004cc:	635a      	str	r2, [r3, #52]	; 0x34
  4004ce:	4770      	bx	lr
		case Led1: IOLine = IOPORT_CREATE_PIN(PIOC, 20); break;
  4004d0:	2254      	movs	r2, #84	; 0x54
  4004d2:	e7ef      	b.n	4004b4 <hal_led_write+0x10>
		case Led2: IOLine = IOPORT_CREATE_PIN(PIOA, 16); break;
  4004d4:	2210      	movs	r2, #16
  4004d6:	e7ed      	b.n	4004b4 <hal_led_write+0x10>
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
  4004d8:	2256      	movs	r2, #86	; 0x56
  4004da:	e7eb      	b.n	4004b4 <hal_led_write+0x10>
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
  4004dc:	2253      	movs	r2, #83	; 0x53
  4004de:	e7e9      	b.n	4004b4 <hal_led_write+0x10>
	uint32_t IOLine = 0;
  4004e0:	2200      	movs	r2, #0
  4004e2:	e7e7      	b.n	4004b4 <hal_led_write+0x10>
	return 1U << (pin & 0x1F);
  4004e4:	f002 021f 	and.w	r2, r2, #31
  4004e8:	2101      	movs	r1, #1
  4004ea:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004ee:	631a      	str	r2, [r3, #48]	; 0x30
  4004f0:	4770      	bx	lr

004004f2 <hal_led_read>:
	switch(lednum){
  4004f2:	2804      	cmp	r0, #4
  4004f4:	d81e      	bhi.n	400534 <hal_led_read+0x42>
  4004f6:	e8df f000 	tbb	[pc, r0]
  4004fa:	1503      	.short	0x1503
  4004fc:	1917      	.short	0x1917
  4004fe:	1b          	.byte	0x1b
  4004ff:	00          	.byte	0x00
		case Led0: IOLine = IOPORT_CREATE_PIN(PIOC, 23); break;
  400500:	2257      	movs	r2, #87	; 0x57
	return pin >> 5;
  400502:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400504:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400508:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40050c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40050e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400510:	f002 021f 	and.w	r2, r2, #31
  400514:	2301      	movs	r3, #1
  400516:	fa03 f202 	lsl.w	r2, r3, r2
	return !ioport_get_pin_level(IOLine); //negated since pin levels and LEDs state are opposite
  40051a:	420a      	tst	r2, r1
}
  40051c:	bf0c      	ite	eq
  40051e:	4618      	moveq	r0, r3
  400520:	2000      	movne	r0, #0
  400522:	4770      	bx	lr
		case Led1: IOLine = IOPORT_CREATE_PIN(PIOC, 20); break;
  400524:	2254      	movs	r2, #84	; 0x54
  400526:	e7ec      	b.n	400502 <hal_led_read+0x10>
		case Led2: IOLine = IOPORT_CREATE_PIN(PIOA, 16); break;
  400528:	2210      	movs	r2, #16
  40052a:	e7ea      	b.n	400502 <hal_led_read+0x10>
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
  40052c:	2256      	movs	r2, #86	; 0x56
  40052e:	e7e8      	b.n	400502 <hal_led_read+0x10>
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
  400530:	2253      	movs	r2, #83	; 0x53
  400532:	e7e6      	b.n	400502 <hal_led_read+0x10>
	uint32_t IOLine = 0;
  400534:	2200      	movs	r2, #0
  400536:	e7e4      	b.n	400502 <hal_led_read+0x10>

00400538 <hal_clock_start>:
void hal_clock_start( void ){
  400538:	b510      	push	{r4, lr}
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40053a:	2000      	movs	r0, #0
  40053c:	4b05      	ldr	r3, [pc, #20]	; (400554 <hal_clock_start+0x1c>)
  40053e:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  400540:	4c05      	ldr	r4, [pc, #20]	; (400558 <hal_clock_start+0x20>)
  400542:	47a0      	blx	r4
  400544:	2800      	cmp	r0, #0
  400546:	d0fc      	beq.n	400542 <hal_clock_start+0xa>
	rtc_set_hour_mode(RTC, 0); //24-hrs mode by default
  400548:	2100      	movs	r1, #0
  40054a:	4804      	ldr	r0, [pc, #16]	; (40055c <hal_clock_start+0x24>)
  40054c:	4b04      	ldr	r3, [pc, #16]	; (400560 <hal_clock_start+0x28>)
  40054e:	4798      	blx	r3
  400550:	bd10      	pop	{r4, pc}
  400552:	bf00      	nop
  400554:	0040249d 	.word	0x0040249d
  400558:	004024c1 	.word	0x004024c1
  40055c:	400e1460 	.word	0x400e1460
  400560:	004025b9 	.word	0x004025b9

00400564 <hal_clock_write>:
void hal_clock_write( tTime* t ){
  400564:	b570      	push	{r4, r5, r6, lr}
  400566:	b082      	sub	sp, #8
  400568:	4604      	mov	r4, r0
	rtc_set_date( RTC, t->year, t->month, t->day, 1 );	//not too sure how week works, but if week is
  40056a:	4d08      	ldr	r5, [pc, #32]	; (40058c <hal_clock_write+0x28>)
  40056c:	2301      	movs	r3, #1
  40056e:	9300      	str	r3, [sp, #0]
  400570:	68c3      	ldr	r3, [r0, #12]
  400572:	6902      	ldr	r2, [r0, #16]
  400574:	6941      	ldr	r1, [r0, #20]
  400576:	4628      	mov	r0, r5
  400578:	4e05      	ldr	r6, [pc, #20]	; (400590 <hal_clock_write+0x2c>)
  40057a:	47b0      	blx	r6
	rtc_set_time( RTC, t->hours, t->minutes, t->seconds );
  40057c:	6823      	ldr	r3, [r4, #0]
  40057e:	6862      	ldr	r2, [r4, #4]
  400580:	68a1      	ldr	r1, [r4, #8]
  400582:	4628      	mov	r0, r5
  400584:	4c03      	ldr	r4, [pc, #12]	; (400594 <hal_clock_write+0x30>)
  400586:	47a0      	blx	r4
}
  400588:	b002      	add	sp, #8
  40058a:	bd70      	pop	{r4, r5, r6, pc}
  40058c:	400e1460 	.word	0x400e1460
  400590:	00402731 	.word	0x00402731
  400594:	00402629 	.word	0x00402629

00400598 <hal_clock_read>:
void hal_clock_read( tTime* t ){
  400598:	b5f0      	push	{r4, r5, r6, r7, lr}
  40059a:	b085      	sub	sp, #20
  40059c:	4604      	mov	r4, r0
	uint32_t dummy_week = 0;
  40059e:	ad04      	add	r5, sp, #16
  4005a0:	2300      	movs	r3, #0
  4005a2:	f845 3d04 	str.w	r3, [r5, #-4]!
	rtc_get_time(RTC, &(t->hours), &(t->minutes), &(t->seconds));
  4005a6:	4e0a      	ldr	r6, [pc, #40]	; (4005d0 <hal_clock_read+0x38>)
  4005a8:	4603      	mov	r3, r0
  4005aa:	1d02      	adds	r2, r0, #4
  4005ac:	f100 0108 	add.w	r1, r0, #8
  4005b0:	4630      	mov	r0, r6
  4005b2:	4f08      	ldr	r7, [pc, #32]	; (4005d4 <hal_clock_read+0x3c>)
  4005b4:	47b8      	blx	r7
	rtc_get_date(RTC, &(t->year), &(t->month), &(t->day), &dummy_week);
  4005b6:	9500      	str	r5, [sp, #0]
  4005b8:	f104 030c 	add.w	r3, r4, #12
  4005bc:	f104 0210 	add.w	r2, r4, #16
  4005c0:	f104 0114 	add.w	r1, r4, #20
  4005c4:	4630      	mov	r0, r6
  4005c6:	4c04      	ldr	r4, [pc, #16]	; (4005d8 <hal_clock_read+0x40>)
  4005c8:	47a0      	blx	r4
}
  4005ca:	b005      	add	sp, #20
  4005cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4005ce:	bf00      	nop
  4005d0:	400e1460 	.word	0x400e1460
  4005d4:	004025cf 	.word	0x004025cf
  4005d8:	004026bd 	.word	0x004026bd

004005dc <hal_display_start>:
void hal_display_start(void){
  4005dc:	b508      	push	{r3, lr}
	ssd1306_init();	//on-board OLED
  4005de:	4b01      	ldr	r3, [pc, #4]	; (4005e4 <hal_display_start+0x8>)
  4005e0:	4798      	blx	r3
  4005e2:	bd08      	pop	{r3, pc}
  4005e4:	00400e95 	.word	0x00400e95

004005e8 <hal_display_putc>:
void hal_display_putc( uint8_t character ){
  4005e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4005ec:	b082      	sub	sp, #8
	char_ptr = font_table[character - 32];
  4005ee:	3820      	subs	r0, #32
  4005f0:	4b1f      	ldr	r3, [pc, #124]	; (400670 <hal_display_putc+0x88>)
  4005f2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
	for (i = 1; i <= char_ptr[0]; i++) {
  4005f6:	783b      	ldrb	r3, [r7, #0]
  4005f8:	b303      	cbz	r3, 40063c <hal_display_putc+0x54>
  4005fa:	2401      	movs	r4, #1
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4005fc:	4e1d      	ldr	r6, [pc, #116]	; (400674 <hal_display_putc+0x8c>)
  4005fe:	f8df 9080 	ldr.w	r9, [pc, #128]	; 400680 <hal_display_putc+0x98>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400602:	f8df 8080 	ldr.w	r8, [pc, #128]	; 400684 <hal_display_putc+0x9c>
		ssd1306_write_data(char_ptr[i]);
  400606:	f817 a004 	ldrb.w	sl, [r7, r4]
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40060a:	ad02      	add	r5, sp, #8
  40060c:	2302      	movs	r3, #2
  40060e:	f845 3d04 	str.w	r3, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400612:	4629      	mov	r1, r5
  400614:	4630      	mov	r0, r6
  400616:	47c8      	blx	r9
  400618:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40061c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  400620:	f8c6 a00c 	str.w	sl, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  400624:	2056      	movs	r0, #86	; 0x56
  400626:	4b14      	ldr	r3, [pc, #80]	; (400678 <hal_display_putc+0x90>)
  400628:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40062a:	4629      	mov	r1, r5
  40062c:	4630      	mov	r0, r6
  40062e:	4b13      	ldr	r3, [pc, #76]	; (40067c <hal_display_putc+0x94>)
  400630:	4798      	blx	r3
	for (i = 1; i <= char_ptr[0]; i++) {
  400632:	3401      	adds	r4, #1
  400634:	b2e4      	uxtb	r4, r4
  400636:	783b      	ldrb	r3, [r7, #0]
  400638:	42a3      	cmp	r3, r4
  40063a:	d2e4      	bcs.n	400606 <hal_display_putc+0x1e>
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40063c:	ac02      	add	r4, sp, #8
  40063e:	2302      	movs	r3, #2
  400640:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400644:	4d0b      	ldr	r5, [pc, #44]	; (400674 <hal_display_putc+0x8c>)
  400646:	4621      	mov	r1, r4
  400648:	4628      	mov	r0, r5
  40064a:	4b0d      	ldr	r3, [pc, #52]	; (400680 <hal_display_putc+0x98>)
  40064c:	4798      	blx	r3
  40064e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400652:	4b0c      	ldr	r3, [pc, #48]	; (400684 <hal_display_putc+0x9c>)
  400654:	631a      	str	r2, [r3, #48]	; 0x30
  400656:	2300      	movs	r3, #0
  400658:	60eb      	str	r3, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  40065a:	2056      	movs	r0, #86	; 0x56
  40065c:	4b06      	ldr	r3, [pc, #24]	; (400678 <hal_display_putc+0x90>)
  40065e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400660:	4621      	mov	r1, r4
  400662:	4628      	mov	r0, r5
  400664:	4b05      	ldr	r3, [pc, #20]	; (40067c <hal_display_putc+0x94>)
  400666:	4798      	blx	r3
}
  400668:	b002      	add	sp, #8
  40066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40066e:	bf00      	nop
  400670:	200002ac 	.word	0x200002ac
  400674:	40008000 	.word	0x40008000
  400678:	20000001 	.word	0x20000001
  40067c:	00401ca9 	.word	0x00401ca9
  400680:	00401c79 	.word	0x00401c79
  400684:	400e1200 	.word	0x400e1200

00400688 <hal_display_cls>:
void hal_display_cls(void){
  400688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40068c:	b083      	sub	sp, #12
  40068e:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400692:	f8df b078 	ldr.w	fp, [pc, #120]	; 40070c <hal_display_cls+0x84>
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400696:	4657      	mov	r7, sl
  400698:	f8df 9074 	ldr.w	r9, [pc, #116]	; 400710 <hal_display_cls+0x88>
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40069c:	f00a 0007 	and.w	r0, sl, #7
  4006a0:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4006a4:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4006a6:	2010      	movs	r0, #16
  4006a8:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4006aa:	4638      	mov	r0, r7
  4006ac:	47d8      	blx	fp
  4006ae:	2680      	movs	r6, #128	; 0x80
	spi_select_device(SSD1306_SPI, &device);
  4006b0:	4d13      	ldr	r5, [pc, #76]	; (400700 <hal_display_cls+0x78>)
  4006b2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 400714 <hal_display_cls+0x8c>
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4006b6:	ac02      	add	r4, sp, #8
  4006b8:	2302      	movs	r3, #2
  4006ba:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4006be:	4621      	mov	r1, r4
  4006c0:	4628      	mov	r0, r5
  4006c2:	47c0      	blx	r8
  4006c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4006c8:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  4006cc:	60ef      	str	r7, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  4006ce:	2056      	movs	r0, #86	; 0x56
  4006d0:	4b0c      	ldr	r3, [pc, #48]	; (400704 <hal_display_cls+0x7c>)
  4006d2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4006d4:	4621      	mov	r1, r4
  4006d6:	4628      	mov	r0, r5
  4006d8:	4b0b      	ldr	r3, [pc, #44]	; (400708 <hal_display_cls+0x80>)
  4006da:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  4006dc:	3e01      	subs	r6, #1
  4006de:	d1ea      	bne.n	4006b6 <hal_display_cls+0x2e>
  4006e0:	f10a 0a01 	add.w	sl, sl, #1
	for (page = 0; page < 4; ++page)
  4006e4:	f1ba 0f04 	cmp.w	sl, #4
  4006e8:	d1d8      	bne.n	40069c <hal_display_cls+0x14>
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4006ea:	20b0      	movs	r0, #176	; 0xb0
  4006ec:	4c07      	ldr	r4, [pc, #28]	; (40070c <hal_display_cls+0x84>)
  4006ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4006f0:	2010      	movs	r0, #16
  4006f2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4006f4:	2000      	movs	r0, #0
  4006f6:	47a0      	blx	r4
}
  4006f8:	b003      	add	sp, #12
  4006fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4006fe:	bf00      	nop
  400700:	40008000 	.word	0x40008000
  400704:	20000001 	.word	0x20000001
  400708:	00401ca9 	.word	0x00401ca9
  40070c:	00400295 	.word	0x00400295
  400710:	400e1200 	.word	0x400e1200
  400714:	00401c79 	.word	0x00401c79

00400718 <hal_display_gotoxy>:
void hal_display_gotoxy( uint32_t x, uint32_t y ){
  400718:	b570      	push	{r4, r5, r6, lr}
  40071a:	460d      	mov	r5, r1
	ssd1306_set_column_address(x);
  40071c:	b2c6      	uxtb	r6, r0
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40071e:	f3c6 1002 	ubfx	r0, r6, #4, #3
  400722:	f040 0010 	orr.w	r0, r0, #16
  400726:	4c05      	ldr	r4, [pc, #20]	; (40073c <hal_display_gotoxy+0x24>)
  400728:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40072a:	f006 000f 	and.w	r0, r6, #15
  40072e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400730:	f005 0007 	and.w	r0, r5, #7
  400734:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400738:	47a0      	blx	r4
  40073a:	bd70      	pop	{r4, r5, r6, pc}
  40073c:	00400295 	.word	0x00400295

00400740 <hal_display_numlines>:
}
  400740:	2004      	movs	r0, #4
  400742:	4770      	bx	lr

00400744 <hal_sensor_start>:
void hal_sensor_start( tSensorId sensor_id ){
  400744:	b538      	push	{r3, r4, r5, lr}
	switch( sensor_id ){
  400746:	b110      	cbz	r0, 40074e <hal_sensor_start+0xa>
  400748:	2801      	cmp	r0, #1
  40074a:	d01c      	beq.n	400786 <hal_sensor_start+0x42>
  40074c:	bd38      	pop	{r3, r4, r5, pc}
	gpio_configure_pin(LIGHT_SENSOR_GPIO, LIGHT_SENSOR_FLAGS);
  40074e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400752:	2020      	movs	r0, #32
  400754:	4b0d      	ldr	r3, [pc, #52]	; (40078c <hal_sensor_start+0x48>)
  400756:	4798      	blx	r3
	pmc_enable_periph_clk(ID_ADC);
  400758:	201d      	movs	r0, #29
  40075a:	4b0d      	ldr	r3, [pc, #52]	; (400790 <hal_sensor_start+0x4c>)
  40075c:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), 1000000, ADC_MR_STARTUP_SUT0);
  40075e:	4c0d      	ldr	r4, [pc, #52]	; (400794 <hal_sensor_start+0x50>)
  400760:	2300      	movs	r3, #0
  400762:	4a0d      	ldr	r2, [pc, #52]	; (400798 <hal_sensor_start+0x54>)
  400764:	490d      	ldr	r1, [pc, #52]	; (40079c <hal_sensor_start+0x58>)
  400766:	4620      	mov	r0, r4
  400768:	4d0d      	ldr	r5, [pc, #52]	; (4007a0 <hal_sensor_start+0x5c>)
  40076a:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_4);		//ADC channel 4
  40076c:	2104      	movs	r1, #4
  40076e:	4620      	mov	r0, r4
  400770:	4b0c      	ldr	r3, [pc, #48]	; (4007a4 <hal_sensor_start+0x60>)
  400772:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 1);	
  400774:	2201      	movs	r2, #1
  400776:	2100      	movs	r1, #0
  400778:	4620      	mov	r0, r4
  40077a:	4b0b      	ldr	r3, [pc, #44]	; (4007a8 <hal_sensor_start+0x64>)
  40077c:	4798      	blx	r3
	adc_start(ADC);		
  40077e:	4620      	mov	r0, r4
  400780:	4b0a      	ldr	r3, [pc, #40]	; (4007ac <hal_sensor_start+0x68>)
  400782:	4798      	blx	r3
  400784:	bd38      	pop	{r3, r4, r5, pc}
	at30tse_init();	
  400786:	4b0a      	ldr	r3, [pc, #40]	; (4007b0 <hal_sensor_start+0x6c>)
  400788:	4798      	blx	r3
  40078a:	bd38      	pop	{r3, r4, r5, pc}
  40078c:	004020ad 	.word	0x004020ad
  400790:	00402565 	.word	0x00402565
  400794:	40038000 	.word	0x40038000
  400798:	000f4240 	.word	0x000f4240
  40079c:	07270e00 	.word	0x07270e00
  4007a0:	00401e61 	.word	0x00401e61
  4007a4:	00401ea9 	.word	0x00401ea9
  4007a8:	00401e95 	.word	0x00401e95
  4007ac:	00401ea3 	.word	0x00401ea3
  4007b0:	00400f4d 	.word	0x00400f4d
  4007b4:	00000000 	.word	0x00000000

004007b8 <hal_sensor_read>:
uint32_t hal_sensor_read( tSensorId sensor_id ){
  4007b8:	b510      	push	{r4, lr}
  4007ba:	b084      	sub	sp, #16
	switch( sensor_id ){
  4007bc:	b118      	cbz	r0, 4007c6 <hal_sensor_read+0xe>
  4007be:	2801      	cmp	r0, #1
  4007c0:	d01a      	beq.n	4007f8 <hal_sensor_read+0x40>
	uint32_t val = 0;
  4007c2:	2000      	movs	r0, #0
	return val;
  4007c4:	e016      	b.n	4007f4 <hal_sensor_read+0x3c>
	return adc_get_channel_value(ADC, ADC_CHANNEL_4);
  4007c6:	2104      	movs	r1, #4
  4007c8:	481b      	ldr	r0, [pc, #108]	; (400838 <hal_sensor_read+0x80>)
  4007ca:	4b1c      	ldr	r3, [pc, #112]	; (40083c <hal_sensor_read+0x84>)
  4007cc:	4798      	blx	r3
			val = 100 - ( val/4095.0 * 100 ); //normalize to 100, 0 being darkest
  4007ce:	4b1c      	ldr	r3, [pc, #112]	; (400840 <hal_sensor_read+0x88>)
  4007d0:	4798      	blx	r3
  4007d2:	a317      	add	r3, pc, #92	; (adr r3, 400830 <hal_sensor_read+0x78>)
  4007d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4007d8:	4c1a      	ldr	r4, [pc, #104]	; (400844 <hal_sensor_read+0x8c>)
  4007da:	47a0      	blx	r4
  4007dc:	2200      	movs	r2, #0
  4007de:	4b1a      	ldr	r3, [pc, #104]	; (400848 <hal_sensor_read+0x90>)
  4007e0:	4c1a      	ldr	r4, [pc, #104]	; (40084c <hal_sensor_read+0x94>)
  4007e2:	47a0      	blx	r4
  4007e4:	4602      	mov	r2, r0
  4007e6:	460b      	mov	r3, r1
  4007e8:	2000      	movs	r0, #0
  4007ea:	4917      	ldr	r1, [pc, #92]	; (400848 <hal_sensor_read+0x90>)
  4007ec:	4c18      	ldr	r4, [pc, #96]	; (400850 <hal_sensor_read+0x98>)
  4007ee:	47a0      	blx	r4
  4007f0:	4b18      	ldr	r3, [pc, #96]	; (400854 <hal_sensor_read+0x9c>)
  4007f2:	4798      	blx	r3
}
  4007f4:	b004      	add	sp, #16
  4007f6:	bd10      	pop	{r4, pc}
	volatile double ret_val = 0;
  4007f8:	2200      	movs	r2, #0
  4007fa:	2300      	movs	r3, #0
  4007fc:	e9cd 2300 	strd	r2, r3, [sp]
	volatile uint64_t tries = 3;
  400800:	2203      	movs	r2, #3
  400802:	2300      	movs	r3, #0
  400804:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while( at30tse_read_temperature(&ret_val) != TWI_SUCCESS && tries++ <= 3);
  400808:	4c13      	ldr	r4, [pc, #76]	; (400858 <hal_sensor_read+0xa0>)
  40080a:	4668      	mov	r0, sp
  40080c:	47a0      	blx	r4
  40080e:	b150      	cbz	r0, 400826 <hal_sensor_read+0x6e>
  400810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400814:	1c50      	adds	r0, r2, #1
  400816:	f143 0100 	adc.w	r1, r3, #0
  40081a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40081e:	2b00      	cmp	r3, #0
  400820:	bf08      	it	eq
  400822:	2a04      	cmpeq	r2, #4
  400824:	d3f1      	bcc.n	40080a <hal_sensor_read+0x52>
	return (uint32_t)ret_val; //return truncated temperature
  400826:	e9dd 0100 	ldrd	r0, r1, [sp]
  40082a:	4b0a      	ldr	r3, [pc, #40]	; (400854 <hal_sensor_read+0x9c>)
  40082c:	4798      	blx	r3
			break;
  40082e:	e7e1      	b.n	4007f4 <hal_sensor_read+0x3c>
  400830:	00000000 	.word	0x00000000
  400834:	40affe00 	.word	0x40affe00
  400838:	40038000 	.word	0x40038000
  40083c:	00401eb3 	.word	0x00401eb3
  400840:	00403555 	.word	0x00403555
  400844:	00403895 	.word	0x00403895
  400848:	40590000 	.word	0x40590000
  40084c:	00403641 	.word	0x00403641
  400850:	004032d9 	.word	0x004032d9
  400854:	00403a65 	.word	0x00403a65
  400858:	00400fb9 	.word	0x00400fb9

0040085c <hal_button_start_int>:
void hal_button_start_int( void (*callback) (tButtonNum) ){
  40085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400860:	b083      	sub	sp, #12
	button_callback = callback; 
  400862:	4b38      	ldr	r3, [pc, #224]	; (400944 <hal_button_start_int+0xe8>)
  400864:	6018      	str	r0, [r3, #0]
	pmc_enable_periph_clk(PIN_PUSHBUTTON_0_ID);
  400866:	200b      	movs	r0, #11
  400868:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 400960 <hal_button_start_int+0x104>
  40086c:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_0_PIO, PIN_PUSHBUTTON_0_MASK, 10);
  40086e:	220a      	movs	r2, #10
  400870:	2104      	movs	r1, #4
  400872:	4835      	ldr	r0, [pc, #212]	; (400948 <hal_button_start_int+0xec>)
  400874:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 400964 <hal_button_start_int+0x108>
  400878:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_0_PIO, PIN_PUSHBUTTON_0_ID,
  40087a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 400968 <hal_button_start_int+0x10c>
  40087e:	f8cd 8000 	str.w	r8, [sp]
  400882:	2379      	movs	r3, #121	; 0x79
  400884:	2204      	movs	r2, #4
  400886:	210b      	movs	r1, #11
  400888:	482f      	ldr	r0, [pc, #188]	; (400948 <hal_button_start_int+0xec>)
  40088a:	4f30      	ldr	r7, [pc, #192]	; (40094c <hal_button_start_int+0xf0>)
  40088c:	47b8      	blx	r7
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40088e:	4e30      	ldr	r6, [pc, #192]	; (400950 <hal_button_start_int+0xf4>)
  400890:	f44f 6b00 	mov.w	fp, #2048	; 0x800
  400894:	f8c6 b000 	str.w	fp, [r6]
	pio_handler_set_priority(PIN_PUSHBUTTON_0_PIO, (IRQn_Type) PIN_PUSHBUTTON_0_ID, buttons_irq_priority);
  400898:	2205      	movs	r2, #5
  40089a:	210b      	movs	r1, #11
  40089c:	482a      	ldr	r0, [pc, #168]	; (400948 <hal_button_start_int+0xec>)
  40089e:	4d2d      	ldr	r5, [pc, #180]	; (400954 <hal_button_start_int+0xf8>)
  4008a0:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_0_PIO, PIN_PUSHBUTTON_0_MASK);
  4008a2:	2104      	movs	r1, #4
  4008a4:	4828      	ldr	r0, [pc, #160]	; (400948 <hal_button_start_int+0xec>)
  4008a6:	4c2c      	ldr	r4, [pc, #176]	; (400958 <hal_button_start_int+0xfc>)
  4008a8:	47a0      	blx	r4
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  4008aa:	200b      	movs	r0, #11
  4008ac:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  4008ae:	220a      	movs	r2, #10
  4008b0:	2101      	movs	r1, #1
  4008b2:	4825      	ldr	r0, [pc, #148]	; (400948 <hal_button_start_int+0xec>)
  4008b4:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  4008b6:	f8cd 8000 	str.w	r8, [sp]
  4008ba:	2379      	movs	r3, #121	; 0x79
  4008bc:	2201      	movs	r2, #1
  4008be:	210b      	movs	r1, #11
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <hal_button_start_int+0xec>)
  4008c2:	47b8      	blx	r7
  4008c4:	f8c6 b000 	str.w	fp, [r6]
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, buttons_irq_priority);
  4008c8:	2205      	movs	r2, #5
  4008ca:	210b      	movs	r1, #11
  4008cc:	481e      	ldr	r0, [pc, #120]	; (400948 <hal_button_start_int+0xec>)
  4008ce:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  4008d0:	2101      	movs	r1, #1
  4008d2:	481d      	ldr	r0, [pc, #116]	; (400948 <hal_button_start_int+0xec>)
  4008d4:	47a0      	blx	r4
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  4008d6:	200d      	movs	r0, #13
  4008d8:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  4008da:	220a      	movs	r2, #10
  4008dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4008e0:	481e      	ldr	r0, [pc, #120]	; (40095c <hal_button_start_int+0x100>)
  4008e2:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  4008e4:	f8cd 8000 	str.w	r8, [sp]
  4008e8:	2379      	movs	r3, #121	; 0x79
  4008ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008ee:	210d      	movs	r1, #13
  4008f0:	481a      	ldr	r0, [pc, #104]	; (40095c <hal_button_start_int+0x100>)
  4008f2:	47b8      	blx	r7
  4008f4:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  4008f8:	f8c6 b000 	str.w	fp, [r6]
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, buttons_irq_priority);
  4008fc:	2205      	movs	r2, #5
  4008fe:	210d      	movs	r1, #13
  400900:	4816      	ldr	r0, [pc, #88]	; (40095c <hal_button_start_int+0x100>)
  400902:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  400904:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400908:	4814      	ldr	r0, [pc, #80]	; (40095c <hal_button_start_int+0x100>)
  40090a:	47a0      	blx	r4
	pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  40090c:	200d      	movs	r0, #13
  40090e:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  400910:	220a      	movs	r2, #10
  400912:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400916:	4811      	ldr	r0, [pc, #68]	; (40095c <hal_button_start_int+0x100>)
  400918:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  40091a:	f8cd 8000 	str.w	r8, [sp]
  40091e:	2379      	movs	r3, #121	; 0x79
  400920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400924:	210d      	movs	r1, #13
  400926:	480d      	ldr	r0, [pc, #52]	; (40095c <hal_button_start_int+0x100>)
  400928:	47b8      	blx	r7
  40092a:	f8c6 b000 	str.w	fp, [r6]
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, buttons_irq_priority);
  40092e:	2205      	movs	r2, #5
  400930:	210d      	movs	r1, #13
  400932:	480a      	ldr	r0, [pc, #40]	; (40095c <hal_button_start_int+0x100>)
  400934:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  400936:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40093a:	4808      	ldr	r0, [pc, #32]	; (40095c <hal_button_start_int+0x100>)
  40093c:	47a0      	blx	r4
}
  40093e:	b003      	add	sp, #12
  400940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400944:	20000e28 	.word	0x20000e28
  400948:	400e0e00 	.word	0x400e0e00
  40094c:	0040230d 	.word	0x0040230d
  400950:	e000e100 	.word	0xe000e100
  400954:	004023b9 	.word	0x004023b9
  400958:	0040207f 	.word	0x0040207f
  40095c:	400e1200 	.word	0x400e1200
  400960:	00402565 	.word	0x00402565
  400964:	00401ec1 	.word	0x00401ec1
  400968:	00400249 	.word	0x00400249

0040096c <hal_serial_start>:
void hal_serial_start( tSerialId serial_id, uint32_t baudrate ){
  40096c:	b508      	push	{r3, lr}
	switch( serial_id ){
  40096e:	b110      	cbz	r0, 400976 <hal_serial_start+0xa>
  400970:	2801      	cmp	r0, #1
  400972:	d004      	beq.n	40097e <hal_serial_start+0x12>
  400974:	bd08      	pop	{r3, pc}
		case SerialA:	configure_uart1(baudrate);	break;	//SerialA is UART1
  400976:	4608      	mov	r0, r1
  400978:	4b03      	ldr	r3, [pc, #12]	; (400988 <hal_serial_start+0x1c>)
  40097a:	4798      	blx	r3
  40097c:	bd08      	pop	{r3, pc}
		case SerialB:	configure_usart1(baudrate);	break;	//SerialB is USART1
  40097e:	4608      	mov	r0, r1
  400980:	4b02      	ldr	r3, [pc, #8]	; (40098c <hal_serial_start+0x20>)
  400982:	4798      	blx	r3
  400984:	bd08      	pop	{r3, pc}
  400986:	bf00      	nop
  400988:	004002dd 	.word	0x004002dd
  40098c:	0040033d 	.word	0x0040033d

00400990 <hal_serial_putc>:
void hal_serial_putc( tSerialId serial_id, uint8_t c ){
  400990:	b508      	push	{r3, lr}
	switch( serial_id ){
  400992:	b110      	cbz	r0, 40099a <hal_serial_putc+0xa>
  400994:	2801      	cmp	r0, #1
  400996:	d009      	beq.n	4009ac <hal_serial_putc+0x1c>
  400998:	bd08      	pop	{r3, pc}

static void uart1_putc( uint8_t c ){
	while ( !(UART1->UART_SR & UART_SR_TXRDY) ); //wait for Tx to be available
  40099a:	4a09      	ldr	r2, [pc, #36]	; (4009c0 <hal_serial_putc+0x30>)
  40099c:	6953      	ldr	r3, [r2, #20]
  40099e:	f013 0f02 	tst.w	r3, #2
  4009a2:	d0fb      	beq.n	40099c <hal_serial_putc+0xc>
	uart_write( UART1, c );						 //transmit
  4009a4:	4806      	ldr	r0, [pc, #24]	; (4009c0 <hal_serial_putc+0x30>)
  4009a6:	4b07      	ldr	r3, [pc, #28]	; (4009c4 <hal_serial_putc+0x34>)
  4009a8:	4798      	blx	r3
  4009aa:	bd08      	pop	{r3, pc}
}

static void usart1_putc( uint8_t c ){
	while( !(USART_SERIAL->US_CSR & US_CSR_TXRDY) ); //wait until TX is ready
  4009ac:	4a06      	ldr	r2, [pc, #24]	; (4009c8 <hal_serial_putc+0x38>)
  4009ae:	6953      	ldr	r3, [r2, #20]
  4009b0:	f013 0f02 	tst.w	r3, #2
  4009b4:	d0fb      	beq.n	4009ae <hal_serial_putc+0x1e>
	usart_write( USART_SERIAL, c );					 //write
  4009b6:	4804      	ldr	r0, [pc, #16]	; (4009c8 <hal_serial_putc+0x38>)
  4009b8:	4b04      	ldr	r3, [pc, #16]	; (4009cc <hal_serial_putc+0x3c>)
  4009ba:	4798      	blx	r3
  4009bc:	bd08      	pop	{r3, pc}
  4009be:	bf00      	nop
  4009c0:	400e0800 	.word	0x400e0800
  4009c4:	00402b33 	.word	0x00402b33
  4009c8:	40028000 	.word	0x40028000
  4009cc:	00402c41 	.word	0x00402c41

004009d0 <hal_serial_getc>:
uint8_t hal_serial_getc( tSerialId serial_id ){
  4009d0:	b530      	push	{r4, r5, lr}
  4009d2:	b083      	sub	sp, #12
	uint8_t buf = 0;
  4009d4:	2300      	movs	r3, #0
  4009d6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch( serial_id ){
  4009da:	b128      	cbz	r0, 4009e8 <hal_serial_getc+0x18>
  4009dc:	2801      	cmp	r0, #1
  4009de:	d010      	beq.n	400a02 <hal_serial_getc+0x32>
}
  4009e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4009e4:	b003      	add	sp, #12
  4009e6:	bd30      	pop	{r4, r5, pc}
}

static void uart1_getc( uint8_t* buf ){
	while( !(uart_get_status(UART1) & UART_SR_RXRDY) ); //wait until a character is ready
  4009e8:	4d0c      	ldr	r5, [pc, #48]	; (400a1c <hal_serial_getc+0x4c>)
  4009ea:	4c0d      	ldr	r4, [pc, #52]	; (400a20 <hal_serial_getc+0x50>)
  4009ec:	4628      	mov	r0, r5
  4009ee:	47a0      	blx	r4
  4009f0:	f010 0f01 	tst.w	r0, #1
  4009f4:	d0fa      	beq.n	4009ec <hal_serial_getc+0x1c>
	uart_read( UART1, buf );							//read
  4009f6:	f10d 0107 	add.w	r1, sp, #7
  4009fa:	4808      	ldr	r0, [pc, #32]	; (400a1c <hal_serial_getc+0x4c>)
  4009fc:	4b09      	ldr	r3, [pc, #36]	; (400a24 <hal_serial_getc+0x54>)
  4009fe:	4798      	blx	r3
  400a00:	e7ee      	b.n	4009e0 <hal_serial_getc+0x10>
}

static void usart1_getc( uint8_t* buf ){
	while( !(usart_get_status(USART1) & US_CSR_RXRDY) ); //wait until a character is available
  400a02:	4d09      	ldr	r5, [pc, #36]	; (400a28 <hal_serial_getc+0x58>)
  400a04:	4c09      	ldr	r4, [pc, #36]	; (400a2c <hal_serial_getc+0x5c>)
  400a06:	4628      	mov	r0, r5
  400a08:	47a0      	blx	r4
  400a0a:	f010 0f01 	tst.w	r0, #1
  400a0e:	d0fa      	beq.n	400a06 <hal_serial_getc+0x36>
	usart_read(USART1, buf);							 //read
  400a10:	f10d 0107 	add.w	r1, sp, #7
  400a14:	4804      	ldr	r0, [pc, #16]	; (400a28 <hal_serial_getc+0x58>)
  400a16:	4b06      	ldr	r3, [pc, #24]	; (400a30 <hal_serial_getc+0x60>)
  400a18:	4798      	blx	r3
  400a1a:	e7e1      	b.n	4009e0 <hal_serial_getc+0x10>
  400a1c:	400e0800 	.word	0x400e0800
  400a20:	00402b2f 	.word	0x00402b2f
  400a24:	00402b43 	.word	0x00402b43
  400a28:	40028000 	.word	0x40028000
  400a2c:	00402c3d 	.word	0x00402c3d
  400a30:	00402c55 	.word	0x00402c55

00400a34 <UART1_Handler>:
}


//UART1 ISR
void UART1_Handler(){
  400a34:	b500      	push	{lr}
  400a36:	b083      	sub	sp, #12
	uint8_t rx_data;
	uint32_t status = uart_get_status(UART1);
  400a38:	4809      	ldr	r0, [pc, #36]	; (400a60 <UART1_Handler+0x2c>)
  400a3a:	4b0a      	ldr	r3, [pc, #40]	; (400a64 <UART1_Handler+0x30>)
  400a3c:	4798      	blx	r3
	
	if(status & UART_SR_RXRDY){
  400a3e:	f010 0f01 	tst.w	r0, #1
  400a42:	d102      	bne.n	400a4a <UART1_Handler+0x16>
		uart_read(UART1, &rx_data);
		
		//pass to upper layer
		uart1_callback(rx_data);
	}
}
  400a44:	b003      	add	sp, #12
  400a46:	f85d fb04 	ldr.w	pc, [sp], #4
		uart_read(UART1, &rx_data);
  400a4a:	f10d 0107 	add.w	r1, sp, #7
  400a4e:	4804      	ldr	r0, [pc, #16]	; (400a60 <UART1_Handler+0x2c>)
  400a50:	4b05      	ldr	r3, [pc, #20]	; (400a68 <UART1_Handler+0x34>)
  400a52:	4798      	blx	r3
		uart1_callback(rx_data);
  400a54:	4b05      	ldr	r3, [pc, #20]	; (400a6c <UART1_Handler+0x38>)
  400a56:	681b      	ldr	r3, [r3, #0]
  400a58:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400a5c:	4798      	blx	r3
}
  400a5e:	e7f1      	b.n	400a44 <UART1_Handler+0x10>
  400a60:	400e0800 	.word	0x400e0800
  400a64:	00402b2f 	.word	0x00402b2f
  400a68:	00402b43 	.word	0x00402b43
  400a6c:	20000e30 	.word	0x20000e30

00400a70 <USART1_Handler>:

//USART1 ISR
void USART1_Handler(){
  400a70:	b500      	push	{lr}
  400a72:	b083      	sub	sp, #12
	uint8_t received_byte;
	uint32_t dw_status = usart_get_status(USART1);
  400a74:	4809      	ldr	r0, [pc, #36]	; (400a9c <USART1_Handler+0x2c>)
  400a76:	4b0a      	ldr	r3, [pc, #40]	; (400aa0 <USART1_Handler+0x30>)
  400a78:	4798      	blx	r3
	
	if (dw_status & US_CSR_RXRDY) {
  400a7a:	f010 0f01 	tst.w	r0, #1
  400a7e:	d102      	bne.n	400a86 <USART1_Handler+0x16>
		usart_read(USART1, &received_byte);
		
		//pass to upper layer
		usart1_callback(received_byte);
	}
}
  400a80:	b003      	add	sp, #12
  400a82:	f85d fb04 	ldr.w	pc, [sp], #4
		usart_read(USART1, &received_byte);
  400a86:	f10d 0107 	add.w	r1, sp, #7
  400a8a:	4804      	ldr	r0, [pc, #16]	; (400a9c <USART1_Handler+0x2c>)
  400a8c:	4b05      	ldr	r3, [pc, #20]	; (400aa4 <USART1_Handler+0x34>)
  400a8e:	4798      	blx	r3
		usart1_callback(received_byte);
  400a90:	4b05      	ldr	r3, [pc, #20]	; (400aa8 <USART1_Handler+0x38>)
  400a92:	681b      	ldr	r3, [r3, #0]
  400a94:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400a98:	4798      	blx	r3
}
  400a9a:	e7f1      	b.n	400a80 <USART1_Handler+0x10>
  400a9c:	40028000 	.word	0x40028000
  400aa0:	00402c3d 	.word	0x00402c3d
  400aa4:	00402c55 	.word	0x00402c55
  400aa8:	20000e34 	.word	0x20000e34

00400aac <hal_memreg_init>:
*
*	Initializes Memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_mem_init();...
*
*/
void hal_memreg_init(void){
  400aac:	4770      	bx	lr

00400aae <hal_nvmem_init>:
*
*	Initializes Non-volatile memory. This function must be called after
*	HAL CPU Init. That is: hal_cpu_init(); hal_nvmem_init();...
*
*/
void hal_nvmem_init(void){
  400aae:	4770      	bx	lr

00400ab0 <hal_nvmem_start>:
*	@param mem_id id of the memory to be initialized
*
*	@return true if the memory was initialized correctly, false otherwise.
*/
bool hal_nvmem_start( tNVMemId mem_id ){
	switch(mem_id){
  400ab0:	2801      	cmp	r0, #1
  400ab2:	d117      	bne.n	400ae4 <hal_nvmem_start+0x34>
bool hal_nvmem_start( tNVMemId mem_id ){
  400ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		case NVMemSDCardFAT:				//SD Card + FAT
			sdcard_fat_init = true;
  400ab6:	2201      	movs	r2, #1
  400ab8:	4b13      	ldr	r3, [pc, #76]	; (400b08 <hal_nvmem_start+0x58>)
  400aba:	701a      	strb	r2, [r3, #0]
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
}

static bool sdcard_init( uint32_t num_attempts ){
	//check for SD Card to be inserted
	if( !gpio_pin_is_low(SD_MMC_0_CD_GPIO) ){
  400abc:	204c      	movs	r0, #76	; 0x4c
  400abe:	4b13      	ldr	r3, [pc, #76]	; (400b0c <hal_nvmem_start+0x5c>)
  400ac0:	4798      	blx	r3
  400ac2:	b108      	cbz	r0, 400ac8 <hal_nvmem_start+0x18>
			return sdcard_init(10) && fs_mount();	
  400ac4:	2000      	movs	r0, #0
}
  400ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
	}
	
	//Init SD/MMC Stack
	sd_mmc_init();
  400ac8:	4b11      	ldr	r3, [pc, #68]	; (400b10 <hal_nvmem_start+0x60>)
  400aca:	4798      	blx	r3
  400acc:	240b      	movs	r4, #11
	
	//Initializes Card
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400ace:	4d11      	ldr	r5, [pc, #68]	; (400b14 <hal_nvmem_start+0x64>)
		if( num_attempts-- <= 0 ) return false;
		delay_ms(200);
  400ad0:	4f11      	ldr	r7, [pc, #68]	; (400b18 <hal_nvmem_start+0x68>)
  400ad2:	4e12      	ldr	r6, [pc, #72]	; (400b1c <hal_nvmem_start+0x6c>)
	while (	sd_mmc_check(0) != SD_MMC_OK ){
  400ad4:	2000      	movs	r0, #0
  400ad6:	47a8      	blx	r5
  400ad8:	b130      	cbz	r0, 400ae8 <hal_nvmem_start+0x38>
		if( num_attempts-- <= 0 ) return false;
  400ada:	3c01      	subs	r4, #1
  400adc:	d0f2      	beq.n	400ac4 <hal_nvmem_start+0x14>
		delay_ms(200);
  400ade:	4638      	mov	r0, r7
  400ae0:	47b0      	blx	r6
  400ae2:	e7f7      	b.n	400ad4 <hal_nvmem_start+0x24>
		case NVMemSDCard:		return false;							//unimplemented (raw access to sd card)
  400ae4:	2000      	movs	r0, #0
  400ae6:	4770      	bx	lr
	memset(&fs, 0, sizeof(FATFS));
  400ae8:	4c0d      	ldr	r4, [pc, #52]	; (400b20 <hal_nvmem_start+0x70>)
  400aea:	f44f 720c 	mov.w	r2, #560	; 0x230
  400aee:	2100      	movs	r1, #0
  400af0:	4620      	mov	r0, r4
  400af2:	4b0c      	ldr	r3, [pc, #48]	; (400b24 <hal_nvmem_start+0x74>)
  400af4:	4798      	blx	r3
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs) == FR_OK;
  400af6:	4621      	mov	r1, r4
  400af8:	2000      	movs	r0, #0
  400afa:	4b0b      	ldr	r3, [pc, #44]	; (400b28 <hal_nvmem_start+0x78>)
  400afc:	4798      	blx	r3
			return sdcard_init(10) && fs_mount();	
  400afe:	fab0 f080 	clz	r0, r0
  400b02:	0940      	lsrs	r0, r0, #5
  400b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b06:	bf00      	nop
  400b08:	20001068 	.word	0x20001068
  400b0c:	0040208f 	.word	0x0040208f
  400b10:	00401255 	.word	0x00401255
  400b14:	00401281 	.word	0x00401281
  400b18:	001a286e 	.word	0x001a286e
  400b1c:	20000001 	.word	0x20000001
  400b20:	20000e38 	.word	0x20000e38
  400b24:	00404385 	.word	0x00404385
  400b28:	00402f01 	.word	0x00402f01

00400b2c <syscalls_entry_point>:
*	   2. Based on that extract the right SP (PSP or MSP)
*	   3. The rest is the same...
*
*	There' no reason to make a syscall from the kernel though, so it's all good.
*/
void syscalls_entry_point(void){
  400b2c:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t sp = hal_cpu_get_psp();
  400b2e:	4b2c      	ldr	r3, [pc, #176]	; (400be0 <syscalls_entry_point+0xb4>)
  400b30:	4798      	blx	r3
	
	//extract the number from the read instruction
	svc_number &= 0x00FF;
	
	//get arguments
	void* arg0 = ((uint32_t*)sp)[0];
  400b32:	6804      	ldr	r4, [r0, #0]
	void* arg1 = ((uint32_t*)sp)[1];
  400b34:	6845      	ldr	r5, [r0, #4]
	uint32_t svc_number = ((uint16_t*) ((uint32_t*)sp)[6])[-1];
  400b36:	6983      	ldr	r3, [r0, #24]
	void* arg2 = ((uint32_t*)sp)[2];
	void* arg3 = ((uint32_t*)sp)[3];
	
	//attend syscall
	switch(svc_number){
  400b38:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  400b3c:	2b10      	cmp	r3, #16
  400b3e:	d84e      	bhi.n	400bde <syscalls_entry_point+0xb2>
  400b40:	e8df f003 	tbb	[pc, r3]
  400b44:	19151009 	.word	0x19151009
  400b48:	2a26211d 	.word	0x2a26211d
  400b4c:	3a36332e 	.word	0x3a36332e
  400b50:	474d433f 	.word	0x474d433f
  400b54:	4a          	.byte	0x4a
  400b55:	00          	.byte	0x00
		//LED
		case SVCLedWrite:
			hal_led_write( (tLedNum)arg0, (tLedState)arg1 );
  400b56:	1c29      	adds	r1, r5, #0
  400b58:	bf18      	it	ne
  400b5a:	2101      	movne	r1, #1
  400b5c:	4620      	mov	r0, r4
  400b5e:	4b21      	ldr	r3, [pc, #132]	; (400be4 <syscalls_entry_point+0xb8>)
  400b60:	4798      	blx	r3
			break;
  400b62:	bd38      	pop	{r3, r4, r5, pc}
		case SVCLedRead:
			*((tLedState*)arg1) = hal_led_read((tLedNum)arg0);
  400b64:	4620      	mov	r0, r4
  400b66:	4b20      	ldr	r3, [pc, #128]	; (400be8 <syscalls_entry_point+0xbc>)
  400b68:	4798      	blx	r3
  400b6a:	7028      	strb	r0, [r5, #0]
			break;
  400b6c:	bd38      	pop	{r3, r4, r5, pc}
		//Button
		case SVCButtonStartEv:
			hal_button_start_int((void(*)(tButtonNum)) arg0);
  400b6e:	4620      	mov	r0, r4
  400b70:	4b1e      	ldr	r3, [pc, #120]	; (400bec <syscalls_entry_point+0xc0>)
  400b72:	4798      	blx	r3
			break;
  400b74:	bd38      	pop	{r3, r4, r5, pc}
		//Clock
		case SVCClockRead:
			hal_clock_read((tTime*)arg0);
  400b76:	4620      	mov	r0, r4
  400b78:	4b1d      	ldr	r3, [pc, #116]	; (400bf0 <syscalls_entry_point+0xc4>)
  400b7a:	4798      	blx	r3
			break;
  400b7c:	bd38      	pop	{r3, r4, r5, pc}
		case SVCClockWrite:
			hal_clock_write((tTime*)arg0);
  400b7e:	4620      	mov	r0, r4
  400b80:	4b1c      	ldr	r3, [pc, #112]	; (400bf4 <syscalls_entry_point+0xc8>)
  400b82:	4798      	blx	r3
			break;
  400b84:	bd38      	pop	{r3, r4, r5, pc}
		//Serial
		case SVCSerialPutc:
			hal_serial_putc((tSerialId)arg0, (uint8_t)arg1);
  400b86:	b2e9      	uxtb	r1, r5
  400b88:	4620      	mov	r0, r4
  400b8a:	4b1b      	ldr	r3, [pc, #108]	; (400bf8 <syscalls_entry_point+0xcc>)
  400b8c:	4798      	blx	r3
			break;
  400b8e:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSerialGetc:
			hal_serial_getc((tSerialId)arg0);
  400b90:	4620      	mov	r0, r4
  400b92:	4b1a      	ldr	r3, [pc, #104]	; (400bfc <syscalls_entry_point+0xd0>)
  400b94:	4798      	blx	r3
			break;
  400b96:	bd38      	pop	{r3, r4, r5, pc}
		//Sensor
		case SVCSensorStartEv:
			hal_sensor_start((tSensorId)arg0);
  400b98:	4620      	mov	r0, r4
  400b9a:	4b19      	ldr	r3, [pc, #100]	; (400c00 <syscalls_entry_point+0xd4>)
  400b9c:	4798      	blx	r3
			break;
  400b9e:	bd38      	pop	{r3, r4, r5, pc}
		case SVCSensorRead:
			*((uint32_t*)arg1) = hal_sensor_read((tSensorId)arg0);
  400ba0:	4620      	mov	r0, r4
  400ba2:	4b18      	ldr	r3, [pc, #96]	; (400c04 <syscalls_entry_point+0xd8>)
  400ba4:	4798      	blx	r3
  400ba6:	6028      	str	r0, [r5, #0]
			break;
  400ba8:	bd38      	pop	{r3, r4, r5, pc}
		//Display
		case SVCDisplayCls:
			hal_display_cls();
  400baa:	4b17      	ldr	r3, [pc, #92]	; (400c08 <syscalls_entry_point+0xdc>)
  400bac:	4798      	blx	r3
			break;
  400bae:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayPutc:
			hal_display_putc((uint8_t)arg0);
  400bb0:	b2e0      	uxtb	r0, r4
  400bb2:	4b16      	ldr	r3, [pc, #88]	; (400c0c <syscalls_entry_point+0xe0>)
  400bb4:	4798      	blx	r3
			break;
  400bb6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayGotoxy:
			hal_display_gotoxy((uint32_t)arg0, (uint32_t)arg1);
  400bb8:	4629      	mov	r1, r5
  400bba:	4620      	mov	r0, r4
  400bbc:	4b14      	ldr	r3, [pc, #80]	; (400c10 <syscalls_entry_point+0xe4>)
  400bbe:	4798      	blx	r3
			break;
  400bc0:	bd38      	pop	{r3, r4, r5, pc}
		case SVCDisplayNumLines:
			*((uint32_t*)arg0) = hal_display_numlines();
  400bc2:	4b14      	ldr	r3, [pc, #80]	; (400c14 <syscalls_entry_point+0xe8>)
  400bc4:	4798      	blx	r3
  400bc6:	6020      	str	r0, [r4, #0]
			break;
  400bc8:	bd38      	pop	{r3, r4, r5, pc}
		//Millisecond Timer
		case SVCMtimerStartEv:
			hal_mtimer_start((uint32_t)arg0);
  400bca:	4620      	mov	r0, r4
  400bcc:	4b12      	ldr	r3, [pc, #72]	; (400c18 <syscalls_entry_point+0xec>)
  400bce:	4798      	blx	r3
			break;
  400bd0:	bd38      	pop	{r3, r4, r5, pc}
		//case SVCMtimerStartPoll:
		//	hal_mtimer_start_int((uint32_t)arg0, ((void)*(void))arg1);
		//	break;
		case SVCMtimerStop:
			hal_mtimer_stop();
  400bd2:	4b12      	ldr	r3, [pc, #72]	; (400c1c <syscalls_entry_point+0xf0>)
  400bd4:	4798      	blx	r3
			break;
  400bd6:	bd38      	pop	{r3, r4, r5, pc}
		case SVCMtimerRead:
			*((uint32_t*)arg0) = hal_mtimer_read();
  400bd8:	4b11      	ldr	r3, [pc, #68]	; (400c20 <syscalls_entry_point+0xf4>)
  400bda:	4798      	blx	r3
  400bdc:	6020      	str	r0, [r4, #0]
  400bde:	bd38      	pop	{r3, r4, r5, pc}
  400be0:	00400213 	.word	0x00400213
  400be4:	004004a5 	.word	0x004004a5
  400be8:	004004f3 	.word	0x004004f3
  400bec:	0040085d 	.word	0x0040085d
  400bf0:	00400599 	.word	0x00400599
  400bf4:	00400565 	.word	0x00400565
  400bf8:	00400991 	.word	0x00400991
  400bfc:	004009d1 	.word	0x004009d1
  400c00:	00400745 	.word	0x00400745
  400c04:	004007b9 	.word	0x004007b9
  400c08:	00400689 	.word	0x00400689
  400c0c:	004005e9 	.word	0x004005e9
  400c10:	00400719 	.word	0x00400719
  400c14:	00400741 	.word	0x00400741
  400c18:	004003cd 	.word	0x004003cd
  400c1c:	00400425 	.word	0x00400425
  400c20:	0040044d 	.word	0x0040044d

00400c24 <syscalls_init>:
void syscalls_init(void){
  400c24:	b508      	push	{r3, lr}
	hal_svc_start( syscalls_entry_point );
  400c26:	4802      	ldr	r0, [pc, #8]	; (400c30 <syscalls_init+0xc>)
  400c28:	4b02      	ldr	r3, [pc, #8]	; (400c34 <syscalls_init+0x10>)
  400c2a:	4798      	blx	r3
  400c2c:	bd08      	pop	{r3, pc}
  400c2e:	bf00      	nop
  400c30:	00400b2d 	.word	0x00400b2d
  400c34:	004001b5 	.word	0x004001b5

00400c38 <init_sequence>:
	//but first they blink momentarily
	init_sequence();

}

void init_sequence(void){
  400c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		
	//All LEDs On
	hal_led_write(Led0, LedOn);
  400c3c:	2101      	movs	r1, #1
  400c3e:	2000      	movs	r0, #0
  400c40:	4c1a      	ldr	r4, [pc, #104]	; (400cac <init_sequence+0x74>)
  400c42:	47a0      	blx	r4
	hal_led_write(Led1, LedOn);
  400c44:	2101      	movs	r1, #1
  400c46:	4608      	mov	r0, r1
  400c48:	47a0      	blx	r4
	hal_led_write(Led2, LedOn);
  400c4a:	2101      	movs	r1, #1
  400c4c:	2002      	movs	r0, #2
  400c4e:	47a0      	blx	r4
	hal_led_write(Led3, LedOn);
  400c50:	2101      	movs	r1, #1
  400c52:	2003      	movs	r0, #3
  400c54:	47a0      	blx	r4
	hal_led_write(Led4, LedOn);
  400c56:	2101      	movs	r1, #1
  400c58:	2004      	movs	r0, #4
  400c5a:	47a0      	blx	r4
		
	//Screen "on"
	for(uint32_t i=0; i<4; i++){	 //rows
  400c5c:	2700      	movs	r7, #0
		hal_display_gotoxy(0, i);
  400c5e:	46b9      	mov	r9, r7
  400c60:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400cbc <init_sequence+0x84>
		for(uint32_t j=0; j<95; j++) //columns
		hal_display_putc('|');
  400c64:	4e12      	ldr	r6, [pc, #72]	; (400cb0 <init_sequence+0x78>)
		hal_display_gotoxy(0, i);
  400c66:	4639      	mov	r1, r7
  400c68:	4648      	mov	r0, r9
  400c6a:	47c0      	blx	r8
  400c6c:	245f      	movs	r4, #95	; 0x5f
		hal_display_putc('|');
  400c6e:	257c      	movs	r5, #124	; 0x7c
  400c70:	4628      	mov	r0, r5
  400c72:	47b0      	blx	r6
		for(uint32_t j=0; j<95; j++) //columns
  400c74:	3c01      	subs	r4, #1
  400c76:	d1fb      	bne.n	400c70 <init_sequence+0x38>
	for(uint32_t i=0; i<4; i++){	 //rows
  400c78:	3701      	adds	r7, #1
  400c7a:	2f04      	cmp	r7, #4
  400c7c:	d1f3      	bne.n	400c66 <init_sequence+0x2e>
	}

	//Wait...
	hal_delay(200);
  400c7e:	20c8      	movs	r0, #200	; 0xc8
  400c80:	4b0c      	ldr	r3, [pc, #48]	; (400cb4 <init_sequence+0x7c>)
  400c82:	4798      	blx	r3
	
	//All LEDs Off
	hal_led_write(Led0, LedOff);
  400c84:	2100      	movs	r1, #0
  400c86:	4608      	mov	r0, r1
  400c88:	4c08      	ldr	r4, [pc, #32]	; (400cac <init_sequence+0x74>)
  400c8a:	47a0      	blx	r4
	hal_led_write(Led1, LedOff);
  400c8c:	2100      	movs	r1, #0
  400c8e:	2001      	movs	r0, #1
  400c90:	47a0      	blx	r4
	hal_led_write(Led2, LedOff);
  400c92:	2100      	movs	r1, #0
  400c94:	2002      	movs	r0, #2
  400c96:	47a0      	blx	r4
	hal_led_write(Led3, LedOff);
  400c98:	2100      	movs	r1, #0
  400c9a:	2003      	movs	r0, #3
  400c9c:	47a0      	blx	r4
	hal_led_write(Led4, LedOff);
  400c9e:	2100      	movs	r1, #0
  400ca0:	2004      	movs	r0, #4
  400ca2:	47a0      	blx	r4
		
	//clear screen
	hal_display_cls();
  400ca4:	4b04      	ldr	r3, [pc, #16]	; (400cb8 <init_sequence+0x80>)
  400ca6:	4798      	blx	r3
  400ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cac:	004004a5 	.word	0x004004a5
  400cb0:	004005e9 	.word	0x004005e9
  400cb4:	004001d1 	.word	0x004001d1
  400cb8:	00400689 	.word	0x00400689
  400cbc:	00400719 	.word	0x00400719

00400cc0 <io_init>:
void io_init(void){
  400cc0:	b530      	push	{r4, r5, lr}
  400cc2:	b087      	sub	sp, #28
	hal_sensor_start( SensorLight );
  400cc4:	2000      	movs	r0, #0
  400cc6:	4c12      	ldr	r4, [pc, #72]	; (400d10 <io_init+0x50>)
  400cc8:	47a0      	blx	r4
	hal_sensor_start( SensorTemp );
  400cca:	2001      	movs	r0, #1
  400ccc:	47a0      	blx	r4
	hal_clock_start();
  400cce:	4b11      	ldr	r3, [pc, #68]	; (400d14 <io_init+0x54>)
  400cd0:	4798      	blx	r3
	hal_display_start();
  400cd2:	4b11      	ldr	r3, [pc, #68]	; (400d18 <io_init+0x58>)
  400cd4:	4798      	blx	r3
	hal_serial_start( SerialA, SYS_CONF_SERIAL_A_BAUDRATE );
  400cd6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  400cda:	2000      	movs	r0, #0
  400cdc:	4c0f      	ldr	r4, [pc, #60]	; (400d1c <io_init+0x5c>)
  400cde:	47a0      	blx	r4
	hal_serial_start( SerialB, SYS_CONF_SERIAL_A_BAUDRATE );
  400ce0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  400ce4:	2001      	movs	r0, #1
  400ce6:	47a0      	blx	r4
	hal_led_start();
  400ce8:	4b0d      	ldr	r3, [pc, #52]	; (400d20 <io_init+0x60>)
  400cea:	4798      	blx	r3
	hal_nvmem_start( NVMemSDCardFAT );
  400cec:	2001      	movs	r0, #1
  400cee:	4b0d      	ldr	r3, [pc, #52]	; (400d24 <io_init+0x64>)
  400cf0:	4798      	blx	r3
	tTime time = {
  400cf2:	466c      	mov	r4, sp
  400cf4:	4d0c      	ldr	r5, [pc, #48]	; (400d28 <io_init+0x68>)
  400cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400cfa:	e895 0003 	ldmia.w	r5, {r0, r1}
  400cfe:	e884 0003 	stmia.w	r4, {r0, r1}
	hal_clock_write(&time);
  400d02:	4668      	mov	r0, sp
  400d04:	4b09      	ldr	r3, [pc, #36]	; (400d2c <io_init+0x6c>)
  400d06:	4798      	blx	r3
	init_sequence();
  400d08:	4b09      	ldr	r3, [pc, #36]	; (400d30 <io_init+0x70>)
  400d0a:	4798      	blx	r3
}
  400d0c:	b007      	add	sp, #28
  400d0e:	bd30      	pop	{r4, r5, pc}
  400d10:	00400745 	.word	0x00400745
  400d14:	00400539 	.word	0x00400539
  400d18:	004005dd 	.word	0x004005dd
  400d1c:	0040096d 	.word	0x0040096d
  400d20:	00400461 	.word	0x00400461
  400d24:	00400ab1 	.word	0x00400ab1
  400d28:	00407c34 	.word	0x00407c34
  400d2c:	00400565 	.word	0x00400565
  400d30:	00400c39 	.word	0x00400c39

00400d34 <system_init>:
void system_init(void){
  400d34:	b508      	push	{r3, lr}
	hal_cpu_init();			
  400d36:	4b07      	ldr	r3, [pc, #28]	; (400d54 <system_init+0x20>)
  400d38:	4798      	blx	r3
	hal_io_init();		
  400d3a:	4b07      	ldr	r3, [pc, #28]	; (400d58 <system_init+0x24>)
  400d3c:	4798      	blx	r3
	hal_nvmem_init();
  400d3e:	4b07      	ldr	r3, [pc, #28]	; (400d5c <system_init+0x28>)
  400d40:	4798      	blx	r3
	hal_memreg_init();
  400d42:	4b07      	ldr	r3, [pc, #28]	; (400d60 <system_init+0x2c>)
  400d44:	4798      	blx	r3
	io_init();
  400d46:	4b07      	ldr	r3, [pc, #28]	; (400d64 <system_init+0x30>)
  400d48:	4798      	blx	r3
	console_init();
  400d4a:	4b07      	ldr	r3, [pc, #28]	; (400d68 <system_init+0x34>)
  400d4c:	4798      	blx	r3
	syscalls_init();
  400d4e:	4b07      	ldr	r3, [pc, #28]	; (400d6c <system_init+0x38>)
  400d50:	4798      	blx	r3
  400d52:	bd08      	pop	{r3, pc}
  400d54:	004001a9 	.word	0x004001a9
  400d58:	004003ad 	.word	0x004003ad
  400d5c:	00400aaf 	.word	0x00400aaf
  400d60:	00400aad 	.word	0x00400aad
  400d64:	00400cc1 	.word	0x00400cc1
  400d68:	004001a5 	.word	0x004001a5
  400d6c:	00400c25 	.word	0x00400c25

00400d70 <ssd1306_write_command>:
{
  400d70:	b570      	push	{r4, r5, r6, lr}
  400d72:	b082      	sub	sp, #8
  400d74:	4606      	mov	r6, r0
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400d76:	ac02      	add	r4, sp, #8
  400d78:	2302      	movs	r3, #2
  400d7a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400d7e:	4d09      	ldr	r5, [pc, #36]	; (400da4 <ssd1306_write_command+0x34>)
  400d80:	4621      	mov	r1, r4
  400d82:	4628      	mov	r0, r5
  400d84:	4b08      	ldr	r3, [pc, #32]	; (400da8 <ssd1306_write_command+0x38>)
  400d86:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400d8c:	4b07      	ldr	r3, [pc, #28]	; (400dac <ssd1306_write_command+0x3c>)
  400d8e:	635a      	str	r2, [r3, #52]	; 0x34
  400d90:	60ee      	str	r6, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  400d92:	2056      	movs	r0, #86	; 0x56
  400d94:	4b06      	ldr	r3, [pc, #24]	; (400db0 <ssd1306_write_command+0x40>)
  400d96:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400d98:	4621      	mov	r1, r4
  400d9a:	4628      	mov	r0, r5
  400d9c:	4b05      	ldr	r3, [pc, #20]	; (400db4 <ssd1306_write_command+0x44>)
  400d9e:	4798      	blx	r3
}
  400da0:	b002      	add	sp, #8
  400da2:	bd70      	pop	{r4, r5, r6, pc}
  400da4:	40008000 	.word	0x40008000
  400da8:	00401c79 	.word	0x00401c79
  400dac:	400e1200 	.word	0x400e1200
  400db0:	20000001 	.word	0x20000001
  400db4:	00401ca9 	.word	0x00401ca9

00400db8 <make_shape>:
// test: try making shape
Shape make_shape(gfx_shape shp, uint16_t x, uint16_t y) {	
	Shape chshape;
	chshape.x = x;
	chshape.y = y;
	switch (shp) {
  400db8:	2901      	cmp	r1, #1
  400dba:	d00c      	beq.n	400dd6 <make_shape+0x1e>
  400dbc:	b149      	cbz	r1, 400dd2 <make_shape+0x1a>
		break;
		case ship:
		chshape.body = '!';
		break;
		case bullet:
		chshape.body = '$';
  400dbe:	2902      	cmp	r1, #2
  400dc0:	bf0c      	ite	eq
  400dc2:	2124      	moveq	r1, #36	; 0x24
  400dc4:	2100      	movne	r1, #0
		break;
		default:
		break;
	}
	chshape.exists = true;
	return chshape;
  400dc6:	7001      	strb	r1, [r0, #0]
  400dc8:	8042      	strh	r2, [r0, #2]
  400dca:	8083      	strh	r3, [r0, #4]
  400dcc:	2301      	movs	r3, #1
  400dce:	7183      	strb	r3, [r0, #6]
}
  400dd0:	4770      	bx	lr
		chshape.body = '"';
  400dd2:	2122      	movs	r1, #34	; 0x22
  400dd4:	e7f7      	b.n	400dc6 <make_shape+0xe>
		chshape.body = '!';
  400dd6:	2121      	movs	r1, #33	; 0x21
		break;
  400dd8:	e7f5      	b.n	400dc6 <make_shape+0xe>
	...

00400ddc <draw_shape>:
void draw_shape(Shape* shp) {
	if (shp->exists)
  400ddc:	7983      	ldrb	r3, [r0, #6]
  400dde:	b903      	cbnz	r3, 400de2 <draw_shape+0x6>
  400de0:	4770      	bx	lr
void draw_shape(Shape* shp) {
  400de2:	b570      	push	{r4, r5, r6, lr}
  400de4:	4604      	mov	r4, r0
	address &= 0x0F;
  400de6:	7900      	ldrb	r0, [r0, #4]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400de8:	f000 0007 	and.w	r0, r0, #7
  400dec:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400df0:	4e08      	ldr	r6, [pc, #32]	; (400e14 <draw_shape+0x38>)
  400df2:	47b0      	blx	r6
	{
		ssd1306_set_page_address(shp->y);
		ssd1306_set_column_address(shp->x * 8);
  400df4:	78a5      	ldrb	r5, [r4, #2]
  400df6:	00ed      	lsls	r5, r5, #3
  400df8:	b2ed      	uxtb	r5, r5
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  400dfa:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400dfe:	f040 0010 	orr.w	r0, r0, #16
  400e02:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  400e04:	f005 0008 	and.w	r0, r5, #8
  400e08:	47b0      	blx	r6
		hal_display_putc(shp->body);
  400e0a:	7820      	ldrb	r0, [r4, #0]
  400e0c:	4b02      	ldr	r3, [pc, #8]	; (400e18 <draw_shape+0x3c>)
  400e0e:	4798      	blx	r3
  400e10:	bd70      	pop	{r4, r5, r6, pc}
  400e12:	bf00      	nop
  400e14:	00400d71 	.word	0x00400d71
  400e18:	004005e9 	.word	0x004005e9

00400e1c <move_shape_down>:
	}
}

void move_shape_down(Shape* shp) {
	uint16_t y = shp->y;
  400e1c:	8883      	ldrh	r3, [r0, #4]
	// add one to the y axis
	y++;
  400e1e:	3301      	adds	r3, #1
  400e20:	b29b      	uxth	r3, r3
	// check if it is still in bounds
	if (y <= 3) 
  400e22:	2b03      	cmp	r3, #3
		shp->y = y;
  400e24:	bf98      	it	ls
  400e26:	8083      	strhls	r3, [r0, #4]
  400e28:	4770      	bx	lr

00400e2a <move_shape_up>:
}

void move_shape_up(Shape* shp) {
	uint16_t y = shp->y;
  400e2a:	8883      	ldrh	r3, [r0, #4]
	// check if it is still in bounds
	if (y == 0)
  400e2c:	b10b      	cbz	r3, 400e32 <move_shape_up+0x8>
		return;
	// subtract one to the y axis
	y --;
  400e2e:	3b01      	subs	r3, #1
	shp->y = y;
  400e30:	8083      	strh	r3, [r0, #4]
  400e32:	4770      	bx	lr

00400e34 <move_shape_left>:
}

void move_shape_left(Shape* shp)
{
	uint16_t x = shp->x;
  400e34:	8843      	ldrh	r3, [r0, #2]
	// check if it is still in bounds
	if (x == 0)
  400e36:	b10b      	cbz	r3, 400e3c <move_shape_left+0x8>
		return;
	// subtract one from the x axis
	x --;
  400e38:	3b01      	subs	r3, #1
	shp->x = x;
  400e3a:	8043      	strh	r3, [r0, #2]
  400e3c:	4770      	bx	lr

00400e3e <move_shape_right>:
}

void move_shape_right(Shape* shp)
{
	uint16_t x = shp->x;
  400e3e:	8843      	ldrh	r3, [r0, #2]
	// add one to the x axis
	x ++;
  400e40:	3301      	adds	r3, #1
  400e42:	b29b      	uxth	r3, r3
	// check if it is still in bounds
	if (x <= 15) 
  400e44:	2b0f      	cmp	r3, #15
		shp->x = x;
  400e46:	bf98      	it	ls
  400e48:	8043      	strhls	r3, [r0, #2]
  400e4a:	4770      	bx	lr

00400e4c <ssd1306_write_command>:
{
  400e4c:	b570      	push	{r4, r5, r6, lr}
  400e4e:	b082      	sub	sp, #8
  400e50:	4606      	mov	r6, r0
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400e52:	ac02      	add	r4, sp, #8
  400e54:	2302      	movs	r3, #2
  400e56:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400e5a:	4d09      	ldr	r5, [pc, #36]	; (400e80 <ssd1306_write_command+0x34>)
  400e5c:	4621      	mov	r1, r4
  400e5e:	4628      	mov	r0, r5
  400e60:	4b08      	ldr	r3, [pc, #32]	; (400e84 <ssd1306_write_command+0x38>)
  400e62:	4798      	blx	r3
  400e64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400e68:	4b07      	ldr	r3, [pc, #28]	; (400e88 <ssd1306_write_command+0x3c>)
  400e6a:	635a      	str	r2, [r3, #52]	; 0x34
  400e6c:	60ee      	str	r6, [r5, #12]
	delay_us(SSD1306_LATENCY); // At least 3us
  400e6e:	2056      	movs	r0, #86	; 0x56
  400e70:	4b06      	ldr	r3, [pc, #24]	; (400e8c <ssd1306_write_command+0x40>)
  400e72:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400e74:	4621      	mov	r1, r4
  400e76:	4628      	mov	r0, r5
  400e78:	4b05      	ldr	r3, [pc, #20]	; (400e90 <ssd1306_write_command+0x44>)
  400e7a:	4798      	blx	r3
}
  400e7c:	b002      	add	sp, #8
  400e7e:	bd70      	pop	{r4, r5, r6, pc}
  400e80:	40008000 	.word	0x40008000
  400e84:	00401c79 	.word	0x00401c79
  400e88:	400e1200 	.word	0x400e1200
  400e8c:	20000001 	.word	0x20000001
  400e90:	00401ca9 	.word	0x00401ca9

00400e94 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  400e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e96:	b085      	sub	sp, #20
  400e98:	4d25      	ldr	r5, [pc, #148]	; (400f30 <ssd1306_init+0x9c>)
  400e9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  400e9e:	636e      	str	r6, [r5, #52]	; 0x34
	delay_us(SSD1306_LATENCY); // At least 3us
  400ea0:	2056      	movs	r0, #86	; 0x56
  400ea2:	4c24      	ldr	r4, [pc, #144]	; (400f34 <ssd1306_init+0xa0>)
  400ea4:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ea6:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(SSD1306_LATENCY); // At least 3us
  400ea8:	2056      	movs	r0, #86	; 0x56
  400eaa:	47a0      	blx	r4
	struct spi_device device = {
  400eac:	2702      	movs	r7, #2
  400eae:	ae04      	add	r6, sp, #16
  400eb0:	f846 7d04 	str.w	r7, [r6, #-4]!
	spi_master_init(SSD1306_SPI);
  400eb4:	4c20      	ldr	r4, [pc, #128]	; (400f38 <ssd1306_init+0xa4>)
  400eb6:	4620      	mov	r0, r4
  400eb8:	4b20      	ldr	r3, [pc, #128]	; (400f3c <ssd1306_init+0xa8>)
  400eba:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  400ebc:	2500      	movs	r5, #0
  400ebe:	9500      	str	r5, [sp, #0]
  400ec0:	4b1f      	ldr	r3, [pc, #124]	; (400f40 <ssd1306_init+0xac>)
  400ec2:	462a      	mov	r2, r5
  400ec4:	4631      	mov	r1, r6
  400ec6:	4620      	mov	r0, r4
  400ec8:	4e1e      	ldr	r6, [pc, #120]	; (400f44 <ssd1306_init+0xb0>)
  400eca:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400ecc:	2301      	movs	r3, #1
  400ece:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400ed0:	20a8      	movs	r0, #168	; 0xa8
  400ed2:	4c1d      	ldr	r4, [pc, #116]	; (400f48 <ssd1306_init+0xb4>)
  400ed4:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ed6:	201f      	movs	r0, #31
  400ed8:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400eda:	20d3      	movs	r0, #211	; 0xd3
  400edc:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400ede:	4628      	mov	r0, r5
  400ee0:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  400ee2:	2040      	movs	r0, #64	; 0x40
  400ee4:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400ee6:	20a1      	movs	r0, #161	; 0xa1
  400ee8:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400eea:	20c8      	movs	r0, #200	; 0xc8
  400eec:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400eee:	20da      	movs	r0, #218	; 0xda
  400ef0:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400ef2:	4638      	mov	r0, r7
  400ef4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400ef6:	2081      	movs	r0, #129	; 0x81
  400ef8:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400efa:	208f      	movs	r0, #143	; 0x8f
  400efc:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400efe:	20a4      	movs	r0, #164	; 0xa4
  400f00:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400f02:	20a6      	movs	r0, #166	; 0xa6
  400f04:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400f06:	20d5      	movs	r0, #213	; 0xd5
  400f08:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400f0a:	2080      	movs	r0, #128	; 0x80
  400f0c:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400f0e:	208d      	movs	r0, #141	; 0x8d
  400f10:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400f12:	2014      	movs	r0, #20
  400f14:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400f16:	20db      	movs	r0, #219	; 0xdb
  400f18:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400f1a:	2040      	movs	r0, #64	; 0x40
  400f1c:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400f1e:	20d9      	movs	r0, #217	; 0xd9
  400f20:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400f22:	20f1      	movs	r0, #241	; 0xf1
  400f24:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400f26:	20af      	movs	r0, #175	; 0xaf
  400f28:	47a0      	blx	r4

	ssd1306_display_on();
}
  400f2a:	b005      	add	sp, #20
  400f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f2e:	bf00      	nop
  400f30:	400e1200 	.word	0x400e1200
  400f34:	20000001 	.word	0x20000001
  400f38:	40008000 	.word	0x40008000
  400f3c:	00401ba5 	.word	0x00401ba5
  400f40:	004c4b40 	.word	0x004c4b40
  400f44:	00401bf9 	.word	0x00401bf9
  400f48:	00400e4d 	.word	0x00400e4d

00400f4c <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  400f4c:	b500      	push	{lr}
  400f4e:	b085      	sub	sp, #20
	twi_options_t opts = {
  400f50:	2300      	movs	r3, #0
  400f52:	9303      	str	r3, [sp, #12]
  400f54:	4b07      	ldr	r3, [pc, #28]	; (400f74 <at30tse_init+0x28>)
  400f56:	9301      	str	r3, [sp, #4]
  400f58:	f242 7310 	movw	r3, #10000	; 0x2710
  400f5c:	9302      	str	r3, [sp, #8]
  400f5e:	2013      	movs	r0, #19
  400f60:	4b05      	ldr	r3, [pc, #20]	; (400f78 <at30tse_init+0x2c>)
  400f62:	4798      	blx	r3
	flexcom_enable(BOARD_FLEXCOM_TWI);
	flexcom_set_opmode(BOARD_FLEXCOM_TWI, FLEXCOM_TWI);
#else
	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
#endif
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  400f64:	a901      	add	r1, sp, #4
  400f66:	4805      	ldr	r0, [pc, #20]	; (400f7c <at30tse_init+0x30>)
  400f68:	4b05      	ldr	r3, [pc, #20]	; (400f80 <at30tse_init+0x34>)
  400f6a:	4798      	blx	r3

}
  400f6c:	b005      	add	sp, #20
  400f6e:	f85d fb04 	ldr.w	pc, [sp], #4
  400f72:	bf00      	nop
  400f74:	07270e00 	.word	0x07270e00
  400f78:	00402565 	.word	0x00402565
  400f7c:	40018000 	.word	0x40018000
  400f80:	004029c9 	.word	0x004029c9

00400f84 <at30tse_read_register>:
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_register(uint8_t reg, uint8_t reg_type,
		uint8_t reg_size, uint8_t* buffer)
{
  400f84:	b510      	push	{r4, lr}
  400f86:	b086      	sub	sp, #24
	twi_packet_t packet = {
  400f88:	2400      	movs	r4, #0
  400f8a:	9401      	str	r4, [sp, #4]
  400f8c:	9405      	str	r4, [sp, #20]
  400f8e:	4301      	orrs	r1, r0
  400f90:	f88d 1004 	strb.w	r1, [sp, #4]
  400f94:	2101      	movs	r1, #1
  400f96:	9102      	str	r1, [sp, #8]
  400f98:	9303      	str	r3, [sp, #12]
  400f9a:	9204      	str	r2, [sp, #16]
  400f9c:	234f      	movs	r3, #79	; 0x4f
  400f9e:	f88d 3014 	strb.w	r3, [sp, #20]
		.length = reg_size,
		/* Chip addr */
		.chip = AT30TSE_TEMPERATURE_TWI_ADDR
	};

	return twi_master_read(BOARD_AT30TSE_TWI, &packet);
  400fa2:	a901      	add	r1, sp, #4
  400fa4:	4802      	ldr	r0, [pc, #8]	; (400fb0 <at30tse_read_register+0x2c>)
  400fa6:	4b03      	ldr	r3, [pc, #12]	; (400fb4 <at30tse_read_register+0x30>)
  400fa8:	4798      	blx	r3
}
  400faa:	b2c0      	uxtb	r0, r0
  400fac:	b006      	add	sp, #24
  400fae:	bd10      	pop	{r4, pc}
  400fb0:	40018000 	.word	0x40018000
  400fb4:	00402a2d 	.word	0x00402a2d

00400fb8 <at30tse_read_temperature>:
 * stored
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_temperature(double *temperature)
{
  400fb8:	b570      	push	{r4, r5, r6, lr}
  400fba:	b082      	sub	sp, #8
  400fbc:	4604      	mov	r4, r0
	/* Placeholder buffer to put temperature data in. */
	uint8_t buffer[2];
	uint8_t error_code = 0;
	buffer[0] = 0;
  400fbe:	2000      	movs	r0, #0
  400fc0:	f88d 0004 	strb.w	r0, [sp, #4]
	buffer[1] = 0;
  400fc4:	f88d 0005 	strb.w	r0, [sp, #5]

	/* Read the 16-bit temperature register. */
	error_code = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
  400fc8:	ab01      	add	r3, sp, #4
  400fca:	2202      	movs	r2, #2
  400fcc:	4601      	mov	r1, r0
  400fce:	4d27      	ldr	r5, [pc, #156]	; (40106c <at30tse_read_temperature+0xb4>)
  400fd0:	47a8      	blx	r5
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
  400fd2:	4605      	mov	r5, r0
  400fd4:	bb10      	cbnz	r0, 40101c <at30tse_read_temperature+0x64>
		uint16_t data = (buffer[0] << 8) | buffer[1];
  400fd6:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400fda:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400fde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400fe2:	b21b      	sxth	r3, r3
  400fe4:	b29a      	uxth	r2, r3
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
  400fe6:	2b00      	cmp	r3, #0
			sign *= -1;
			data &= ~(1 << 15);
  400fe8:	bfba      	itte	lt
  400fea:	f3c2 020e 	ubfxlt	r2, r2, #0, #15
			sign *= -1;
  400fee:	f04f 30ff 	movlt.w	r0, #4294967295
		int8_t sign = 1;
  400ff2:	2001      	movge	r0, #1
		}

		/* Convert to temperature. */
		switch (resolution) {
  400ff4:	4b1e      	ldr	r3, [pc, #120]	; (401070 <at30tse_read_temperature+0xb8>)
  400ff6:	781b      	ldrb	r3, [r3, #0]
  400ff8:	b2db      	uxtb	r3, r3
  400ffa:	2b03      	cmp	r3, #3
  400ffc:	d80e      	bhi.n	40101c <at30tse_read_temperature+0x64>
  400ffe:	e8df f003 	tbb	[pc, r3]
  401002:	1002      	.short	0x1002
  401004:	291c      	.short	0x291c
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			*(temperature) = data * sign * 0.5;
  401006:	09d2      	lsrs	r2, r2, #7
  401008:	fb00 f002 	mul.w	r0, r0, r2
  40100c:	4b19      	ldr	r3, [pc, #100]	; (401074 <at30tse_read_temperature+0xbc>)
  40100e:	4798      	blx	r3
  401010:	2200      	movs	r2, #0
  401012:	4b19      	ldr	r3, [pc, #100]	; (401078 <at30tse_read_temperature+0xc0>)
  401014:	4e19      	ldr	r6, [pc, #100]	; (40107c <at30tse_read_temperature+0xc4>)
  401016:	47b0      	blx	r6
  401018:	e9c4 0100 	strd	r0, r1, [r4]
			break;
		}
	}

	return error_code;
}
  40101c:	4628      	mov	r0, r5
  40101e:	b002      	add	sp, #8
  401020:	bd70      	pop	{r4, r5, r6, pc}
			*(temperature) = data * sign * 0.25;
  401022:	0992      	lsrs	r2, r2, #6
  401024:	fb00 f002 	mul.w	r0, r0, r2
  401028:	4b12      	ldr	r3, [pc, #72]	; (401074 <at30tse_read_temperature+0xbc>)
  40102a:	4798      	blx	r3
  40102c:	2200      	movs	r2, #0
  40102e:	4b14      	ldr	r3, [pc, #80]	; (401080 <at30tse_read_temperature+0xc8>)
  401030:	4e12      	ldr	r6, [pc, #72]	; (40107c <at30tse_read_temperature+0xc4>)
  401032:	47b0      	blx	r6
  401034:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  401038:	e7f0      	b.n	40101c <at30tse_read_temperature+0x64>
			*(temperature) = data * sign * 0.125;
  40103a:	0952      	lsrs	r2, r2, #5
  40103c:	fb00 f002 	mul.w	r0, r0, r2
  401040:	4b0c      	ldr	r3, [pc, #48]	; (401074 <at30tse_read_temperature+0xbc>)
  401042:	4798      	blx	r3
  401044:	2200      	movs	r2, #0
  401046:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  40104a:	4e0c      	ldr	r6, [pc, #48]	; (40107c <at30tse_read_temperature+0xc4>)
  40104c:	47b0      	blx	r6
  40104e:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  401052:	e7e3      	b.n	40101c <at30tse_read_temperature+0x64>
			*(temperature) = data * sign * 0.0625;
  401054:	0912      	lsrs	r2, r2, #4
  401056:	fb00 f002 	mul.w	r0, r0, r2
  40105a:	4b06      	ldr	r3, [pc, #24]	; (401074 <at30tse_read_temperature+0xbc>)
  40105c:	4798      	blx	r3
  40105e:	2200      	movs	r2, #0
  401060:	4b08      	ldr	r3, [pc, #32]	; (401084 <at30tse_read_temperature+0xcc>)
  401062:	4e06      	ldr	r6, [pc, #24]	; (40107c <at30tse_read_temperature+0xc4>)
  401064:	47b0      	blx	r6
  401066:	e9c4 0100 	strd	r0, r1, [r4]
			break;
  40106a:	e7d7      	b.n	40101c <at30tse_read_temperature+0x64>
  40106c:	00400f85 	.word	0x00400f85
  401070:	20001069 	.word	0x20001069
  401074:	00403575 	.word	0x00403575
  401078:	3fe00000 	.word	0x3fe00000
  40107c:	00403641 	.word	0x00403641
  401080:	3fd00000 	.word	0x3fd00000
  401084:	3fb00000 	.word	0x3fb00000

00401088 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  401088:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40108a:	4b07      	ldr	r3, [pc, #28]	; (4010a8 <sd_mmc_configure_slot+0x20>)
  40108c:	6819      	ldr	r1, [r3, #0]
  40108e:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  401092:	3300      	adds	r3, #0
  401094:	bf18      	it	ne
  401096:	2301      	movne	r3, #1
  401098:	7c4a      	ldrb	r2, [r1, #17]
  40109a:	6809      	ldr	r1, [r1, #0]
  40109c:	4803      	ldr	r0, [pc, #12]	; (4010ac <sd_mmc_configure_slot+0x24>)
  40109e:	7800      	ldrb	r0, [r0, #0]
  4010a0:	4c03      	ldr	r4, [pc, #12]	; (4010b0 <sd_mmc_configure_slot+0x28>)
  4010a2:	47a0      	blx	r4
  4010a4:	bd10      	pop	{r4, pc}
  4010a6:	bf00      	nop
  4010a8:	2000106c 	.word	0x2000106c
  4010ac:	20001071 	.word	0x20001071
  4010b0:	00401801 	.word	0x00401801

004010b4 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4010b4:	b108      	cbz	r0, 4010ba <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4010b6:	2004      	movs	r0, #4
  4010b8:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4010ba:	4b33      	ldr	r3, [pc, #204]	; (401188 <sd_mmc_select_slot+0xd4>)
  4010bc:	689a      	ldr	r2, [r3, #8]
	return pin >> 5;
  4010be:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4010c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4010c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4010c8:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4010ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4010cc:	f002 021f 	and.w	r2, r2, #31
  4010d0:	2301      	movs	r3, #1
  4010d2:	fa03 f202 	lsl.w	r2, r3, r2
  4010d6:	420a      	tst	r2, r1
  4010d8:	d010      	beq.n	4010fc <sd_mmc_select_slot+0x48>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4010da:	4b2b      	ldr	r3, [pc, #172]	; (401188 <sd_mmc_select_slot+0xd4>)
  4010dc:	7b9b      	ldrb	r3, [r3, #14]
  4010de:	2b01      	cmp	r3, #1
  4010e0:	d004      	beq.n	4010ec <sd_mmc_select_slot+0x38>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4010e2:	2204      	movs	r2, #4
  4010e4:	4b28      	ldr	r3, [pc, #160]	; (401188 <sd_mmc_select_slot+0xd4>)
  4010e6:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  4010e8:	2002      	movs	r0, #2
  4010ea:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  4010ec:	4b27      	ldr	r3, [pc, #156]	; (40118c <sd_mmc_select_slot+0xd8>)
  4010ee:	781b      	ldrb	r3, [r3, #0]
  4010f0:	2b00      	cmp	r3, #0
  4010f2:	d0f6      	beq.n	4010e2 <sd_mmc_select_slot+0x2e>
		SysTick->CTRL = 0;
  4010f4:	2200      	movs	r2, #0
  4010f6:	4b26      	ldr	r3, [pc, #152]	; (401190 <sd_mmc_select_slot+0xdc>)
  4010f8:	601a      	str	r2, [r3, #0]
  4010fa:	e7f2      	b.n	4010e2 <sd_mmc_select_slot+0x2e>
{
  4010fc:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  4010fe:	4b22      	ldr	r3, [pc, #136]	; (401188 <sd_mmc_select_slot+0xd4>)
  401100:	7b9b      	ldrb	r3, [r3, #14]
  401102:	2b04      	cmp	r3, #4
  401104:	d005      	beq.n	401112 <sd_mmc_select_slot+0x5e>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  401106:	2b01      	cmp	r3, #1
  401108:	d019      	beq.n	40113e <sd_mmc_select_slot+0x8a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40110a:	2b03      	cmp	r3, #3
  40110c:	d12c      	bne.n	401168 <sd_mmc_select_slot+0xb4>
		return SD_MMC_ERR_UNUSABLE;
  40110e:	2003      	movs	r0, #3
  401110:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  401112:	2201      	movs	r2, #1
  401114:	4b1c      	ldr	r3, [pc, #112]	; (401188 <sd_mmc_select_slot+0xd4>)
  401116:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  401118:	4b1d      	ldr	r3, [pc, #116]	; (401190 <sd_mmc_select_slot+0xdc>)
  40111a:	681b      	ldr	r3, [r3, #0]
  40111c:	b93b      	cbnz	r3, 40112e <sd_mmc_select_slot+0x7a>
		sd_mmc_sam_systick_used = true;
  40111e:	4b1b      	ldr	r3, [pc, #108]	; (40118c <sd_mmc_select_slot+0xd8>)
  401120:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  401122:	4b1b      	ldr	r3, [pc, #108]	; (401190 <sd_mmc_select_slot+0xdc>)
  401124:	491b      	ldr	r1, [pc, #108]	; (401194 <sd_mmc_select_slot+0xe0>)
  401126:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  401128:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40112a:	2002      	movs	r0, #2
  40112c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40112e:	2200      	movs	r2, #0
  401130:	4b16      	ldr	r3, [pc, #88]	; (40118c <sd_mmc_select_slot+0xd8>)
  401132:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  401134:	4818      	ldr	r0, [pc, #96]	; (401198 <sd_mmc_select_slot+0xe4>)
  401136:	4b19      	ldr	r3, [pc, #100]	; (40119c <sd_mmc_select_slot+0xe8>)
  401138:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40113a:	2002      	movs	r0, #2
  40113c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40113e:	4b13      	ldr	r3, [pc, #76]	; (40118c <sd_mmc_select_slot+0xd8>)
  401140:	781b      	ldrb	r3, [r3, #0]
  401142:	b13b      	cbz	r3, 401154 <sd_mmc_select_slot+0xa0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  401144:	4b12      	ldr	r3, [pc, #72]	; (401190 <sd_mmc_select_slot+0xdc>)
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40114c:	d01a      	beq.n	401184 <sd_mmc_select_slot+0xd0>
		SysTick->CTRL = 0;
  40114e:	2200      	movs	r2, #0
  401150:	4b0f      	ldr	r3, [pc, #60]	; (401190 <sd_mmc_select_slot+0xdc>)
  401152:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  401154:	4b0c      	ldr	r3, [pc, #48]	; (401188 <sd_mmc_select_slot+0xd4>)
  401156:	2202      	movs	r2, #2
  401158:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40115a:	4a11      	ldr	r2, [pc, #68]	; (4011a0 <sd_mmc_select_slot+0xec>)
  40115c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40115e:	2201      	movs	r2, #1
  401160:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  401162:	2200      	movs	r2, #0
  401164:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  401168:	2200      	movs	r2, #0
  40116a:	4b0e      	ldr	r3, [pc, #56]	; (4011a4 <sd_mmc_select_slot+0xf0>)
  40116c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40116e:	4c06      	ldr	r4, [pc, #24]	; (401188 <sd_mmc_select_slot+0xd4>)
  401170:	4b0d      	ldr	r3, [pc, #52]	; (4011a8 <sd_mmc_select_slot+0xf4>)
  401172:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  401174:	4b0d      	ldr	r3, [pc, #52]	; (4011ac <sd_mmc_select_slot+0xf8>)
  401176:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  401178:	7ba0      	ldrb	r0, [r4, #14]
  40117a:	2802      	cmp	r0, #2
  40117c:	bf14      	ite	ne
  40117e:	2000      	movne	r0, #0
  401180:	2001      	moveq	r0, #1
  401182:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  401184:	2002      	movs	r0, #2
  401186:	bd10      	pop	{r4, pc}
  401188:	20000428 	.word	0x20000428
  40118c:	20001070 	.word	0x20001070
  401190:	e000e010 	.word	0xe000e010
  401194:	00e4e1c0 	.word	0x00e4e1c0
  401198:	0082ca25 	.word	0x0082ca25
  40119c:	20000001 	.word	0x20000001
  4011a0:	00061a80 	.word	0x00061a80
  4011a4:	20001071 	.word	0x20001071
  4011a8:	2000106c 	.word	0x2000106c
  4011ac:	00401089 	.word	0x00401089

004011b0 <sd_mmc_cmd13>:
{
  4011b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011b4:	4c09      	ldr	r4, [pc, #36]	; (4011dc <sd_mmc_cmd13+0x2c>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  4011b6:	2700      	movs	r7, #0
  4011b8:	4e09      	ldr	r6, [pc, #36]	; (4011e0 <sd_mmc_cmd13+0x30>)
			if (!(driver_get_response() & 0xFF)) {
  4011ba:	4d0a      	ldr	r5, [pc, #40]	; (4011e4 <sd_mmc_cmd13+0x34>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  4011bc:	4639      	mov	r1, r7
  4011be:	f641 300d 	movw	r0, #6925	; 0x1b0d
  4011c2:	47b0      	blx	r6
  4011c4:	4680      	mov	r8, r0
  4011c6:	b130      	cbz	r0, 4011d6 <sd_mmc_cmd13+0x26>
			if (!(driver_get_response() & 0xFF)) {
  4011c8:	47a8      	blx	r5
  4011ca:	b2c0      	uxtb	r0, r0
  4011cc:	b118      	cbz	r0, 4011d6 <sd_mmc_cmd13+0x26>
		if (nec_timeout-- == 0) {
  4011ce:	3c01      	subs	r4, #1
  4011d0:	d1f4      	bne.n	4011bc <sd_mmc_cmd13+0xc>
			return false;
  4011d2:	f04f 0800 	mov.w	r8, #0
}
  4011d6:	4640      	mov	r0, r8
  4011d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011dc:	00030d41 	.word	0x00030d41
  4011e0:	00401a29 	.word	0x00401a29
  4011e4:	00401a41 	.word	0x00401a41

004011e8 <sd_mmc_cmd9_spi>:
{
  4011e8:	b510      	push	{r4, lr}
  4011ea:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
  4011ec:	4b0d      	ldr	r3, [pc, #52]	; (401224 <sd_mmc_cmd9_spi+0x3c>)
  4011ee:	681b      	ldr	r3, [r3, #0]
  4011f0:	8999      	ldrh	r1, [r3, #12]
  4011f2:	2301      	movs	r3, #1
  4011f4:	9300      	str	r3, [sp, #0]
  4011f6:	2210      	movs	r2, #16
  4011f8:	4091      	lsls	r1, r2
  4011fa:	480b      	ldr	r0, [pc, #44]	; (401228 <sd_mmc_cmd9_spi+0x40>)
  4011fc:	4c0b      	ldr	r4, [pc, #44]	; (40122c <sd_mmc_cmd9_spi+0x44>)
  4011fe:	47a0      	blx	r4
  401200:	4603      	mov	r3, r0
  401202:	b910      	cbnz	r0, 40120a <sd_mmc_cmd9_spi+0x22>
}
  401204:	4618      	mov	r0, r3
  401206:	b002      	add	sp, #8
  401208:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
  40120a:	4b06      	ldr	r3, [pc, #24]	; (401224 <sd_mmc_cmd9_spi+0x3c>)
  40120c:	6818      	ldr	r0, [r3, #0]
  40120e:	2101      	movs	r1, #1
  401210:	3012      	adds	r0, #18
  401212:	4b07      	ldr	r3, [pc, #28]	; (401230 <sd_mmc_cmd9_spi+0x48>)
  401214:	4798      	blx	r3
  401216:	4603      	mov	r3, r0
  401218:	2800      	cmp	r0, #0
  40121a:	d0f3      	beq.n	401204 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
  40121c:	4b05      	ldr	r3, [pc, #20]	; (401234 <sd_mmc_cmd9_spi+0x4c>)
  40121e:	4798      	blx	r3
  401220:	4603      	mov	r3, r0
  401222:	e7ef      	b.n	401204 <sd_mmc_cmd9_spi+0x1c>
  401224:	2000106c 	.word	0x2000106c
  401228:	00081109 	.word	0x00081109
  40122c:	004018a1 	.word	0x004018a1
  401230:	00401ac1 	.word	0x00401ac1
  401234:	00401b3d 	.word	0x00401b3d

00401238 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  401238:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40123a:	4b04      	ldr	r3, [pc, #16]	; (40124c <sd_mmc_deselect_slot+0x14>)
  40123c:	781b      	ldrb	r3, [r3, #0]
  40123e:	b103      	cbz	r3, 401242 <sd_mmc_deselect_slot+0xa>
  401240:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  401242:	2000      	movs	r0, #0
  401244:	4b02      	ldr	r3, [pc, #8]	; (401250 <sd_mmc_deselect_slot+0x18>)
  401246:	4798      	blx	r3
	}
}
  401248:	e7fa      	b.n	401240 <sd_mmc_deselect_slot+0x8>
  40124a:	bf00      	nop
  40124c:	20001071 	.word	0x20001071
  401250:	00401841 	.word	0x00401841

00401254 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  401254:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  401256:	200d      	movs	r0, #13
  401258:	4b05      	ldr	r3, [pc, #20]	; (401270 <sd_mmc_init+0x1c>)
  40125a:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40125c:	2204      	movs	r2, #4
  40125e:	4b05      	ldr	r3, [pc, #20]	; (401274 <sd_mmc_init+0x20>)
  401260:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  401262:	22ff      	movs	r2, #255	; 0xff
  401264:	4b04      	ldr	r3, [pc, #16]	; (401278 <sd_mmc_init+0x24>)
  401266:	701a      	strb	r2, [r3, #0]
	driver_init();
  401268:	4b04      	ldr	r3, [pc, #16]	; (40127c <sd_mmc_init+0x28>)
  40126a:	4798      	blx	r3
  40126c:	bd08      	pop	{r3, pc}
  40126e:	bf00      	nop
  401270:	00402565 	.word	0x00402565
  401274:	20000428 	.word	0x20000428
  401278:	20001071 	.word	0x20001071
  40127c:	004017d1 	.word	0x004017d1

00401280 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  401280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401284:	b087      	sub	sp, #28
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  401286:	4b9a      	ldr	r3, [pc, #616]	; (4014f0 <sd_mmc_check+0x270>)
  401288:	4798      	blx	r3
  40128a:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40128c:	2801      	cmp	r0, #1
  40128e:	d005      	beq.n	40129c <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  401290:	4b98      	ldr	r3, [pc, #608]	; (4014f4 <sd_mmc_check+0x274>)
  401292:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  401294:	4620      	mov	r0, r4
  401296:	b007      	add	sp, #28
  401298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  40129c:	4b96      	ldr	r3, [pc, #600]	; (4014f8 <sd_mmc_check+0x278>)
  40129e:	681b      	ldr	r3, [r3, #0]
  4012a0:	2201      	movs	r2, #1
  4012a2:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4012a4:	2500      	movs	r5, #0
  4012a6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4012a8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4012aa:	4b94      	ldr	r3, [pc, #592]	; (4014fc <sd_mmc_check+0x27c>)
  4012ac:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  4012ae:	4629      	mov	r1, r5
  4012b0:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  4012b4:	4b92      	ldr	r3, [pc, #584]	; (401500 <sd_mmc_check+0x280>)
  4012b6:	4798      	blx	r3
  4012b8:	b930      	cbnz	r0, 4012c8 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4012ba:	4b8f      	ldr	r3, [pc, #572]	; (4014f8 <sd_mmc_check+0x278>)
  4012bc:	681b      	ldr	r3, [r3, #0]
  4012be:	2403      	movs	r4, #3
  4012c0:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4012c2:	4b8c      	ldr	r3, [pc, #560]	; (4014f4 <sd_mmc_check+0x274>)
  4012c4:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4012c6:	e7e5      	b.n	401294 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4012c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4012cc:	f245 5008 	movw	r0, #21768	; 0x5508
  4012d0:	4b8b      	ldr	r3, [pc, #556]	; (401500 <sd_mmc_check+0x280>)
  4012d2:	4798      	blx	r3
  4012d4:	2800      	cmp	r0, #0
  4012d6:	d129      	bne.n	40132c <sd_mmc_check+0xac>
	*v2 = 0;
  4012d8:	2700      	movs	r7, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4012da:	4b87      	ldr	r3, [pc, #540]	; (4014f8 <sd_mmc_check+0x278>)
  4012dc:	681b      	ldr	r3, [r3, #0]
  4012de:	7bdb      	ldrb	r3, [r3, #15]
  4012e0:	f013 0f01 	tst.w	r3, #1
  4012e4:	f040 81df 	bne.w	4016a6 <sd_mmc_check+0x426>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  4012e8:	4b83      	ldr	r3, [pc, #524]	; (4014f8 <sd_mmc_check+0x278>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	7bdb      	ldrb	r3, [r3, #15]
  4012ee:	f003 0309 	and.w	r3, r3, #9
  4012f2:	2b01      	cmp	r3, #1
  4012f4:	d111      	bne.n	40131a <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4012f6:	f44f 7100 	mov.w	r1, #512	; 0x200
  4012fa:	f241 1010 	movw	r0, #4368	; 0x1110
  4012fe:	4b80      	ldr	r3, [pc, #512]	; (401500 <sd_mmc_check+0x280>)
  401300:	4798      	blx	r3
  401302:	2800      	cmp	r0, #0
  401304:	d0d9      	beq.n	4012ba <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401306:	4b7c      	ldr	r3, [pc, #496]	; (4014f8 <sd_mmc_check+0x278>)
  401308:	681b      	ldr	r3, [r3, #0]
  40130a:	7bdb      	ldrb	r3, [r3, #15]
  40130c:	f013 0f01 	tst.w	r3, #1
  401310:	d003      	beq.n	40131a <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
  401312:	4b7c      	ldr	r3, [pc, #496]	; (401504 <sd_mmc_check+0x284>)
  401314:	4798      	blx	r3
  401316:	2800      	cmp	r0, #0
  401318:	d0cf      	beq.n	4012ba <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  40131a:	4b7b      	ldr	r3, [pc, #492]	; (401508 <sd_mmc_check+0x288>)
  40131c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  40131e:	4b76      	ldr	r3, [pc, #472]	; (4014f8 <sd_mmc_check+0x278>)
  401320:	681b      	ldr	r3, [r3, #0]
  401322:	2200      	movs	r2, #0
  401324:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  401326:	4b73      	ldr	r3, [pc, #460]	; (4014f4 <sd_mmc_check+0x274>)
  401328:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  40132a:	e7b3      	b.n	401294 <sd_mmc_check+0x14>
	resp = driver_get_response();
  40132c:	4b77      	ldr	r3, [pc, #476]	; (40150c <sd_mmc_check+0x28c>)
  40132e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  401330:	f1b0 3fff 	cmp.w	r0, #4294967295
  401334:	f000 81b5 	beq.w	4016a2 <sd_mmc_check+0x422>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  401338:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40133c:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  401340:	d1bb      	bne.n	4012ba <sd_mmc_check+0x3a>
	*v2 = 1;
  401342:	2701      	movs	r7, #1
  401344:	e7c9      	b.n	4012da <sd_mmc_check+0x5a>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  401346:	2100      	movs	r1, #0
  401348:	f240 503a 	movw	r0, #1338	; 0x53a
  40134c:	4b6c      	ldr	r3, [pc, #432]	; (401500 <sd_mmc_check+0x280>)
  40134e:	4798      	blx	r3
  401350:	b9f0      	cbnz	r0, 401390 <sd_mmc_check+0x110>
			sd_mmc_card->type = CARD_TYPE_MMC;
  401352:	4b69      	ldr	r3, [pc, #420]	; (4014f8 <sd_mmc_check+0x278>)
  401354:	681b      	ldr	r3, [r3, #0]
  401356:	2202      	movs	r2, #2
  401358:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  40135a:	2100      	movs	r1, #0
  40135c:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  401360:	4b67      	ldr	r3, [pc, #412]	; (401500 <sd_mmc_check+0x280>)
  401362:	4798      	blx	r3
  401364:	2800      	cmp	r0, #0
  401366:	d0a8      	beq.n	4012ba <sd_mmc_check+0x3a>
  401368:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  40136c:	f04f 0800 	mov.w	r8, #0
  401370:	4e63      	ldr	r6, [pc, #396]	; (401500 <sd_mmc_check+0x280>)
		resp = driver_get_response();
  401372:	4f66      	ldr	r7, [pc, #408]	; (40150c <sd_mmc_check+0x28c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  401374:	4641      	mov	r1, r8
  401376:	f241 1001 	movw	r0, #4353	; 0x1101
  40137a:	47b0      	blx	r6
  40137c:	2800      	cmp	r0, #0
  40137e:	d09c      	beq.n	4012ba <sd_mmc_check+0x3a>
		resp = driver_get_response();
  401380:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  401382:	f010 0f01 	tst.w	r0, #1
  401386:	f000 8084 	beq.w	401492 <sd_mmc_check+0x212>
		if (retry-- == 0) {
  40138a:	3d01      	subs	r5, #1
  40138c:	d1f2      	bne.n	401374 <sd_mmc_check+0xf4>
  40138e:	e794      	b.n	4012ba <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_CCS) != 0) {
  401390:	4b5e      	ldr	r3, [pc, #376]	; (40150c <sd_mmc_check+0x28c>)
  401392:	4798      	blx	r3
  401394:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  401398:	d005      	beq.n	4013a6 <sd_mmc_check+0x126>
		sd_mmc_card->type |= CARD_TYPE_HC;
  40139a:	4b57      	ldr	r3, [pc, #348]	; (4014f8 <sd_mmc_check+0x278>)
  40139c:	681a      	ldr	r2, [r3, #0]
  40139e:	7bd3      	ldrb	r3, [r2, #15]
  4013a0:	f043 0308 	orr.w	r3, r3, #8
  4013a4:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  4013a6:	2100      	movs	r1, #0
  4013a8:	f241 103b 	movw	r0, #4411	; 0x113b
  4013ac:	4b54      	ldr	r3, [pc, #336]	; (401500 <sd_mmc_check+0x280>)
  4013ae:	4798      	blx	r3
  4013b0:	2800      	cmp	r0, #0
  4013b2:	d082      	beq.n	4012ba <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4013b4:	4b50      	ldr	r3, [pc, #320]	; (4014f8 <sd_mmc_check+0x278>)
  4013b6:	681b      	ldr	r3, [r3, #0]
  4013b8:	7bdb      	ldrb	r3, [r3, #15]
  4013ba:	f013 0f01 	tst.w	r3, #1
  4013be:	f000 8190 	beq.w	4016e2 <sd_mmc_check+0x462>
		if (!sd_mmc_cmd9_spi()) {
  4013c2:	4b53      	ldr	r3, [pc, #332]	; (401510 <sd_mmc_check+0x290>)
  4013c4:	4798      	blx	r3
  4013c6:	2800      	cmp	r0, #0
  4013c8:	f43f af77 	beq.w	4012ba <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  4013cc:	4b4a      	ldr	r3, [pc, #296]	; (4014f8 <sd_mmc_check+0x278>)
  4013ce:	681b      	ldr	r3, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4013d0:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4013d2:	f002 0007 	and.w	r0, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4013d6:	494f      	ldr	r1, [pc, #316]	; (401514 <sd_mmc_check+0x294>)
  4013d8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  4013dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4013e0:	fb01 f100 	mul.w	r1, r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  4013e4:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  4013e8:	484b      	ldr	r0, [pc, #300]	; (401518 <sd_mmc_check+0x298>)
  4013ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4013ee:	fb02 f201 	mul.w	r2, r2, r1
  4013f2:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4013f4:	7c9a      	ldrb	r2, [r3, #18]
  4013f6:	0992      	lsrs	r2, r2, #6
  4013f8:	f040 812a 	bne.w	401650 <sd_mmc_check+0x3d0>
  4013fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4013fe:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401400:	7e1a      	ldrb	r2, [r3, #24]
  401402:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401404:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  401408:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40140c:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40140e:	7ed9      	ldrb	r1, [r3, #27]
  401410:	0049      	lsls	r1, r1, #1
  401412:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  401416:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40141a:	3201      	adds	r2, #1
  40141c:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  401420:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  401422:	408a      	lsls	r2, r1
  401424:	7dd9      	ldrb	r1, [r3, #23]
  401426:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40142a:	408a      	lsls	r2, r1
				/ 1024;
  40142c:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  40142e:	605a      	str	r2, [r3, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  401430:	8999      	ldrh	r1, [r3, #12]
  401432:	0409      	lsls	r1, r1, #16
  401434:	f241 1037 	movw	r0, #4407	; 0x1137
  401438:	4b31      	ldr	r3, [pc, #196]	; (401500 <sd_mmc_check+0x280>)
  40143a:	4798      	blx	r3
  40143c:	2800      	cmp	r0, #0
  40143e:	f43f af3c 	beq.w	4012ba <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  401442:	2301      	movs	r3, #1
  401444:	9300      	str	r3, [sp, #0]
  401446:	2208      	movs	r2, #8
  401448:	2100      	movs	r1, #0
  40144a:	4834      	ldr	r0, [pc, #208]	; (40151c <sd_mmc_check+0x29c>)
  40144c:	4d34      	ldr	r5, [pc, #208]	; (401520 <sd_mmc_check+0x2a0>)
  40144e:	47a8      	blx	r5
  401450:	2800      	cmp	r0, #0
  401452:	f43f af32 	beq.w	4012ba <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  401456:	2101      	movs	r1, #1
  401458:	a804      	add	r0, sp, #16
  40145a:	4b32      	ldr	r3, [pc, #200]	; (401524 <sd_mmc_check+0x2a4>)
  40145c:	4798      	blx	r3
  40145e:	2800      	cmp	r0, #0
  401460:	f43f af2b 	beq.w	4012ba <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  401464:	4b30      	ldr	r3, [pc, #192]	; (401528 <sd_mmc_check+0x2a8>)
  401466:	4798      	blx	r3
  401468:	2800      	cmp	r0, #0
  40146a:	f43f af26 	beq.w	4012ba <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  40146e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401472:	f003 030f 	and.w	r3, r3, #15
  401476:	2b01      	cmp	r3, #1
  401478:	f000 8104 	beq.w	401684 <sd_mmc_check+0x404>
  40147c:	2b00      	cmp	r3, #0
  40147e:	f000 80f4 	beq.w	40166a <sd_mmc_check+0x3ea>
  401482:	2b02      	cmp	r3, #2
  401484:	f000 8103 	beq.w	40168e <sd_mmc_check+0x40e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  401488:	4b1b      	ldr	r3, [pc, #108]	; (4014f8 <sd_mmc_check+0x278>)
  40148a:	681b      	ldr	r3, [r3, #0]
  40148c:	2210      	movs	r2, #16
  40148e:	741a      	strb	r2, [r3, #16]
  401490:	e0ef      	b.n	401672 <sd_mmc_check+0x3f2>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  401492:	2100      	movs	r1, #0
  401494:	f240 503a 	movw	r0, #1338	; 0x53a
  401498:	4b19      	ldr	r3, [pc, #100]	; (401500 <sd_mmc_check+0x280>)
  40149a:	4798      	blx	r3
  40149c:	2800      	cmp	r0, #0
  40149e:	f43f af0c 	beq.w	4012ba <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
  4014a2:	4b1a      	ldr	r3, [pc, #104]	; (40150c <sd_mmc_check+0x28c>)
  4014a4:	4798      	blx	r3
  4014a6:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4014aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4014ae:	d105      	bne.n	4014bc <sd_mmc_check+0x23c>
		sd_mmc_card->type |= CARD_TYPE_HC;
  4014b0:	4b11      	ldr	r3, [pc, #68]	; (4014f8 <sd_mmc_check+0x278>)
  4014b2:	681a      	ldr	r2, [r3, #0]
  4014b4:	7bd3      	ldrb	r3, [r2, #15]
  4014b6:	f043 0308 	orr.w	r3, r3, #8
  4014ba:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  4014bc:	2100      	movs	r1, #0
  4014be:	f241 103b 	movw	r0, #4411	; 0x113b
  4014c2:	4b0f      	ldr	r3, [pc, #60]	; (401500 <sd_mmc_check+0x280>)
  4014c4:	4798      	blx	r3
  4014c6:	2800      	cmp	r0, #0
  4014c8:	f43f aef7 	beq.w	4012ba <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_spi()) {
  4014cc:	4b10      	ldr	r3, [pc, #64]	; (401510 <sd_mmc_check+0x290>)
  4014ce:	4798      	blx	r3
  4014d0:	2800      	cmp	r0, #0
  4014d2:	f43f aef2 	beq.w	4012ba <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4014d6:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <sd_mmc_check+0x278>)
  4014d8:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4014da:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  4014dc:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4014e0:	3b01      	subs	r3, #1
  4014e2:	2b03      	cmp	r3, #3
  4014e4:	d822      	bhi.n	40152c <sd_mmc_check+0x2ac>
  4014e6:	e8df f003 	tbb	[pc, r3]
  4014ea:	908d      	.short	0x908d
  4014ec:	9693      	.short	0x9693
  4014ee:	bf00      	nop
  4014f0:	004010b5 	.word	0x004010b5
  4014f4:	00401239 	.word	0x00401239
  4014f8:	2000106c 	.word	0x2000106c
  4014fc:	00401869 	.word	0x00401869
  401500:	00401a29 	.word	0x00401a29
  401504:	004011b1 	.word	0x004011b1
  401508:	00401089 	.word	0x00401089
  40150c:	00401a41 	.word	0x00401a41
  401510:	004011e9 	.word	0x004011e9
  401514:	00407c8c 	.word	0x00407c8c
  401518:	00407ca8 	.word	0x00407ca8
  40151c:	00081133 	.word	0x00081133
  401520:	004018a1 	.word	0x004018a1
  401524:	00401ac1 	.word	0x00401ac1
  401528:	00401b3d 	.word	0x00401b3d
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  40152c:	2312      	movs	r3, #18
  40152e:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401530:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  401532:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401536:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40153a:	496d      	ldr	r1, [pc, #436]	; (4016f0 <sd_mmc_check+0x470>)
  40153c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  401540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401544:	fb03 f301 	mul.w	r3, r3, r1
  401548:	496a      	ldr	r1, [pc, #424]	; (4016f4 <sd_mmc_check+0x474>)
  40154a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40154e:	fb03 f301 	mul.w	r3, r3, r1
  401552:	6013      	str	r3, [r2, #0]
  401554:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401556:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401558:	7e13      	ldrb	r3, [r2, #24]
  40155a:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40155c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  401560:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  401564:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  401568:	f640 71ff 	movw	r1, #4095	; 0xfff
  40156c:	428b      	cmp	r3, r1
  40156e:	d00f      	beq.n	401590 <sd_mmc_check+0x310>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401570:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401572:	7ed1      	ldrb	r1, [r2, #27]
  401574:	0049      	lsls	r1, r1, #1
  401576:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40157a:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  40157c:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  401580:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  401582:	408b      	lsls	r3, r1
  401584:	7dd1      	ldrb	r1, [r2, #23]
  401586:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40158a:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  40158c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40158e:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  401590:	7c13      	ldrb	r3, [r2, #16]
  401592:	2b3f      	cmp	r3, #63	; 0x3f
  401594:	d94b      	bls.n	40162e <sd_mmc_check+0x3ae>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  401596:	2100      	movs	r1, #0
  401598:	9100      	str	r1, [sp, #0]
  40159a:	2301      	movs	r3, #1
  40159c:	f44f 7200 	mov.w	r2, #512	; 0x200
  4015a0:	4855      	ldr	r0, [pc, #340]	; (4016f8 <sd_mmc_check+0x478>)
  4015a2:	4d56      	ldr	r5, [pc, #344]	; (4016fc <sd_mmc_check+0x47c>)
  4015a4:	47a8      	blx	r5
  4015a6:	2800      	cmp	r0, #0
  4015a8:	f43f ae87 	beq.w	4012ba <sd_mmc_check+0x3a>
  4015ac:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  4015ae:	4e54      	ldr	r6, [pc, #336]	; (401700 <sd_mmc_check+0x480>)
  4015b0:	a803      	add	r0, sp, #12
  4015b2:	47b0      	blx	r6
  4015b4:	2800      	cmp	r0, #0
  4015b6:	f43f ae80 	beq.w	4012ba <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4015ba:	3501      	adds	r5, #1
  4015bc:	b2ad      	uxth	r5, r5
  4015be:	2d32      	cmp	r5, #50	; 0x32
  4015c0:	d1f6      	bne.n	4015b0 <sd_mmc_check+0x330>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4015c2:	4b50      	ldr	r3, [pc, #320]	; (401704 <sd_mmc_check+0x484>)
  4015c4:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4015c6:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4015c8:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4015ca:	7e1b      	ldrb	r3, [r3, #24]
  4015cc:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4015ce:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4015d2:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4015d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4015da:	f640 72ff 	movw	r2, #4095	; 0xfff
  4015de:	4293      	cmp	r3, r2
  4015e0:	d10e      	bne.n	401600 <sd_mmc_check+0x380>
			if (!driver_read_word(&sec_count)) {
  4015e2:	4e47      	ldr	r6, [pc, #284]	; (401700 <sd_mmc_check+0x480>)
  4015e4:	a804      	add	r0, sp, #16
  4015e6:	47b0      	blx	r6
  4015e8:	2800      	cmp	r0, #0
  4015ea:	f43f ae66 	beq.w	4012ba <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4015ee:	3501      	adds	r5, #1
  4015f0:	b2ad      	uxth	r5, r5
  4015f2:	2d35      	cmp	r5, #53	; 0x35
  4015f4:	d9f6      	bls.n	4015e4 <sd_mmc_check+0x364>
		sd_mmc_card->capacity = sec_count / 2;
  4015f6:	4b43      	ldr	r3, [pc, #268]	; (401704 <sd_mmc_check+0x484>)
  4015f8:	681a      	ldr	r2, [r3, #0]
  4015fa:	9b04      	ldr	r3, [sp, #16]
  4015fc:	085b      	lsrs	r3, r3, #1
  4015fe:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  401600:	4e3f      	ldr	r6, [pc, #252]	; (401700 <sd_mmc_check+0x480>)
  401602:	e012      	b.n	40162a <sd_mmc_check+0x3aa>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  401604:	2314      	movs	r3, #20
  401606:	7413      	strb	r3, [r2, #16]
  401608:	e792      	b.n	401530 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40160a:	2322      	movs	r3, #34	; 0x22
  40160c:	7413      	strb	r3, [r2, #16]
  40160e:	e78f      	b.n	401530 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_3;
  401610:	2330      	movs	r3, #48	; 0x30
  401612:	7413      	strb	r3, [r2, #16]
  401614:	e78c      	b.n	401530 <sd_mmc_check+0x2b0>
		sd_mmc_card->version = CARD_VER_MMC_4;
  401616:	2340      	movs	r3, #64	; 0x40
  401618:	7413      	strb	r3, [r2, #16]
  40161a:	e789      	b.n	401530 <sd_mmc_check+0x2b0>
		if (!driver_read_word(&sec_count)) {
  40161c:	a804      	add	r0, sp, #16
  40161e:	47b0      	blx	r6
  401620:	2800      	cmp	r0, #0
  401622:	f43f ae4a 	beq.w	4012ba <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  401626:	3501      	adds	r5, #1
  401628:	b2ad      	uxth	r5, r5
  40162a:	2d7f      	cmp	r5, #127	; 0x7f
  40162c:	d9f6      	bls.n	40161c <sd_mmc_check+0x39c>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40162e:	f44f 7100 	mov.w	r1, #512	; 0x200
  401632:	f241 1010 	movw	r0, #4368	; 0x1110
  401636:	4b34      	ldr	r3, [pc, #208]	; (401708 <sd_mmc_check+0x488>)
  401638:	4798      	blx	r3
  40163a:	2800      	cmp	r0, #0
  40163c:	f43f ae3d 	beq.w	4012ba <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd13()) {
  401640:	4b32      	ldr	r3, [pc, #200]	; (40170c <sd_mmc_check+0x48c>)
  401642:	4798      	blx	r3
  401644:	2800      	cmp	r0, #0
  401646:	f43f ae38 	beq.w	4012ba <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  40164a:	4b31      	ldr	r3, [pc, #196]	; (401710 <sd_mmc_check+0x490>)
  40164c:	4798      	blx	r3
  40164e:	e666      	b.n	40131e <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401650:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401652:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401654:	7e5a      	ldrb	r2, [r3, #25]
  401656:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401658:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  40165c:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40165e:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  401662:	3201      	adds	r2, #1
  401664:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  401666:	605a      	str	r2, [r3, #4]
  401668:	e6e2      	b.n	401430 <sd_mmc_check+0x1b0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40166a:	4b26      	ldr	r3, [pc, #152]	; (401704 <sd_mmc_check+0x484>)
  40166c:	681b      	ldr	r3, [r3, #0]
  40166e:	2210      	movs	r2, #16
  401670:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  401672:	4b24      	ldr	r3, [pc, #144]	; (401704 <sd_mmc_check+0x484>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	7bdb      	ldrb	r3, [r3, #15]
  401678:	f003 0309 	and.w	r3, r3, #9
  40167c:	2b01      	cmp	r3, #1
  40167e:	f47f ae42 	bne.w	401306 <sd_mmc_check+0x86>
  401682:	e638      	b.n	4012f6 <sd_mmc_check+0x76>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  401684:	4b1f      	ldr	r3, [pc, #124]	; (401704 <sd_mmc_check+0x484>)
  401686:	681b      	ldr	r3, [r3, #0]
  401688:	221a      	movs	r2, #26
  40168a:	741a      	strb	r2, [r3, #16]
  40168c:	e7f1      	b.n	401672 <sd_mmc_check+0x3f2>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  40168e:	f89d 3012 	ldrb.w	r3, [sp, #18]
  401692:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  401694:	4b1b      	ldr	r3, [pc, #108]	; (401704 <sd_mmc_check+0x484>)
  401696:	681b      	ldr	r3, [r3, #0]
  401698:	bf14      	ite	ne
  40169a:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40169c:	2220      	moveq	r2, #32
  40169e:	741a      	strb	r2, [r3, #16]
  4016a0:	e7e7      	b.n	401672 <sd_mmc_check+0x3f2>
	*v2 = 0;
  4016a2:	2700      	movs	r7, #0
  4016a4:	e619      	b.n	4012da <sd_mmc_check+0x5a>
  4016a6:	07bf      	lsls	r7, r7, #30
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4016a8:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4016ac:	f04f 0800 	mov.w	r8, #0
  4016b0:	4e15      	ldr	r6, [pc, #84]	; (401708 <sd_mmc_check+0x488>)
		resp = driver_get_response();
  4016b2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 401714 <sd_mmc_check+0x494>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4016b6:	4641      	mov	r1, r8
  4016b8:	f241 1037 	movw	r0, #4407	; 0x1137
  4016bc:	47b0      	blx	r6
  4016be:	2800      	cmp	r0, #0
  4016c0:	f43f ae47 	beq.w	401352 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
  4016c4:	4639      	mov	r1, r7
  4016c6:	f241 1029 	movw	r0, #4393	; 0x1129
  4016ca:	47b0      	blx	r6
  4016cc:	2800      	cmp	r0, #0
  4016ce:	f43f ae40 	beq.w	401352 <sd_mmc_check+0xd2>
		resp = driver_get_response();
  4016d2:	47c8      	blx	r9
		if (!(resp & R1_SPI_IDLE)) {
  4016d4:	f010 0f01 	tst.w	r0, #1
  4016d8:	f43f ae35 	beq.w	401346 <sd_mmc_check+0xc6>
		if (retry-- == 0) {
  4016dc:	3d01      	subs	r5, #1
  4016de:	d1ea      	bne.n	4016b6 <sd_mmc_check+0x436>
  4016e0:	e637      	b.n	401352 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  4016e2:	f003 0309 	and.w	r3, r3, #9
  4016e6:	2b01      	cmp	r3, #1
  4016e8:	f47f ae17 	bne.w	40131a <sd_mmc_check+0x9a>
  4016ec:	e603      	b.n	4012f6 <sd_mmc_check+0x76>
  4016ee:	bf00      	nop
  4016f0:	00407c8c 	.word	0x00407c8c
  4016f4:	00407c4c 	.word	0x00407c4c
  4016f8:	00081108 	.word	0x00081108
  4016fc:	004018a1 	.word	0x004018a1
  401700:	00401a4d 	.word	0x00401a4d
  401704:	2000106c 	.word	0x2000106c
  401708:	00401a29 	.word	0x00401a29
  40170c:	004011b1 	.word	0x004011b1
  401710:	00401089 	.word	0x00401089
  401714:	00401a41 	.word	0x00401a41

00401718 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
  401718:	b570      	push	{r4, r5, r6, lr}
  40171a:	b082      	sub	sp, #8
	uint8_t line = 0xFF;
  40171c:	ac02      	add	r4, sp, #8
  40171e:	23ff      	movs	r3, #255	; 0xff
  401720:	f804 3d01 	strb.w	r3, [r4, #-1]!

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401724:	4e0f      	ldr	r6, [pc, #60]	; (401764 <sd_mmc_spi_wait_busy+0x4c>)
  401726:	2201      	movs	r2, #1
  401728:	4621      	mov	r1, r4
  40172a:	4630      	mov	r0, r6
  40172c:	4d0e      	ldr	r5, [pc, #56]	; (401768 <sd_mmc_spi_wait_busy+0x50>)
  40172e:	47a8      	blx	r5
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401730:	2201      	movs	r2, #1
  401732:	4621      	mov	r1, r4
  401734:	4630      	mov	r0, r6
  401736:	47a8      	blx	r5
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401738:	2201      	movs	r2, #1
  40173a:	4621      	mov	r1, r4
  40173c:	4630      	mov	r0, r6
  40173e:	47a8      	blx	r5
  401740:	4c0a      	ldr	r4, [pc, #40]	; (40176c <sd_mmc_spi_wait_busy+0x54>)
		if (!(nec_timeout--)) {
			return false;
		}
	} while (line != 0xFF);
  401742:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401746:	2bff      	cmp	r3, #255	; 0xff
  401748:	d008      	beq.n	40175c <sd_mmc_spi_wait_busy+0x44>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  40174a:	2201      	movs	r2, #1
  40174c:	f10d 0107 	add.w	r1, sp, #7
  401750:	4630      	mov	r0, r6
  401752:	47a8      	blx	r5
		if (!(nec_timeout--)) {
  401754:	3c01      	subs	r4, #1
  401756:	d1f4      	bne.n	401742 <sd_mmc_spi_wait_busy+0x2a>
			return false;
  401758:	2000      	movs	r0, #0
  40175a:	e000      	b.n	40175e <sd_mmc_spi_wait_busy+0x46>
	return true;
  40175c:	2001      	movs	r0, #1
}
  40175e:	b002      	add	sp, #8
  401760:	bd70      	pop	{r4, r5, r6, pc}
  401762:	bf00      	nop
  401764:	40008000 	.word	0x40008000
  401768:	00401cfd 	.word	0x00401cfd
  40176c:	00030d40 	.word	0x00030d40

00401770 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
  401770:	b5f0      	push	{r4, r5, r6, r7, lr}
  401772:	b083      	sub	sp, #12
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
  401774:	ad02      	add	r5, sp, #8
  401776:	2300      	movs	r3, #0
  401778:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40177c:	4c10      	ldr	r4, [pc, #64]	; (4017c0 <sd_mmc_spi_start_read_block+0x50>)
		if (i-- == 0) {
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  40177e:	4f11      	ldr	r7, [pc, #68]	; (4017c4 <sd_mmc_spi_start_read_block+0x54>)
  401780:	4e11      	ldr	r6, [pc, #68]	; (4017c8 <sd_mmc_spi_start_read_block+0x58>)
  401782:	2201      	movs	r2, #1
  401784:	4629      	mov	r1, r5
  401786:	4638      	mov	r0, r7
  401788:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
  40178a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40178e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  401792:	d008      	beq.n	4017a6 <sd_mmc_spi_start_read_block+0x36>
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
			}
			return false;
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
  401794:	2bfe      	cmp	r3, #254	; 0xfe
  401796:	d010      	beq.n	4017ba <sd_mmc_spi_start_read_block+0x4a>
		if (i-- == 0) {
  401798:	3c01      	subs	r4, #1
  40179a:	d1f2      	bne.n	401782 <sd_mmc_spi_start_read_block+0x12>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
  40179c:	2204      	movs	r2, #4
  40179e:	4b0b      	ldr	r3, [pc, #44]	; (4017cc <sd_mmc_spi_start_read_block+0x5c>)
  4017a0:	701a      	strb	r2, [r3, #0]
			return false;
  4017a2:	2000      	movs	r0, #0
  4017a4:	e007      	b.n	4017b6 <sd_mmc_spi_start_read_block+0x46>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
  4017a6:	f013 0f07 	tst.w	r3, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
  4017aa:	bf14      	ite	ne
  4017ac:	2207      	movne	r2, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
  4017ae:	220b      	moveq	r2, #11
  4017b0:	4b06      	ldr	r3, [pc, #24]	; (4017cc <sd_mmc_spi_start_read_block+0x5c>)
  4017b2:	701a      	strb	r2, [r3, #0]
			return false;
  4017b4:	2000      	movs	r0, #0

	return true;
}
  4017b6:	b003      	add	sp, #12
  4017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
  4017ba:	2001      	movs	r0, #1
  4017bc:	e7fb      	b.n	4017b6 <sd_mmc_spi_start_read_block+0x46>
  4017be:	bf00      	nop
  4017c0:	0007a120 	.word	0x0007a120
  4017c4:	40008000 	.word	0x40008000
  4017c8:	00401cfd 	.word	0x00401cfd
  4017cc:	20001074 	.word	0x20001074

004017d0 <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4017d0:	2200      	movs	r2, #0
  4017d2:	4b08      	ldr	r3, [pc, #32]	; (4017f4 <sd_mmc_spi_init+0x24>)
  4017d4:	701a      	strb	r2, [r3, #0]
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  4017d6:	4b08      	ldr	r3, [pc, #32]	; (4017f8 <sd_mmc_spi_init+0x28>)
  4017d8:	691b      	ldr	r3, [r3, #16]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  4017da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4017de:	d000      	beq.n	4017e2 <sd_mmc_spi_init+0x12>
  4017e0:	4770      	bx	lr
{
  4017e2:	b510      	push	{r4, lr}
		spi_master_init(SD_MMC_SPI);
  4017e4:	4c04      	ldr	r4, [pc, #16]	; (4017f8 <sd_mmc_spi_init+0x28>)
  4017e6:	4620      	mov	r0, r4
  4017e8:	4b04      	ldr	r3, [pc, #16]	; (4017fc <sd_mmc_spi_init+0x2c>)
  4017ea:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4017ec:	2301      	movs	r3, #1
  4017ee:	6023      	str	r3, [r4, #0]
  4017f0:	bd10      	pop	{r4, pc}
  4017f2:	bf00      	nop
  4017f4:	20001074 	.word	0x20001074
  4017f8:	40008000 	.word	0x40008000
  4017fc:	00401ba5 	.word	0x00401ba5

00401800 <sd_mmc_spi_select_device>:
#endif
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
  401800:	b570      	push	{r4, r5, r6, lr}
  401802:	b082      	sub	sp, #8
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401804:	2200      	movs	r2, #0
  401806:	4b09      	ldr	r3, [pc, #36]	; (40182c <sd_mmc_spi_select_device+0x2c>)
  401808:	701a      	strb	r2, [r3, #0]
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
  40180a:	4c09      	ldr	r4, [pc, #36]	; (401830 <sd_mmc_spi_select_device+0x30>)
  40180c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  401810:	4d08      	ldr	r5, [pc, #32]	; (401834 <sd_mmc_spi_select_device+0x34>)
  401812:	9200      	str	r2, [sp, #0]
  401814:	460b      	mov	r3, r1
  401816:	4621      	mov	r1, r4
  401818:	4628      	mov	r0, r5
  40181a:	4e07      	ldr	r6, [pc, #28]	; (401838 <sd_mmc_spi_select_device+0x38>)
  40181c:	47b0      	blx	r6
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  40181e:	4621      	mov	r1, r4
  401820:	4628      	mov	r0, r5
  401822:	4b06      	ldr	r3, [pc, #24]	; (40183c <sd_mmc_spi_select_device+0x3c>)
  401824:	4798      	blx	r3
}
  401826:	b002      	add	sp, #8
  401828:	bd70      	pop	{r4, r5, r6, pc}
  40182a:	bf00      	nop
  40182c:	20001074 	.word	0x20001074
  401830:	2000044c 	.word	0x2000044c
  401834:	40008000 	.word	0x40008000
  401838:	00401bf9 	.word	0x00401bf9
  40183c:	00401c79 	.word	0x00401c79

00401840 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
  401840:	b508      	push	{r3, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401842:	2200      	movs	r2, #0
  401844:	4b04      	ldr	r3, [pc, #16]	; (401858 <sd_mmc_spi_deselect_device+0x18>)
  401846:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  401848:	4904      	ldr	r1, [pc, #16]	; (40185c <sd_mmc_spi_deselect_device+0x1c>)
  40184a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  40184e:	4804      	ldr	r0, [pc, #16]	; (401860 <sd_mmc_spi_deselect_device+0x20>)
  401850:	4b04      	ldr	r3, [pc, #16]	; (401864 <sd_mmc_spi_deselect_device+0x24>)
  401852:	4798      	blx	r3
  401854:	bd08      	pop	{r3, pc}
  401856:	bf00      	nop
  401858:	20001074 	.word	0x20001074
  40185c:	2000044c 	.word	0x2000044c
  401860:	40008000 	.word	0x40008000
  401864:	00401ca9 	.word	0x00401ca9

00401868 <sd_mmc_spi_send_clock>:
}

void sd_mmc_spi_send_clock(void)
{
  401868:	b5f0      	push	{r4, r5, r6, r7, lr}
  40186a:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
  40186c:	ad02      	add	r5, sp, #8
  40186e:	23ff      	movs	r3, #255	; 0xff
  401870:	f805 3d01 	strb.w	r3, [r5, #-1]!

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401874:	2200      	movs	r2, #0
  401876:	4b07      	ldr	r3, [pc, #28]	; (401894 <sd_mmc_spi_send_clock+0x2c>)
  401878:	701a      	strb	r2, [r3, #0]
  40187a:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
  40187c:	4f06      	ldr	r7, [pc, #24]	; (401898 <sd_mmc_spi_send_clock+0x30>)
  40187e:	4e07      	ldr	r6, [pc, #28]	; (40189c <sd_mmc_spi_send_clock+0x34>)
  401880:	2201      	movs	r2, #1
  401882:	4629      	mov	r1, r5
  401884:	4638      	mov	r0, r7
  401886:	47b0      	blx	r6
  401888:	1e63      	subs	r3, r4, #1
	for (i = 0; i < 10; i++) {
  40188a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40188e:	d1f7      	bne.n	401880 <sd_mmc_spi_send_clock+0x18>
	}
}
  401890:	b003      	add	sp, #12
  401892:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401894:	20001074 	.word	0x20001074
  401898:	40008000 	.word	0x40008000
  40189c:	00401cc9 	.word	0x00401cc9

004018a0 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018a4:	b085      	sub	sp, #20
  4018a6:	4604      	mov	r4, r0
  4018a8:	4691      	mov	r9, r2
  4018aa:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
  4018ac:	23ff      	movs	r3, #255	; 0xff
  4018ae:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4018b2:	2300      	movs	r3, #0
  4018b4:	4a53      	ldr	r2, [pc, #332]	; (401a04 <sd_mmc_spi_adtc_start+0x164>)
  4018b6:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
  4018b8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  4018bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4018c0:	f88d 2008 	strb.w	r2, [sp, #8]
	cmd_token[1] = arg >> 24;
  4018c4:	0e0a      	lsrs	r2, r1, #24
  4018c6:	f88d 2009 	strb.w	r2, [sp, #9]
	cmd_token[2] = arg >> 16;
  4018ca:	0c0a      	lsrs	r2, r1, #16
  4018cc:	f88d 200a 	strb.w	r2, [sp, #10]
	cmd_token[3] = arg >> 8;
  4018d0:	0a0a      	lsrs	r2, r1, #8
  4018d2:	f88d 200b 	strb.w	r2, [sp, #11]
	cmd_token[4] = arg;
  4018d6:	f88d 100c 	strb.w	r1, [sp, #12]
  4018da:	af02      	add	r7, sp, #8
		value = *buf++;
  4018dc:	f04f 0c08 	mov.w	ip, #8
	while (size--) {
  4018e0:	f10d 0e0d 	add.w	lr, sp, #13
  4018e4:	e001      	b.n	4018ea <sd_mmc_spi_adtc_start+0x4a>
  4018e6:	4577      	cmp	r7, lr
  4018e8:	d012      	beq.n	401910 <sd_mmc_spi_adtc_start+0x70>
		value = *buf++;
  4018ea:	f817 1b01 	ldrb.w	r1, [r7], #1
  4018ee:	4662      	mov	r2, ip
			crc <<= 1;
  4018f0:	005b      	lsls	r3, r3, #1
  4018f2:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
  4018f4:	ea83 0001 	eor.w	r0, r3, r1
  4018f8:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc ^= 0x09;
  4018fc:	bf18      	it	ne
  4018fe:	f083 0309 	eorne.w	r3, r3, #9
			value <<= 1;
  401902:	0049      	lsls	r1, r1, #1
  401904:	b2c9      	uxtb	r1, r1
  401906:	3a01      	subs	r2, #1
		for (i = 0; i < 8; i++) {
  401908:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40190c:	d1f0      	bne.n	4018f0 <sd_mmc_spi_adtc_start+0x50>
  40190e:	e7ea      	b.n	4018e6 <sd_mmc_spi_adtc_start+0x46>
	crc = (crc << 1) | 1;
  401910:	005b      	lsls	r3, r3, #1
  401912:	f043 0301 	orr.w	r3, r3, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
  401916:	f88d 300d 	strb.w	r3, [sp, #13]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  40191a:	4f3b      	ldr	r7, [pc, #236]	; (401a08 <sd_mmc_spi_adtc_start+0x168>)
  40191c:	2201      	movs	r2, #1
  40191e:	f10d 010f 	add.w	r1, sp, #15
  401922:	4638      	mov	r0, r7
  401924:	4d39      	ldr	r5, [pc, #228]	; (401a0c <sd_mmc_spi_adtc_start+0x16c>)
  401926:	47a8      	blx	r5
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
  401928:	2206      	movs	r2, #6
  40192a:	a902      	add	r1, sp, #8
  40192c:	4638      	mov	r0, r7
  40192e:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
  401930:	a904      	add	r1, sp, #16
  401932:	23ff      	movs	r3, #255	; 0xff
  401934:	f801 3d09 	strb.w	r3, [r1, #-9]!
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
  401938:	2201      	movs	r2, #1
  40193a:	4638      	mov	r0, r7
  40193c:	4b34      	ldr	r3, [pc, #208]	; (401a10 <sd_mmc_spi_adtc_start+0x170>)
  40193e:	4798      	blx	r3
  401940:	2707      	movs	r7, #7
	ncr_timeout = 7;
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
  401942:	4e31      	ldr	r6, [pc, #196]	; (401a08 <sd_mmc_spi_adtc_start+0x168>)
  401944:	4d32      	ldr	r5, [pc, #200]	; (401a10 <sd_mmc_spi_adtc_start+0x170>)
  401946:	2201      	movs	r2, #1
  401948:	f10d 0107 	add.w	r1, sp, #7
  40194c:	4630      	mov	r0, r6
  40194e:	47a8      	blx	r5
		if ((r1 & R1_SPI_ERROR) == 0) {
  401950:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401954:	f013 0f80 	tst.w	r3, #128	; 0x80
  401958:	d00b      	beq.n	401972 <sd_mmc_spi_adtc_start+0xd2>
  40195a:	1e7b      	subs	r3, r7, #1
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
  40195c:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  401960:	d1f1      	bne.n	401946 <sd_mmc_spi_adtc_start+0xa6>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
  401962:	2202      	movs	r2, #2
  401964:	4b27      	ldr	r3, [pc, #156]	; (401a04 <sd_mmc_spi_adtc_start+0x164>)
  401966:	701a      	strb	r2, [r3, #0]
			return false;
  401968:	2300      	movs	r3, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
  40196a:	4618      	mov	r0, r3
  40196c:	b005      	add	sp, #20
  40196e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_spi_response_32 = r1;
  401972:	4a28      	ldr	r2, [pc, #160]	; (401a14 <sd_mmc_spi_adtc_start+0x174>)
  401974:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
  401976:	f013 0f08 	tst.w	r3, #8
  40197a:	d119      	bne.n	4019b0 <sd_mmc_spi_adtc_start+0x110>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
  40197c:	f013 0f04 	tst.w	r3, #4
  401980:	d11b      	bne.n	4019ba <sd_mmc_spi_adtc_start+0x11a>
	if (r1 & ~R1_SPI_IDLE) {
  401982:	f033 0301 	bics.w	r3, r3, #1
  401986:	d11d      	bne.n	4019c4 <sd_mmc_spi_adtc_start+0x124>
	if (cmd & SDMMC_RESP_BUSY) {
  401988:	f414 5f00 	tst.w	r4, #8192	; 0x2000
  40198c:	d11f      	bne.n	4019ce <sd_mmc_spi_adtc_start+0x12e>
	if (cmd & SDMMC_RESP_8) {
  40198e:	f414 7f00 	tst.w	r4, #512	; 0x200
  401992:	d125      	bne.n	4019e0 <sd_mmc_spi_adtc_start+0x140>
	if (cmd & SDMMC_RESP_32) {
  401994:	f414 6f80 	tst.w	r4, #1024	; 0x400
  401998:	d12a      	bne.n	4019f0 <sd_mmc_spi_adtc_start+0x150>
	sd_mmc_spi_block_size = block_size;
  40199a:	4b1f      	ldr	r3, [pc, #124]	; (401a18 <sd_mmc_spi_adtc_start+0x178>)
  40199c:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_spi_nb_block = nb_block;
  4019a0:	4b1e      	ldr	r3, [pc, #120]	; (401a1c <sd_mmc_spi_adtc_start+0x17c>)
  4019a2:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_spi_transfert_pos = 0;
  4019a6:	2200      	movs	r2, #0
  4019a8:	4b1d      	ldr	r3, [pc, #116]	; (401a20 <sd_mmc_spi_adtc_start+0x180>)
  4019aa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
  4019ac:	2301      	movs	r3, #1
  4019ae:	e7dc      	b.n	40196a <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
  4019b0:	2206      	movs	r2, #6
  4019b2:	4b14      	ldr	r3, [pc, #80]	; (401a04 <sd_mmc_spi_adtc_start+0x164>)
  4019b4:	701a      	strb	r2, [r3, #0]
		return false;
  4019b6:	2300      	movs	r3, #0
  4019b8:	e7d7      	b.n	40196a <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
  4019ba:	2209      	movs	r2, #9
  4019bc:	4b11      	ldr	r3, [pc, #68]	; (401a04 <sd_mmc_spi_adtc_start+0x164>)
  4019be:	701a      	strb	r2, [r3, #0]
		return false;
  4019c0:	2300      	movs	r3, #0
  4019c2:	e7d2      	b.n	40196a <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  4019c4:	2201      	movs	r2, #1
  4019c6:	4b0f      	ldr	r3, [pc, #60]	; (401a04 <sd_mmc_spi_adtc_start+0x164>)
  4019c8:	701a      	strb	r2, [r3, #0]
		return false;
  4019ca:	2300      	movs	r3, #0
  4019cc:	e7cd      	b.n	40196a <sd_mmc_spi_adtc_start+0xca>
		if (!sd_mmc_spi_wait_busy()) {
  4019ce:	4b15      	ldr	r3, [pc, #84]	; (401a24 <sd_mmc_spi_adtc_start+0x184>)
  4019d0:	4798      	blx	r3
  4019d2:	4603      	mov	r3, r0
  4019d4:	2800      	cmp	r0, #0
  4019d6:	d1da      	bne.n	40198e <sd_mmc_spi_adtc_start+0xee>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
  4019d8:	2103      	movs	r1, #3
  4019da:	4a0a      	ldr	r2, [pc, #40]	; (401a04 <sd_mmc_spi_adtc_start+0x164>)
  4019dc:	7011      	strb	r1, [r2, #0]
			return false;
  4019de:	e7c4      	b.n	40196a <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_response_32 = 0;
  4019e0:	490c      	ldr	r1, [pc, #48]	; (401a14 <sd_mmc_spi_adtc_start+0x174>)
  4019e2:	2300      	movs	r3, #0
  4019e4:	600b      	str	r3, [r1, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
  4019e6:	2201      	movs	r2, #1
  4019e8:	4807      	ldr	r0, [pc, #28]	; (401a08 <sd_mmc_spi_adtc_start+0x168>)
  4019ea:	4b09      	ldr	r3, [pc, #36]	; (401a10 <sd_mmc_spi_adtc_start+0x170>)
  4019ec:	4798      	blx	r3
  4019ee:	e7d1      	b.n	401994 <sd_mmc_spi_adtc_start+0xf4>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
  4019f0:	4c08      	ldr	r4, [pc, #32]	; (401a14 <sd_mmc_spi_adtc_start+0x174>)
  4019f2:	2204      	movs	r2, #4
  4019f4:	4621      	mov	r1, r4
  4019f6:	4804      	ldr	r0, [pc, #16]	; (401a08 <sd_mmc_spi_adtc_start+0x168>)
  4019f8:	4b05      	ldr	r3, [pc, #20]	; (401a10 <sd_mmc_spi_adtc_start+0x170>)
  4019fa:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
  4019fc:	6823      	ldr	r3, [r4, #0]
  4019fe:	ba1b      	rev	r3, r3
  401a00:	6023      	str	r3, [r4, #0]
  401a02:	e7ca      	b.n	40199a <sd_mmc_spi_adtc_start+0xfa>
  401a04:	20001074 	.word	0x20001074
  401a08:	40008000 	.word	0x40008000
  401a0c:	00401cc9 	.word	0x00401cc9
  401a10:	00401cfd 	.word	0x00401cfd
  401a14:	20001078 	.word	0x20001078
  401a18:	20001072 	.word	0x20001072
  401a1c:	20001076 	.word	0x20001076
  401a20:	2000107c 	.word	0x2000107c
  401a24:	00401719 	.word	0x00401719

00401a28 <sd_mmc_spi_send_cmd>:
{
  401a28:	b510      	push	{r4, lr}
  401a2a:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
  401a2c:	2200      	movs	r2, #0
  401a2e:	9200      	str	r2, [sp, #0]
  401a30:	4613      	mov	r3, r2
  401a32:	4c02      	ldr	r4, [pc, #8]	; (401a3c <sd_mmc_spi_send_cmd+0x14>)
  401a34:	47a0      	blx	r4
}
  401a36:	b002      	add	sp, #8
  401a38:	bd10      	pop	{r4, pc}
  401a3a:	bf00      	nop
  401a3c:	004018a1 	.word	0x004018a1

00401a40 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
}
  401a40:	4b01      	ldr	r3, [pc, #4]	; (401a48 <sd_mmc_spi_get_response+0x8>)
  401a42:	6818      	ldr	r0, [r3, #0]
  401a44:	4770      	bx	lr
  401a46:	bf00      	nop
  401a48:	20001078 	.word	0x20001078

00401a4c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
  401a4c:	b510      	push	{r4, lr}
  401a4e:	b082      	sub	sp, #8
  401a50:	4604      	mov	r4, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401a52:	2200      	movs	r2, #0
  401a54:	4b14      	ldr	r3, [pc, #80]	; (401aa8 <sd_mmc_spi_read_word+0x5c>)
  401a56:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  401a58:	4b14      	ldr	r3, [pc, #80]	; (401aac <sd_mmc_spi_read_word+0x60>)
  401a5a:	881a      	ldrh	r2, [r3, #0]
  401a5c:	4b14      	ldr	r3, [pc, #80]	; (401ab0 <sd_mmc_spi_read_word+0x64>)
  401a5e:	6819      	ldr	r1, [r3, #0]
  401a60:	fbb1 f3f2 	udiv	r3, r1, r2
  401a64:	fb02 1313 	mls	r3, r2, r3, r1
  401a68:	b91b      	cbnz	r3, 401a72 <sd_mmc_spi_read_word+0x26>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
  401a6a:	4b12      	ldr	r3, [pc, #72]	; (401ab4 <sd_mmc_spi_read_word+0x68>)
  401a6c:	4798      	blx	r3
  401a6e:	4603      	mov	r3, r0
  401a70:	b180      	cbz	r0, 401a94 <sd_mmc_spi_read_word+0x48>
			return false;
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
  401a72:	2204      	movs	r2, #4
  401a74:	4621      	mov	r1, r4
  401a76:	4810      	ldr	r0, [pc, #64]	; (401ab8 <sd_mmc_spi_read_word+0x6c>)
  401a78:	4b10      	ldr	r3, [pc, #64]	; (401abc <sd_mmc_spi_read_word+0x70>)
  401a7a:	4798      	blx	r3
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
  401a7c:	4a0c      	ldr	r2, [pc, #48]	; (401ab0 <sd_mmc_spi_read_word+0x64>)
  401a7e:	6813      	ldr	r3, [r2, #0]
  401a80:	3304      	adds	r3, #4
  401a82:	6013      	str	r3, [r2, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  401a84:	4a09      	ldr	r2, [pc, #36]	; (401aac <sd_mmc_spi_read_word+0x60>)
  401a86:	8811      	ldrh	r1, [r2, #0]
  401a88:	fbb3 f2f1 	udiv	r2, r3, r1
  401a8c:	fb01 3312 	mls	r3, r1, r2, r3
  401a90:	b11b      	cbz	r3, 401a9a <sd_mmc_spi_read_word+0x4e>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
  401a92:	2301      	movs	r3, #1
}
  401a94:	4618      	mov	r0, r3
  401a96:	b002      	add	sp, #8
  401a98:	bd10      	pop	{r4, pc}
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  401a9a:	2202      	movs	r2, #2
  401a9c:	a901      	add	r1, sp, #4
  401a9e:	4806      	ldr	r0, [pc, #24]	; (401ab8 <sd_mmc_spi_read_word+0x6c>)
  401aa0:	4b06      	ldr	r3, [pc, #24]	; (401abc <sd_mmc_spi_read_word+0x70>)
  401aa2:	4798      	blx	r3
	return true;
  401aa4:	2301      	movs	r3, #1
  401aa6:	e7f5      	b.n	401a94 <sd_mmc_spi_read_word+0x48>
  401aa8:	20001074 	.word	0x20001074
  401aac:	20001072 	.word	0x20001072
  401ab0:	2000107c 	.word	0x2000107c
  401ab4:	00401771 	.word	0x00401771
  401ab8:	40008000 	.word	0x40008000
  401abc:	00401cfd 	.word	0x00401cfd

00401ac0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
  401ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ac4:	b083      	sub	sp, #12
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401ac6:	2200      	movs	r2, #0
  401ac8:	4b16      	ldr	r3, [pc, #88]	; (401b24 <sd_mmc_spi_start_read_blocks+0x64>)
  401aca:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
  401acc:	b339      	cbz	r1, 401b1e <sd_mmc_spi_start_read_blocks+0x5e>
  401ace:	1e4c      	subs	r4, r1, #1
  401ad0:	b2a4      	uxth	r4, r4
  401ad2:	4681      	mov	r9, r0
  401ad4:	4615      	mov	r5, r2
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  401ad6:	f8df b05c 	ldr.w	fp, [pc, #92]	; 401b34 <sd_mmc_spi_start_read_blocks+0x74>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  401ada:	f8df 805c 	ldr.w	r8, [pc, #92]	; 401b38 <sd_mmc_spi_start_read_blocks+0x78>
  401ade:	4f12      	ldr	r7, [pc, #72]	; (401b28 <sd_mmc_spi_start_read_blocks+0x68>)
		if (!sd_mmc_spi_start_read_block()) {
  401ae0:	47d8      	blx	fp
  401ae2:	4682      	mov	sl, r0
  401ae4:	b1b8      	cbz	r0, 401b16 <sd_mmc_spi_start_read_blocks+0x56>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  401ae6:	f8b8 2000 	ldrh.w	r2, [r8]
  401aea:	eb09 0105 	add.w	r1, r9, r5
  401aee:	4638      	mov	r0, r7
  401af0:	4e0e      	ldr	r6, [pc, #56]	; (401b2c <sd_mmc_spi_start_read_blocks+0x6c>)
  401af2:	47b0      	blx	r6
		pos += sd_mmc_spi_block_size;
  401af4:	f8b8 1000 	ldrh.w	r1, [r8]
  401af8:	440d      	add	r5, r1
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  401afa:	4a0d      	ldr	r2, [pc, #52]	; (401b30 <sd_mmc_spi_start_read_blocks+0x70>)
  401afc:	6813      	ldr	r3, [r2, #0]
  401afe:	440b      	add	r3, r1
  401b00:	6013      	str	r3, [r2, #0]
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  401b02:	2202      	movs	r2, #2
  401b04:	a901      	add	r1, sp, #4
  401b06:	4638      	mov	r0, r7
  401b08:	47b0      	blx	r6
	while (nb_block--) {
  401b0a:	3c01      	subs	r4, #1
  401b0c:	b2a4      	uxth	r4, r4
  401b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b12:	429c      	cmp	r4, r3
  401b14:	d1e4      	bne.n	401ae0 <sd_mmc_spi_start_read_blocks+0x20>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
  401b16:	4650      	mov	r0, sl
  401b18:	b003      	add	sp, #12
  401b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
  401b1e:	f04f 0a01 	mov.w	sl, #1
  401b22:	e7f8      	b.n	401b16 <sd_mmc_spi_start_read_blocks+0x56>
  401b24:	20001074 	.word	0x20001074
  401b28:	40008000 	.word	0x40008000
  401b2c:	00401cfd 	.word	0x00401cfd
  401b30:	2000107c 	.word	0x2000107c
  401b34:	00401771 	.word	0x00401771
  401b38:	20001072 	.word	0x20001072

00401b3c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
  401b3c:	2001      	movs	r0, #1
  401b3e:	4770      	bx	lr

00401b40 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401b40:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401b42:	480e      	ldr	r0, [pc, #56]	; (401b7c <sysclk_init+0x3c>)
  401b44:	4b0e      	ldr	r3, [pc, #56]	; (401b80 <sysclk_init+0x40>)
  401b46:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401b48:	213e      	movs	r1, #62	; 0x3e
  401b4a:	2000      	movs	r0, #0
  401b4c:	4b0d      	ldr	r3, [pc, #52]	; (401b84 <sysclk_init+0x44>)
  401b4e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401b50:	4c0d      	ldr	r4, [pc, #52]	; (401b88 <sysclk_init+0x48>)
  401b52:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401b54:	2800      	cmp	r0, #0
  401b56:	d0fc      	beq.n	401b52 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401b58:	4b0c      	ldr	r3, [pc, #48]	; (401b8c <sysclk_init+0x4c>)
  401b5a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401b5c:	4a0c      	ldr	r2, [pc, #48]	; (401b90 <sysclk_init+0x50>)
  401b5e:	4b0d      	ldr	r3, [pc, #52]	; (401b94 <sysclk_init+0x54>)
  401b60:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  401b62:	4c0d      	ldr	r4, [pc, #52]	; (401b98 <sysclk_init+0x58>)
  401b64:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401b66:	2800      	cmp	r0, #0
  401b68:	d0fc      	beq.n	401b64 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401b6a:	2010      	movs	r0, #16
  401b6c:	4b0b      	ldr	r3, [pc, #44]	; (401b9c <sysclk_init+0x5c>)
  401b6e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401b70:	4b0b      	ldr	r3, [pc, #44]	; (401ba0 <sysclk_init+0x60>)
  401b72:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401b74:	4801      	ldr	r0, [pc, #4]	; (401b7c <sysclk_init+0x3c>)
  401b76:	4b02      	ldr	r3, [pc, #8]	; (401b80 <sysclk_init+0x40>)
  401b78:	4798      	blx	r3
  401b7a:	bd10      	pop	{r4, pc}
  401b7c:	07270e00 	.word	0x07270e00
  401b80:	00402e35 	.word	0x00402e35
  401b84:	004024e1 	.word	0x004024e1
  401b88:	00402535 	.word	0x00402535
  401b8c:	00402545 	.word	0x00402545
  401b90:	20133f01 	.word	0x20133f01
  401b94:	400e0400 	.word	0x400e0400
  401b98:	00402555 	.word	0x00402555
  401b9c:	00402439 	.word	0x00402439
  401ba0:	00402d25 	.word	0x00402d25

00401ba4 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  401ba4:	b510      	push	{r4, lr}
  401ba6:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  401ba8:	4b10      	ldr	r3, [pc, #64]	; (401bec <spi_master_init+0x48>)
  401baa:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  401bac:	2380      	movs	r3, #128	; 0x80
  401bae:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401bb0:	6863      	ldr	r3, [r4, #4]
  401bb2:	f043 0301 	orr.w	r3, r3, #1
  401bb6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401bb8:	6863      	ldr	r3, [r4, #4]
  401bba:	f043 0310 	orr.w	r3, r3, #16
  401bbe:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  401bc0:	6863      	ldr	r3, [r4, #4]
  401bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401bc6:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  401bc8:	2100      	movs	r1, #0
  401bca:	4620      	mov	r0, r4
  401bcc:	4b08      	ldr	r3, [pc, #32]	; (401bf0 <spi_master_init+0x4c>)
  401bce:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401bd0:	6863      	ldr	r3, [r4, #4]
  401bd2:	f023 0302 	bic.w	r3, r3, #2
  401bd6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  401bd8:	6863      	ldr	r3, [r4, #4]
  401bda:	f023 0304 	bic.w	r3, r3, #4
  401bde:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  401be0:	2100      	movs	r1, #0
  401be2:	4620      	mov	r0, r4
  401be4:	4b03      	ldr	r3, [pc, #12]	; (401bf4 <spi_master_init+0x50>)
  401be6:	4798      	blx	r3
  401be8:	bd10      	pop	{r4, pc}
  401bea:	bf00      	nop
  401bec:	004027e9 	.word	0x004027e9
  401bf0:	004027f9 	.word	0x004027f9
  401bf4:	0040280f 	.word	0x0040280f

00401bf8 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  401bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bfc:	4604      	mov	r4, r0
  401bfe:	460d      	mov	r5, r1
  401c00:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  401c02:	4915      	ldr	r1, [pc, #84]	; (401c58 <spi_master_setup_device+0x60>)
  401c04:	4618      	mov	r0, r3
  401c06:	4b15      	ldr	r3, [pc, #84]	; (401c5c <spi_master_setup_device+0x64>)
  401c08:	4798      	blx	r3
  401c0a:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  401c0c:	2300      	movs	r3, #0
  401c0e:	461a      	mov	r2, r3
  401c10:	6829      	ldr	r1, [r5, #0]
  401c12:	4620      	mov	r0, r4
  401c14:	f8df 805c 	ldr.w	r8, [pc, #92]	; 401c74 <spi_master_setup_device+0x7c>
  401c18:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  401c1a:	2208      	movs	r2, #8
  401c1c:	6829      	ldr	r1, [r5, #0]
  401c1e:	4620      	mov	r0, r4
  401c20:	4b0f      	ldr	r3, [pc, #60]	; (401c60 <spi_master_setup_device+0x68>)
  401c22:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  401c24:	b2fa      	uxtb	r2, r7
  401c26:	6829      	ldr	r1, [r5, #0]
  401c28:	4620      	mov	r0, r4
  401c2a:	4b0e      	ldr	r3, [pc, #56]	; (401c64 <spi_master_setup_device+0x6c>)
  401c2c:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  401c2e:	2208      	movs	r2, #8
  401c30:	6829      	ldr	r1, [r5, #0]
  401c32:	4620      	mov	r0, r4
  401c34:	4b0c      	ldr	r3, [pc, #48]	; (401c68 <spi_master_setup_device+0x70>)
  401c36:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  401c38:	0872      	lsrs	r2, r6, #1
  401c3a:	6829      	ldr	r1, [r5, #0]
  401c3c:	4620      	mov	r0, r4
  401c3e:	4b0b      	ldr	r3, [pc, #44]	; (401c6c <spi_master_setup_device+0x74>)
  401c40:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  401c42:	f086 0201 	eor.w	r2, r6, #1
  401c46:	f002 0201 	and.w	r2, r2, #1
  401c4a:	6829      	ldr	r1, [r5, #0]
  401c4c:	4620      	mov	r0, r4
  401c4e:	4b08      	ldr	r3, [pc, #32]	; (401c70 <spi_master_setup_device+0x78>)
  401c50:	4798      	blx	r3
  401c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c56:	bf00      	nop
  401c58:	07270e00 	.word	0x07270e00
  401c5c:	004028b7 	.word	0x004028b7
  401c60:	004028a3 	.word	0x004028a3
  401c64:	004028cd 	.word	0x004028cd
  401c68:	0040285d 	.word	0x0040285d
  401c6c:	00402821 	.word	0x00402821
  401c70:	0040283f 	.word	0x0040283f
  401c74:	004028f3 	.word	0x004028f3

00401c78 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  401c78:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  401c7a:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  401c7c:	f013 0f04 	tst.w	r3, #4
  401c80:	d006      	beq.n	401c90 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  401c82:	6809      	ldr	r1, [r1, #0]
  401c84:	290f      	cmp	r1, #15
  401c86:	d900      	bls.n	401c8a <spi_select_device+0x12>
  401c88:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  401c8a:	4b06      	ldr	r3, [pc, #24]	; (401ca4 <spi_select_device+0x2c>)
  401c8c:	4798      	blx	r3
  401c8e:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  401c90:	6809      	ldr	r1, [r1, #0]
  401c92:	2903      	cmp	r1, #3
  401c94:	d8f8      	bhi.n	401c88 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  401c96:	2301      	movs	r3, #1
  401c98:	fa03 f101 	lsl.w	r1, r3, r1
  401c9c:	43c9      	mvns	r1, r1
  401c9e:	4b01      	ldr	r3, [pc, #4]	; (401ca4 <spi_select_device+0x2c>)
  401ca0:	4798      	blx	r3
		}
	}
}
  401ca2:	e7f1      	b.n	401c88 <spi_select_device+0x10>
  401ca4:	004027f9 	.word	0x004027f9

00401ca8 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  401ca8:	b510      	push	{r4, lr}
  401caa:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401cac:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  401cae:	f413 7f00 	tst.w	r3, #512	; 0x200
  401cb2:	d0fb      	beq.n	401cac <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  401cb4:	210f      	movs	r1, #15
  401cb6:	4620      	mov	r0, r4
  401cb8:	4b02      	ldr	r3, [pc, #8]	; (401cc4 <spi_deselect_device+0x1c>)
  401cba:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  401cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401cc0:	6023      	str	r3, [r4, #0]
  401cc2:	bd10      	pop	{r4, pc}
  401cc4:	004027f9 	.word	0x004027f9

00401cc8 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  401cc8:	b11a      	cbz	r2, 401cd2 <spi_write_packet+0xa>
{
  401cca:	b410      	push	{r4}
  401ccc:	460c      	mov	r4, r1
  401cce:	4411      	add	r1, r2
  401cd0:	e006      	b.n	401ce0 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  401cd2:	2000      	movs	r0, #0
  401cd4:	4770      	bx	lr
		val = data[i];
  401cd6:	f814 3b01 	ldrb.w	r3, [r4], #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401cda:	60c3      	str	r3, [r0, #12]
	while (len) {
  401cdc:	42a1      	cmp	r1, r4
  401cde:	d00b      	beq.n	401cf8 <spi_write_packet+0x30>
{
  401ce0:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  401ce4:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  401ce6:	f012 0f02 	tst.w	r2, #2
  401cea:	d1f4      	bne.n	401cd6 <spi_write_packet+0xe>
			if (!timeout--) {
  401cec:	3b01      	subs	r3, #1
  401cee:	d1f9      	bne.n	401ce4 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  401cf0:	f06f 0002 	mvn.w	r0, #2
}
  401cf4:	bc10      	pop	{r4}
  401cf6:	4770      	bx	lr
	return STATUS_OK;
  401cf8:	2000      	movs	r0, #0
  401cfa:	e7fb      	b.n	401cf4 <spi_write_packet+0x2c>

00401cfc <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  401cfc:	b13a      	cbz	r2, 401d0e <spi_read_packet+0x12>
{
  401cfe:	b470      	push	{r4, r5, r6}
  401d00:	4615      	mov	r5, r2
  401d02:	460c      	mov	r4, r1
  401d04:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401d06:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  401d08:	f240 2101 	movw	r1, #513	; 0x201
  401d0c:	e012      	b.n	401d34 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  401d0e:	2000      	movs	r0, #0
  401d10:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401d12:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  401d14:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  401d18:	6902      	ldr	r2, [r0, #16]
  401d1a:	ea31 0202 	bics.w	r2, r1, r2
  401d1e:	d004      	beq.n	401d2a <spi_read_packet+0x2e>
			if (!timeout--) {
  401d20:	3b01      	subs	r3, #1
  401d22:	d1f9      	bne.n	401d18 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  401d24:	f06f 0002 	mvn.w	r0, #2
  401d28:	e00e      	b.n	401d48 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  401d2a:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  401d2c:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  401d30:	42a5      	cmp	r5, r4
  401d32:	d00b      	beq.n	401d4c <spi_read_packet+0x50>
{
  401d34:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  401d38:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  401d3a:	f012 0f02 	tst.w	r2, #2
  401d3e:	d1e8      	bne.n	401d12 <spi_read_packet+0x16>
			if (!timeout--) {
  401d40:	3b01      	subs	r3, #1
  401d42:	d1f9      	bne.n	401d38 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  401d44:	f06f 0002 	mvn.w	r0, #2
}
  401d48:	bc70      	pop	{r4, r5, r6}
  401d4a:	4770      	bx	lr
	return STATUS_OK;
  401d4c:	2000      	movs	r0, #0
  401d4e:	e7fb      	b.n	401d48 <spi_read_packet+0x4c>

00401d50 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  401d52:	4838      	ldr	r0, [pc, #224]	; (401e34 <board_init+0xe4>)
  401d54:	4b38      	ldr	r3, [pc, #224]	; (401e38 <board_init+0xe8>)
  401d56:	4798      	blx	r3
  401d58:	200b      	movs	r0, #11
  401d5a:	4c38      	ldr	r4, [pc, #224]	; (401e3c <board_init+0xec>)
  401d5c:	47a0      	blx	r4
  401d5e:	200c      	movs	r0, #12
  401d60:	47a0      	blx	r4
  401d62:	200d      	movs	r0, #13
  401d64:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d66:	4b36      	ldr	r3, [pc, #216]	; (401e40 <board_init+0xf0>)
  401d68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401d6c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d6e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401d74:	4c33      	ldr	r4, [pc, #204]	; (401e44 <board_init+0xf4>)
  401d76:	2504      	movs	r5, #4
  401d78:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d7a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  401d7e:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401d80:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d84:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d86:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d88:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d8c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401d8e:	f022 0204 	bic.w	r2, r2, #4
  401d92:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d94:	6f62      	ldr	r2, [r4, #116]	; 0x74
  401d96:	f022 0204 	bic.w	r2, r2, #4
  401d9a:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401da0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401da2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401da4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401da8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401dac:	6322      	str	r2, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401dae:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401db0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401db4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401db8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401dba:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401dbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401dc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401dc4:	210c      	movs	r1, #12
  401dc6:	4820      	ldr	r0, [pc, #128]	; (401e48 <board_init+0xf8>)
  401dc8:	4b20      	ldr	r3, [pc, #128]	; (401e4c <board_init+0xfc>)
  401dca:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401dcc:	4f20      	ldr	r7, [pc, #128]	; (401e50 <board_init+0x100>)
  401dce:	4639      	mov	r1, r7
  401dd0:	2003      	movs	r0, #3
  401dd2:	4e20      	ldr	r6, [pc, #128]	; (401e54 <board_init+0x104>)
  401dd4:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401dd6:	4639      	mov	r1, r7
  401dd8:	4628      	mov	r0, r5
  401dda:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  401ddc:	4639      	mov	r1, r7
  401dde:	200c      	movs	r0, #12
  401de0:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  401de2:	4639      	mov	r1, r7
  401de4:	200d      	movs	r0, #13
  401de6:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  401de8:	4639      	mov	r1, r7
  401dea:	200e      	movs	r0, #14
  401dec:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  401dee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401df2:	2009      	movs	r0, #9
  401df4:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  401df6:	4918      	ldr	r1, [pc, #96]	; (401e58 <board_init+0x108>)
  401df8:	200a      	movs	r0, #10
  401dfa:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  401dfc:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  401e00:	4639      	mov	r1, r7
  401e02:	2055      	movs	r0, #85	; 0x55
  401e04:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  401e06:	4639      	mov	r1, r7
  401e08:	205f      	movs	r0, #95	; 0x5f
  401e0a:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  401e0c:	4913      	ldr	r1, [pc, #76]	; (401e5c <board_init+0x10c>)
  401e0e:	204c      	movs	r0, #76	; 0x4c
  401e10:	47b0      	blx	r6
		base->PIO_PUER = mask;
  401e12:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401e14:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e18:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e1a:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e1c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401e20:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401e22:	f023 0304 	bic.w	r3, r3, #4
  401e26:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e28:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401e2a:	f023 0304 	bic.w	r3, r3, #4
  401e2e:	6763      	str	r3, [r4, #116]	; 0x74
  401e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e32:	bf00      	nop
  401e34:	400e1450 	.word	0x400e1450
  401e38:	00402c6d 	.word	0x00402c6d
  401e3c:	00402565 	.word	0x00402565
  401e40:	400e1200 	.word	0x400e1200
  401e44:	400e0e00 	.word	0x400e0e00
  401e48:	400e1000 	.word	0x400e1000
  401e4c:	004021cd 	.word	0x004021cd
  401e50:	08000001 	.word	0x08000001
  401e54:	004020ad 	.word	0x004020ad
  401e58:	10000001 	.word	0x10000001
  401e5c:	28000001 	.word	0x28000001

00401e60 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  401e60:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  401e62:	2401      	movs	r4, #1
  401e64:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  401e66:	2400      	movs	r4, #0
  401e68:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  401e6a:	f240 2502 	movw	r5, #514	; 0x202
  401e6e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  401e72:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  401e76:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  401e7a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  401e7c:	0052      	lsls	r2, r2, #1
  401e7e:	fbb1 f2f2 	udiv	r2, r1, r2
  401e82:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  401e84:	0212      	lsls	r2, r2, #8
  401e86:	b292      	uxth	r2, r2
  401e88:	432b      	orrs	r3, r5
  401e8a:	431a      	orrs	r2, r3
  401e8c:	6042      	str	r2, [r0, #4]
	return 0;
}
  401e8e:	4620      	mov	r0, r4
  401e90:	bc30      	pop	{r4, r5}
  401e92:	4770      	bx	lr

00401e94 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  401e94:	6843      	ldr	r3, [r0, #4]
  401e96:	01d2      	lsls	r2, r2, #7
  401e98:	b2d2      	uxtb	r2, r2
  401e9a:	4319      	orrs	r1, r3
  401e9c:	430a      	orrs	r2, r1
  401e9e:	6042      	str	r2, [r0, #4]
  401ea0:	4770      	bx	lr

00401ea2 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  401ea2:	2302      	movs	r3, #2
  401ea4:	6003      	str	r3, [r0, #0]
  401ea6:	4770      	bx	lr

00401ea8 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  401ea8:	2301      	movs	r3, #1
  401eaa:	fa03 f101 	lsl.w	r1, r3, r1
  401eae:	6101      	str	r1, [r0, #16]
  401eb0:	4770      	bx	lr

00401eb2 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  401eb2:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  401eb4:	bf9a      	itte	ls
  401eb6:	3050      	addls	r0, #80	; 0x50
  401eb8:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
	uint32_t ul_data = 0;
  401ebc:	2000      	movhi	r0, #0
	}

	return ul_data;
}
  401ebe:	4770      	bx	lr

00401ec0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401ec0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401ec4:	0053      	lsls	r3, r2, #1
  401ec6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401eca:	fbb2 f2f3 	udiv	r2, r2, r3
  401ece:	3a01      	subs	r2, #1
  401ed0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  401ed4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  401ed8:	4770      	bx	lr

00401eda <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401eda:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401edc:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401ee0:	d039      	beq.n	401f56 <pio_set_peripheral+0x7c>
  401ee2:	d813      	bhi.n	401f0c <pio_set_peripheral+0x32>
  401ee4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401ee8:	d025      	beq.n	401f36 <pio_set_peripheral+0x5c>
  401eea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401eee:	d10a      	bne.n	401f06 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ef0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401ef2:	4313      	orrs	r3, r2
  401ef4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ef6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401ef8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401efa:	400b      	ands	r3, r1
  401efc:	ea23 0302 	bic.w	r3, r3, r2
  401f00:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401f02:	6042      	str	r2, [r0, #4]
  401f04:	4770      	bx	lr
	switch (ul_type) {
  401f06:	2900      	cmp	r1, #0
  401f08:	d1fb      	bne.n	401f02 <pio_set_peripheral+0x28>
  401f0a:	4770      	bx	lr
  401f0c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401f10:	d020      	beq.n	401f54 <pio_set_peripheral+0x7a>
  401f12:	d809      	bhi.n	401f28 <pio_set_peripheral+0x4e>
  401f14:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401f18:	d1f3      	bne.n	401f02 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f1a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401f1c:	4313      	orrs	r3, r2
  401f1e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401f20:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401f22:	4313      	orrs	r3, r2
  401f24:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401f26:	e7ec      	b.n	401f02 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401f28:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401f2c:	d012      	beq.n	401f54 <pio_set_peripheral+0x7a>
  401f2e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401f32:	d00f      	beq.n	401f54 <pio_set_peripheral+0x7a>
  401f34:	e7e5      	b.n	401f02 <pio_set_peripheral+0x28>
{
  401f36:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f38:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f3a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401f3c:	43d3      	mvns	r3, r2
  401f3e:	4021      	ands	r1, r4
  401f40:	461c      	mov	r4, r3
  401f42:	4019      	ands	r1, r3
  401f44:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401f46:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401f48:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401f4a:	400b      	ands	r3, r1
  401f4c:	4023      	ands	r3, r4
  401f4e:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401f50:	6042      	str	r2, [r0, #4]
}
  401f52:	bc10      	pop	{r4}
  401f54:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f56:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f58:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401f5a:	400b      	ands	r3, r1
  401f5c:	ea23 0302 	bic.w	r3, r3, r2
  401f60:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401f62:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401f64:	4313      	orrs	r3, r2
  401f66:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401f68:	e7cb      	b.n	401f02 <pio_set_peripheral+0x28>

00401f6a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401f6a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401f6c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401f70:	bf14      	ite	ne
  401f72:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401f74:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401f76:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401f7a:	bf14      	ite	ne
  401f7c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  401f7e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  401f80:	f012 0f02 	tst.w	r2, #2
  401f84:	d107      	bne.n	401f96 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401f86:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401f8a:	bf18      	it	ne
  401f8c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  401f90:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401f92:	6001      	str	r1, [r0, #0]
  401f94:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  401f96:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401f9a:	e7f9      	b.n	401f90 <pio_set_input+0x26>

00401f9c <pio_set_output>:
{
  401f9c:	b410      	push	{r4}
  401f9e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401fa0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401fa2:	b944      	cbnz	r4, 401fb6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  401fa4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401fa6:	b143      	cbz	r3, 401fba <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  401fa8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401faa:	b942      	cbnz	r2, 401fbe <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  401fac:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401fae:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401fb0:	6001      	str	r1, [r0, #0]
}
  401fb2:	bc10      	pop	{r4}
  401fb4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401fb6:	6641      	str	r1, [r0, #100]	; 0x64
  401fb8:	e7f5      	b.n	401fa6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401fba:	6541      	str	r1, [r0, #84]	; 0x54
  401fbc:	e7f5      	b.n	401faa <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401fbe:	6301      	str	r1, [r0, #48]	; 0x30
  401fc0:	e7f5      	b.n	401fae <pio_set_output+0x12>
	...

00401fc4 <pio_configure>:
{
  401fc4:	b570      	push	{r4, r5, r6, lr}
  401fc6:	b082      	sub	sp, #8
  401fc8:	4605      	mov	r5, r0
  401fca:	4616      	mov	r6, r2
  401fcc:	461c      	mov	r4, r3
	switch (ul_type) {
  401fce:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401fd2:	d014      	beq.n	401ffe <pio_configure+0x3a>
  401fd4:	d90a      	bls.n	401fec <pio_configure+0x28>
  401fd6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401fda:	d022      	beq.n	402022 <pio_configure+0x5e>
  401fdc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401fe0:	d01f      	beq.n	402022 <pio_configure+0x5e>
  401fe2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401fe6:	d016      	beq.n	402016 <pio_configure+0x52>
		return 0;
  401fe8:	2000      	movs	r0, #0
  401fea:	e012      	b.n	402012 <pio_configure+0x4e>
	switch (ul_type) {
  401fec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401ff0:	d005      	beq.n	401ffe <pio_configure+0x3a>
  401ff2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401ff6:	d002      	beq.n	401ffe <pio_configure+0x3a>
  401ff8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401ffc:	d1f4      	bne.n	401fe8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401ffe:	4632      	mov	r2, r6
  402000:	4628      	mov	r0, r5
  402002:	4b10      	ldr	r3, [pc, #64]	; (402044 <pio_configure+0x80>)
  402004:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402006:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40200a:	bf14      	ite	ne
  40200c:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40200e:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402010:	2001      	movs	r0, #1
}
  402012:	b002      	add	sp, #8
  402014:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402016:	461a      	mov	r2, r3
  402018:	4631      	mov	r1, r6
  40201a:	4b0b      	ldr	r3, [pc, #44]	; (402048 <pio_configure+0x84>)
  40201c:	4798      	blx	r3
	return 1;
  40201e:	2001      	movs	r0, #1
		break;
  402020:	e7f7      	b.n	402012 <pio_configure+0x4e>
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402022:	f004 0301 	and.w	r3, r4, #1
  402026:	9300      	str	r3, [sp, #0]
  402028:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40202c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402030:	bf14      	ite	ne
  402032:	2200      	movne	r2, #0
  402034:	2201      	moveq	r2, #1
  402036:	4631      	mov	r1, r6
  402038:	4628      	mov	r0, r5
  40203a:	4c04      	ldr	r4, [pc, #16]	; (40204c <pio_configure+0x88>)
  40203c:	47a0      	blx	r4
	return 1;
  40203e:	2001      	movs	r0, #1
		break;
  402040:	e7e7      	b.n	402012 <pio_configure+0x4e>
  402042:	bf00      	nop
  402044:	00401edb 	.word	0x00401edb
  402048:	00401f6b 	.word	0x00401f6b
  40204c:	00401f9d 	.word	0x00401f9d

00402050 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  402050:	f012 0f10 	tst.w	r2, #16
  402054:	d010      	beq.n	402078 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  402056:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40205a:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  40205e:	bf14      	ite	ne
  402060:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  402064:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  402068:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  40206c:	bf14      	ite	ne
  40206e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  402072:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  402076:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  402078:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40207c:	4770      	bx	lr

0040207e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40207e:	6401      	str	r1, [r0, #64]	; 0x40
  402080:	4770      	bx	lr

00402082 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  402082:	6441      	str	r1, [r0, #68]	; 0x44
  402084:	4770      	bx	lr

00402086 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402086:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402088:	4770      	bx	lr

0040208a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40208a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40208c:	4770      	bx	lr

0040208e <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40208e:	0943      	lsrs	r3, r0, #5
  402090:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402094:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402098:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  40209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40209c:	f000 001f 	and.w	r0, r0, #31
  4020a0:	fa23 f000 	lsr.w	r0, r3, r0
}
  4020a4:	f000 0001 	and.w	r0, r0, #1
  4020a8:	4770      	bx	lr
	...

004020ac <pio_configure_pin>:
{
  4020ac:	b570      	push	{r4, r5, r6, lr}
  4020ae:	b082      	sub	sp, #8
  4020b0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4020b2:	0943      	lsrs	r3, r0, #5
  4020b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4020b8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4020bc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4020be:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4020c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4020c6:	d053      	beq.n	402170 <pio_configure_pin+0xc4>
  4020c8:	d80a      	bhi.n	4020e0 <pio_configure_pin+0x34>
  4020ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4020ce:	d02d      	beq.n	40212c <pio_configure_pin+0x80>
  4020d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4020d4:	d03b      	beq.n	40214e <pio_configure_pin+0xa2>
  4020d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4020da:	d015      	beq.n	402108 <pio_configure_pin+0x5c>
		return 0;
  4020dc:	2000      	movs	r0, #0
  4020de:	e023      	b.n	402128 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4020e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4020e4:	d055      	beq.n	402192 <pio_configure_pin+0xe6>
  4020e6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4020ea:	d052      	beq.n	402192 <pio_configure_pin+0xe6>
  4020ec:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4020f0:	d1f4      	bne.n	4020dc <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4020f2:	f000 011f 	and.w	r1, r0, #31
  4020f6:	2601      	movs	r6, #1
  4020f8:	462a      	mov	r2, r5
  4020fa:	fa06 f101 	lsl.w	r1, r6, r1
  4020fe:	4620      	mov	r0, r4
  402100:	4b2f      	ldr	r3, [pc, #188]	; (4021c0 <pio_configure_pin+0x114>)
  402102:	4798      	blx	r3
	return 1;
  402104:	4630      	mov	r0, r6
		break;
  402106:	e00f      	b.n	402128 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402108:	f000 001f 	and.w	r0, r0, #31
  40210c:	2601      	movs	r6, #1
  40210e:	4086      	lsls	r6, r0
  402110:	4632      	mov	r2, r6
  402112:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402116:	4620      	mov	r0, r4
  402118:	4b2a      	ldr	r3, [pc, #168]	; (4021c4 <pio_configure_pin+0x118>)
  40211a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40211c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402120:	bf14      	ite	ne
  402122:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402124:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  402126:	2001      	movs	r0, #1
}
  402128:	b002      	add	sp, #8
  40212a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40212c:	f000 001f 	and.w	r0, r0, #31
  402130:	2601      	movs	r6, #1
  402132:	4086      	lsls	r6, r0
  402134:	4632      	mov	r2, r6
  402136:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40213a:	4620      	mov	r0, r4
  40213c:	4b21      	ldr	r3, [pc, #132]	; (4021c4 <pio_configure_pin+0x118>)
  40213e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402140:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402144:	bf14      	ite	ne
  402146:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402148:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40214a:	2001      	movs	r0, #1
  40214c:	e7ec      	b.n	402128 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40214e:	f000 001f 	and.w	r0, r0, #31
  402152:	2601      	movs	r6, #1
  402154:	4086      	lsls	r6, r0
  402156:	4632      	mov	r2, r6
  402158:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40215c:	4620      	mov	r0, r4
  40215e:	4b19      	ldr	r3, [pc, #100]	; (4021c4 <pio_configure_pin+0x118>)
  402160:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402162:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402166:	bf14      	ite	ne
  402168:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40216a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40216c:	2001      	movs	r0, #1
  40216e:	e7db      	b.n	402128 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402170:	f000 001f 	and.w	r0, r0, #31
  402174:	2601      	movs	r6, #1
  402176:	4086      	lsls	r6, r0
  402178:	4632      	mov	r2, r6
  40217a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40217e:	4620      	mov	r0, r4
  402180:	4b10      	ldr	r3, [pc, #64]	; (4021c4 <pio_configure_pin+0x118>)
  402182:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402184:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402188:	bf14      	ite	ne
  40218a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40218c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40218e:	2001      	movs	r0, #1
  402190:	e7ca      	b.n	402128 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402192:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402196:	f000 011f 	and.w	r1, r0, #31
  40219a:	2601      	movs	r6, #1
  40219c:	ea05 0306 	and.w	r3, r5, r6
  4021a0:	9300      	str	r3, [sp, #0]
  4021a2:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4021a6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4021aa:	bf14      	ite	ne
  4021ac:	2200      	movne	r2, #0
  4021ae:	2201      	moveq	r2, #1
  4021b0:	fa06 f101 	lsl.w	r1, r6, r1
  4021b4:	4620      	mov	r0, r4
  4021b6:	4c04      	ldr	r4, [pc, #16]	; (4021c8 <pio_configure_pin+0x11c>)
  4021b8:	47a0      	blx	r4
	return 1;
  4021ba:	4630      	mov	r0, r6
		break;
  4021bc:	e7b4      	b.n	402128 <pio_configure_pin+0x7c>
  4021be:	bf00      	nop
  4021c0:	00401f6b 	.word	0x00401f6b
  4021c4:	00401edb 	.word	0x00401edb
  4021c8:	00401f9d 	.word	0x00401f9d

004021cc <pio_configure_pin_group>:
{
  4021cc:	b570      	push	{r4, r5, r6, lr}
  4021ce:	b082      	sub	sp, #8
  4021d0:	4605      	mov	r5, r0
  4021d2:	460e      	mov	r6, r1
  4021d4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4021d6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4021da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4021de:	d03d      	beq.n	40225c <pio_configure_pin_group+0x90>
  4021e0:	d80a      	bhi.n	4021f8 <pio_configure_pin_group+0x2c>
  4021e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4021e6:	d021      	beq.n	40222c <pio_configure_pin_group+0x60>
  4021e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4021ec:	d02a      	beq.n	402244 <pio_configure_pin_group+0x78>
  4021ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4021f2:	d00e      	beq.n	402212 <pio_configure_pin_group+0x46>
		return 0;
  4021f4:	2000      	movs	r0, #0
  4021f6:	e017      	b.n	402228 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4021f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4021fc:	d03a      	beq.n	402274 <pio_configure_pin_group+0xa8>
  4021fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402202:	d037      	beq.n	402274 <pio_configure_pin_group+0xa8>
  402204:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402208:	d1f4      	bne.n	4021f4 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  40220a:	4b23      	ldr	r3, [pc, #140]	; (402298 <pio_configure_pin_group+0xcc>)
  40220c:	4798      	blx	r3
	return 1;
  40220e:	2001      	movs	r0, #1
		break;
  402210:	e00a      	b.n	402228 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  402212:	460a      	mov	r2, r1
  402214:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402218:	4b20      	ldr	r3, [pc, #128]	; (40229c <pio_configure_pin_group+0xd0>)
  40221a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40221c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402220:	bf14      	ite	ne
  402222:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402224:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402226:	2001      	movs	r0, #1
}
  402228:	b002      	add	sp, #8
  40222a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40222c:	460a      	mov	r2, r1
  40222e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402232:	4b1a      	ldr	r3, [pc, #104]	; (40229c <pio_configure_pin_group+0xd0>)
  402234:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402236:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40223a:	bf14      	ite	ne
  40223c:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40223e:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402240:	2001      	movs	r0, #1
  402242:	e7f1      	b.n	402228 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  402244:	460a      	mov	r2, r1
  402246:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40224a:	4b14      	ldr	r3, [pc, #80]	; (40229c <pio_configure_pin_group+0xd0>)
  40224c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40224e:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402252:	bf14      	ite	ne
  402254:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402256:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402258:	2001      	movs	r0, #1
  40225a:	e7e5      	b.n	402228 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40225c:	460a      	mov	r2, r1
  40225e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402262:	4b0e      	ldr	r3, [pc, #56]	; (40229c <pio_configure_pin_group+0xd0>)
  402264:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402266:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40226a:	bf14      	ite	ne
  40226c:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40226e:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  402270:	2001      	movs	r0, #1
  402272:	e7d9      	b.n	402228 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402274:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  402278:	f004 0301 	and.w	r3, r4, #1
  40227c:	9300      	str	r3, [sp, #0]
  40227e:	f3c4 0380 	ubfx	r3, r4, #2, #1
  402282:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402286:	bf14      	ite	ne
  402288:	2200      	movne	r2, #0
  40228a:	2201      	moveq	r2, #1
  40228c:	4631      	mov	r1, r6
  40228e:	4628      	mov	r0, r5
  402290:	4c03      	ldr	r4, [pc, #12]	; (4022a0 <pio_configure_pin_group+0xd4>)
  402292:	47a0      	blx	r4
	return 1;
  402294:	2001      	movs	r0, #1
		break;
  402296:	e7c7      	b.n	402228 <pio_configure_pin_group+0x5c>
  402298:	00401f6b 	.word	0x00401f6b
  40229c:	00401edb 	.word	0x00401edb
  4022a0:	00401f9d 	.word	0x00401f9d

004022a4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4022a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4022a8:	4681      	mov	r9, r0
  4022aa:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4022ac:	4b12      	ldr	r3, [pc, #72]	; (4022f8 <pio_handler_process+0x54>)
  4022ae:	4798      	blx	r3
  4022b0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4022b2:	4648      	mov	r0, r9
  4022b4:	4b11      	ldr	r3, [pc, #68]	; (4022fc <pio_handler_process+0x58>)
  4022b6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4022b8:	4005      	ands	r5, r0
  4022ba:	d013      	beq.n	4022e4 <pio_handler_process+0x40>
  4022bc:	4c10      	ldr	r4, [pc, #64]	; (402300 <pio_handler_process+0x5c>)
  4022be:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4022c2:	e003      	b.n	4022cc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4022c4:	42b4      	cmp	r4, r6
  4022c6:	d00d      	beq.n	4022e4 <pio_handler_process+0x40>
  4022c8:	3410      	adds	r4, #16
		while (status != 0) {
  4022ca:	b15d      	cbz	r5, 4022e4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4022cc:	6820      	ldr	r0, [r4, #0]
  4022ce:	42b8      	cmp	r0, r7
  4022d0:	d1f8      	bne.n	4022c4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4022d2:	6861      	ldr	r1, [r4, #4]
  4022d4:	4229      	tst	r1, r5
  4022d6:	d0f5      	beq.n	4022c4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4022d8:	68e3      	ldr	r3, [r4, #12]
  4022da:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4022dc:	6863      	ldr	r3, [r4, #4]
  4022de:	ea25 0503 	bic.w	r5, r5, r3
  4022e2:	e7ef      	b.n	4022c4 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4022e4:	4b07      	ldr	r3, [pc, #28]	; (402304 <pio_handler_process+0x60>)
  4022e6:	681b      	ldr	r3, [r3, #0]
  4022e8:	b123      	cbz	r3, 4022f4 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4022ea:	4b07      	ldr	r3, [pc, #28]	; (402308 <pio_handler_process+0x64>)
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	b10b      	cbz	r3, 4022f4 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4022f0:	4648      	mov	r0, r9
  4022f2:	4798      	blx	r3
  4022f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4022f8:	00402087 	.word	0x00402087
  4022fc:	0040208b 	.word	0x0040208b
  402300:	20001080 	.word	0x20001080
  402304:	20001164 	.word	0x20001164
  402308:	200010f4 	.word	0x200010f4

0040230c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40230e:	4c18      	ldr	r4, [pc, #96]	; (402370 <pio_handler_set+0x64>)
  402310:	6826      	ldr	r6, [r4, #0]
  402312:	2e06      	cmp	r6, #6
  402314:	d829      	bhi.n	40236a <pio_handler_set+0x5e>
  402316:	f04f 0c00 	mov.w	ip, #0
  40231a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40231c:	4f15      	ldr	r7, [pc, #84]	; (402374 <pio_handler_set+0x68>)
  40231e:	e004      	b.n	40232a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402320:	3401      	adds	r4, #1
  402322:	b2e4      	uxtb	r4, r4
  402324:	46a4      	mov	ip, r4
  402326:	42a6      	cmp	r6, r4
  402328:	d309      	bcc.n	40233e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40232a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40232c:	0125      	lsls	r5, r4, #4
  40232e:	597d      	ldr	r5, [r7, r5]
  402330:	428d      	cmp	r5, r1
  402332:	d1f5      	bne.n	402320 <pio_handler_set+0x14>
  402334:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  402338:	686d      	ldr	r5, [r5, #4]
  40233a:	4295      	cmp	r5, r2
  40233c:	d1f0      	bne.n	402320 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40233e:	4d0d      	ldr	r5, [pc, #52]	; (402374 <pio_handler_set+0x68>)
  402340:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  402344:	eb05 040e 	add.w	r4, r5, lr
  402348:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40234c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40234e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  402350:	9906      	ldr	r1, [sp, #24]
  402352:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  402354:	3601      	adds	r6, #1
  402356:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  402358:	bf04      	itt	eq
  40235a:	4905      	ldreq	r1, [pc, #20]	; (402370 <pio_handler_set+0x64>)
  40235c:	600e      	streq	r6, [r1, #0]
  40235e:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402360:	461a      	mov	r2, r3
  402362:	4b05      	ldr	r3, [pc, #20]	; (402378 <pio_handler_set+0x6c>)
  402364:	4798      	blx	r3

	return 0;
  402366:	2000      	movs	r0, #0
  402368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  40236a:	2001      	movs	r0, #1
}
  40236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40236e:	bf00      	nop
  402370:	200010f0 	.word	0x200010f0
  402374:	20001080 	.word	0x20001080
  402378:	00402051 	.word	0x00402051

0040237c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40237c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40237e:	210b      	movs	r1, #11
  402380:	4801      	ldr	r0, [pc, #4]	; (402388 <PIOA_Handler+0xc>)
  402382:	4b02      	ldr	r3, [pc, #8]	; (40238c <PIOA_Handler+0x10>)
  402384:	4798      	blx	r3
  402386:	bd08      	pop	{r3, pc}
  402388:	400e0e00 	.word	0x400e0e00
  40238c:	004022a5 	.word	0x004022a5

00402390 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402390:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402392:	210c      	movs	r1, #12
  402394:	4801      	ldr	r0, [pc, #4]	; (40239c <PIOB_Handler+0xc>)
  402396:	4b02      	ldr	r3, [pc, #8]	; (4023a0 <PIOB_Handler+0x10>)
  402398:	4798      	blx	r3
  40239a:	bd08      	pop	{r3, pc}
  40239c:	400e1000 	.word	0x400e1000
  4023a0:	004022a5 	.word	0x004022a5

004023a4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4023a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4023a6:	210d      	movs	r1, #13
  4023a8:	4801      	ldr	r0, [pc, #4]	; (4023b0 <PIOC_Handler+0xc>)
  4023aa:	4b02      	ldr	r3, [pc, #8]	; (4023b4 <PIOC_Handler+0x10>)
  4023ac:	4798      	blx	r3
  4023ae:	bd08      	pop	{r3, pc}
  4023b0:	400e1200 	.word	0x400e1200
  4023b4:	004022a5 	.word	0x004022a5

004023b8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023ba:	4605      	mov	r5, r0
  4023bc:	460c      	mov	r4, r1
  4023be:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4023c0:	4b18      	ldr	r3, [pc, #96]	; (402424 <pio_handler_set_priority+0x6c>)
  4023c2:	4798      	blx	r3
  4023c4:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4023c6:	f04f 31ff 	mov.w	r1, #4294967295
  4023ca:	4628      	mov	r0, r5
  4023cc:	4b16      	ldr	r3, [pc, #88]	; (402428 <pio_handler_set_priority+0x70>)
  4023ce:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4023d0:	4628      	mov	r0, r5
  4023d2:	4b16      	ldr	r3, [pc, #88]	; (40242c <pio_handler_set_priority+0x74>)
  4023d4:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4023d6:	b2e2      	uxtb	r2, r4
  4023d8:	f002 031f 	and.w	r3, r2, #31
  4023dc:	2101      	movs	r1, #1
  4023de:	4099      	lsls	r1, r3
  4023e0:	0963      	lsrs	r3, r4, #5
  4023e2:	009b      	lsls	r3, r3, #2
  4023e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4023e8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  4023ec:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4023f0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4023f4:	2c00      	cmp	r4, #0
  4023f6:	db0d      	blt.n	402414 <pio_handler_set_priority+0x5c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4023f8:	013f      	lsls	r7, r7, #4
  4023fa:	b2ff      	uxtb	r7, r7
  4023fc:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  402400:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  402404:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402408:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  40240a:	4631      	mov	r1, r6
  40240c:	4628      	mov	r0, r5
  40240e:	4b08      	ldr	r3, [pc, #32]	; (402430 <pio_handler_set_priority+0x78>)
  402410:	4798      	blx	r3
  402412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402414:	f002 020f 	and.w	r2, r2, #15
  402418:	013f      	lsls	r7, r7, #4
  40241a:	b2ff      	uxtb	r7, r7
  40241c:	4805      	ldr	r0, [pc, #20]	; (402434 <pio_handler_set_priority+0x7c>)
  40241e:	5487      	strb	r7, [r0, r2]
  402420:	e7f2      	b.n	402408 <pio_handler_set_priority+0x50>
  402422:	bf00      	nop
  402424:	0040208b 	.word	0x0040208b
  402428:	00402083 	.word	0x00402083
  40242c:	00402087 	.word	0x00402087
  402430:	0040207f 	.word	0x0040207f
  402434:	e000ed14 	.word	0xe000ed14

00402438 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402438:	4a17      	ldr	r2, [pc, #92]	; (402498 <pmc_switch_mck_to_pllack+0x60>)
  40243a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40243c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402440:	4318      	orrs	r0, r3
  402442:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402444:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402446:	f013 0f08 	tst.w	r3, #8
  40244a:	d10a      	bne.n	402462 <pmc_switch_mck_to_pllack+0x2a>
  40244c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402450:	4911      	ldr	r1, [pc, #68]	; (402498 <pmc_switch_mck_to_pllack+0x60>)
  402452:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402454:	f012 0f08 	tst.w	r2, #8
  402458:	d103      	bne.n	402462 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40245a:	3b01      	subs	r3, #1
  40245c:	d1f9      	bne.n	402452 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40245e:	2001      	movs	r0, #1
  402460:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402462:	4a0d      	ldr	r2, [pc, #52]	; (402498 <pmc_switch_mck_to_pllack+0x60>)
  402464:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402466:	f023 0303 	bic.w	r3, r3, #3
  40246a:	f043 0302 	orr.w	r3, r3, #2
  40246e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402470:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402472:	f013 0f08 	tst.w	r3, #8
  402476:	d10a      	bne.n	40248e <pmc_switch_mck_to_pllack+0x56>
  402478:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40247c:	4906      	ldr	r1, [pc, #24]	; (402498 <pmc_switch_mck_to_pllack+0x60>)
  40247e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402480:	f012 0f08 	tst.w	r2, #8
  402484:	d105      	bne.n	402492 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402486:	3b01      	subs	r3, #1
  402488:	d1f9      	bne.n	40247e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40248a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40248c:	4770      	bx	lr
	return 0;
  40248e:	2000      	movs	r0, #0
  402490:	4770      	bx	lr
  402492:	2000      	movs	r0, #0
  402494:	4770      	bx	lr
  402496:	bf00      	nop
  402498:	400e0400 	.word	0x400e0400

0040249c <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40249c:	2801      	cmp	r0, #1
  40249e:	d003      	beq.n	4024a8 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4024a0:	4a05      	ldr	r2, [pc, #20]	; (4024b8 <pmc_switch_sclk_to_32kxtal+0x1c>)
  4024a2:	4b06      	ldr	r3, [pc, #24]	; (4024bc <pmc_switch_sclk_to_32kxtal+0x20>)
  4024a4:	601a      	str	r2, [r3, #0]
  4024a6:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4024a8:	4a04      	ldr	r2, [pc, #16]	; (4024bc <pmc_switch_sclk_to_32kxtal+0x20>)
  4024aa:	6893      	ldr	r3, [r2, #8]
  4024ac:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4024b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4024b4:	6093      	str	r3, [r2, #8]
  4024b6:	e7f3      	b.n	4024a0 <pmc_switch_sclk_to_32kxtal+0x4>
  4024b8:	a5000008 	.word	0xa5000008
  4024bc:	400e1410 	.word	0x400e1410

004024c0 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4024c0:	4b05      	ldr	r3, [pc, #20]	; (4024d8 <pmc_osc_is_ready_32kxtal+0x18>)
  4024c2:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4024c4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4024c8:	bf1d      	ittte	ne
  4024ca:	4b04      	ldrne	r3, [pc, #16]	; (4024dc <pmc_osc_is_ready_32kxtal+0x1c>)
  4024cc:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  4024ce:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  4024d2:	2000      	moveq	r0, #0
}
  4024d4:	4770      	bx	lr
  4024d6:	bf00      	nop
  4024d8:	400e1410 	.word	0x400e1410
  4024dc:	400e0400 	.word	0x400e0400

004024e0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4024e0:	b9c8      	cbnz	r0, 402516 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024e2:	4a11      	ldr	r2, [pc, #68]	; (402528 <pmc_switch_mainck_to_xtal+0x48>)
  4024e4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4024e6:	0209      	lsls	r1, r1, #8
  4024e8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4024ea:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4024ee:	f023 0303 	bic.w	r3, r3, #3
  4024f2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4024f6:	f043 0301 	orr.w	r3, r3, #1
  4024fa:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024fc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4024fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402500:	f013 0f01 	tst.w	r3, #1
  402504:	d0fb      	beq.n	4024fe <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402506:	4a08      	ldr	r2, [pc, #32]	; (402528 <pmc_switch_mainck_to_xtal+0x48>)
  402508:	6a13      	ldr	r3, [r2, #32]
  40250a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402512:	6213      	str	r3, [r2, #32]
  402514:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402516:	4904      	ldr	r1, [pc, #16]	; (402528 <pmc_switch_mainck_to_xtal+0x48>)
  402518:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40251a:	4a04      	ldr	r2, [pc, #16]	; (40252c <pmc_switch_mainck_to_xtal+0x4c>)
  40251c:	401a      	ands	r2, r3
  40251e:	4b04      	ldr	r3, [pc, #16]	; (402530 <pmc_switch_mainck_to_xtal+0x50>)
  402520:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402522:	620b      	str	r3, [r1, #32]
  402524:	4770      	bx	lr
  402526:	bf00      	nop
  402528:	400e0400 	.word	0x400e0400
  40252c:	fec8fffc 	.word	0xfec8fffc
  402530:	01370002 	.word	0x01370002

00402534 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402534:	4b02      	ldr	r3, [pc, #8]	; (402540 <pmc_osc_is_ready_mainck+0xc>)
  402536:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402538:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40253c:	4770      	bx	lr
  40253e:	bf00      	nop
  402540:	400e0400 	.word	0x400e0400

00402544 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402544:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402548:	4b01      	ldr	r3, [pc, #4]	; (402550 <pmc_disable_pllack+0xc>)
  40254a:	629a      	str	r2, [r3, #40]	; 0x28
  40254c:	4770      	bx	lr
  40254e:	bf00      	nop
  402550:	400e0400 	.word	0x400e0400

00402554 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402554:	4b02      	ldr	r3, [pc, #8]	; (402560 <pmc_is_locked_pllack+0xc>)
  402556:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402558:	f000 0002 	and.w	r0, r0, #2
  40255c:	4770      	bx	lr
  40255e:	bf00      	nop
  402560:	400e0400 	.word	0x400e0400

00402564 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402564:	2822      	cmp	r0, #34	; 0x22
  402566:	d81e      	bhi.n	4025a6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402568:	281f      	cmp	r0, #31
  40256a:	d80c      	bhi.n	402586 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40256c:	4b11      	ldr	r3, [pc, #68]	; (4025b4 <pmc_enable_periph_clk+0x50>)
  40256e:	699a      	ldr	r2, [r3, #24]
  402570:	2301      	movs	r3, #1
  402572:	4083      	lsls	r3, r0
  402574:	4393      	bics	r3, r2
  402576:	d018      	beq.n	4025aa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402578:	2301      	movs	r3, #1
  40257a:	fa03 f000 	lsl.w	r0, r3, r0
  40257e:	4b0d      	ldr	r3, [pc, #52]	; (4025b4 <pmc_enable_periph_clk+0x50>)
  402580:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402582:	2000      	movs	r0, #0
  402584:	4770      	bx	lr
		ul_id -= 32;
  402586:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402588:	4b0a      	ldr	r3, [pc, #40]	; (4025b4 <pmc_enable_periph_clk+0x50>)
  40258a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40258e:	2301      	movs	r3, #1
  402590:	4083      	lsls	r3, r0
  402592:	4393      	bics	r3, r2
  402594:	d00b      	beq.n	4025ae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402596:	2301      	movs	r3, #1
  402598:	fa03 f000 	lsl.w	r0, r3, r0
  40259c:	4b05      	ldr	r3, [pc, #20]	; (4025b4 <pmc_enable_periph_clk+0x50>)
  40259e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4025a2:	2000      	movs	r0, #0
  4025a4:	4770      	bx	lr
		return 1;
  4025a6:	2001      	movs	r0, #1
  4025a8:	4770      	bx	lr
	return 0;
  4025aa:	2000      	movs	r0, #0
  4025ac:	4770      	bx	lr
  4025ae:	2000      	movs	r0, #0
}
  4025b0:	4770      	bx	lr
  4025b2:	bf00      	nop
  4025b4:	400e0400 	.word	0x400e0400

004025b8 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4025b8:	b921      	cbnz	r1, 4025c4 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4025ba:	6843      	ldr	r3, [r0, #4]
  4025bc:	f023 0301 	bic.w	r3, r3, #1
  4025c0:	6043      	str	r3, [r0, #4]
  4025c2:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4025c4:	6843      	ldr	r3, [r0, #4]
  4025c6:	f043 0301 	orr.w	r3, r3, #1
  4025ca:	6043      	str	r3, [r0, #4]
  4025cc:	4770      	bx	lr

004025ce <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4025ce:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4025d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4025d2:	6884      	ldr	r4, [r0, #8]
  4025d4:	42a5      	cmp	r5, r4
  4025d6:	d003      	beq.n	4025e0 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4025d8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4025da:	6884      	ldr	r4, [r0, #8]
  4025dc:	42ac      	cmp	r4, r5
  4025de:	d1fb      	bne.n	4025d8 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4025e0:	b161      	cbz	r1, 4025fc <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4025e2:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4025e6:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4025ea:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4025ee:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4025f2:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4025f6:	bf18      	it	ne
  4025f8:	300c      	addne	r0, #12
  4025fa:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4025fc:	b142      	cbz	r2, 402610 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4025fe:	f3c4 3102 	ubfx	r1, r4, #12, #3
  402602:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402606:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40260a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40260e:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  402610:	b143      	cbz	r3, 402624 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402612:	f3c4 1202 	ubfx	r2, r4, #4, #3
  402616:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40261a:	f004 040f 	and.w	r4, r4, #15
  40261e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  402622:	601c      	str	r4, [r3, #0]
	}
}
  402624:	bc30      	pop	{r4, r5}
  402626:	4770      	bx	lr

00402628 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  402628:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40262a:	6844      	ldr	r4, [r0, #4]
  40262c:	f014 0f01 	tst.w	r4, #1
  402630:	d005      	beq.n	40263e <rtc_set_time+0x16>
		if (ul_hour > 12) {
  402632:	290c      	cmp	r1, #12
  402634:	d93d      	bls.n	4026b2 <rtc_set_time+0x8a>
			ul_hour -= 12;
  402636:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  402638:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  40263c:	e000      	b.n	402640 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  40263e:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  402640:	4c1d      	ldr	r4, [pc, #116]	; (4026b8 <rtc_set_time+0x90>)
  402642:	fba4 5603 	umull	r5, r6, r4, r3
  402646:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  402648:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  40264c:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  402650:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  402654:	fba4 6502 	umull	r6, r5, r4, r2
  402658:	08ed      	lsrs	r5, r5, #3
  40265a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40265e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402662:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  402666:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40266a:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40266c:	fba4 4201 	umull	r4, r2, r4, r1
  402670:	08d2      	lsrs	r2, r2, #3
  402672:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  402676:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40267a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40267e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  402682:	6983      	ldr	r3, [r0, #24]
  402684:	f013 0f04 	tst.w	r3, #4
  402688:	d0fb      	beq.n	402682 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40268a:	6803      	ldr	r3, [r0, #0]
  40268c:	f043 0301 	orr.w	r3, r3, #1
  402690:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  402692:	6983      	ldr	r3, [r0, #24]
  402694:	f013 0f01 	tst.w	r3, #1
  402698:	d0fb      	beq.n	402692 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40269a:	2301      	movs	r3, #1
  40269c:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40269e:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  4026a0:	6803      	ldr	r3, [r0, #0]
  4026a2:	f023 0301 	bic.w	r3, r3, #1
  4026a6:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4026a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4026aa:	f000 0001 	and.w	r0, r0, #1
  4026ae:	bcf0      	pop	{r4, r5, r6, r7}
  4026b0:	4770      	bx	lr
	uint32_t ul_time = 0;
  4026b2:	2700      	movs	r7, #0
  4026b4:	e7c4      	b.n	402640 <rtc_set_time+0x18>
  4026b6:	bf00      	nop
  4026b8:	cccccccd 	.word	0xcccccccd

004026bc <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4026bc:	b4f0      	push	{r4, r5, r6, r7}
  4026be:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4026c0:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4026c2:	68c4      	ldr	r4, [r0, #12]
  4026c4:	42a5      	cmp	r5, r4
  4026c6:	d003      	beq.n	4026d0 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4026c8:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4026ca:	68c4      	ldr	r4, [r0, #12]
  4026cc:	42ac      	cmp	r4, r5
  4026ce:	d1fb      	bne.n	4026c8 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4026d0:	b199      	cbz	r1, 4026fa <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4026d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4026d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4026da:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4026de:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4026e2:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4026e6:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4026ea:	f004 000f 	and.w	r0, r4, #15
  4026ee:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4026f2:	2564      	movs	r5, #100	; 0x64
  4026f4:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4026f8:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4026fa:	b142      	cbz	r2, 40270e <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4026fc:	f3c4 5000 	ubfx	r0, r4, #20, #1
  402700:	0081      	lsls	r1, r0, #2
  402702:	4408      	add	r0, r1
  402704:	f3c4 4103 	ubfx	r1, r4, #16, #4
  402708:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  40270c:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  40270e:	b143      	cbz	r3, 402722 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402710:	f3c4 7201 	ubfx	r2, r4, #28, #2
  402714:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402718:	f3c4 6103 	ubfx	r1, r4, #24, #4
  40271c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  402720:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  402722:	b116      	cbz	r6, 40272a <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  402724:	f3c4 5442 	ubfx	r4, r4, #21, #3
  402728:	6034      	str	r4, [r6, #0]
	}
}
  40272a:	bcf0      	pop	{r4, r5, r6, r7}
  40272c:	4770      	bx	lr
	...

00402730 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  402730:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402732:	4d2a      	ldr	r5, [pc, #168]	; (4027dc <rtc_set_date+0xac>)
  402734:	fba5 4603 	umull	r4, r6, r5, r3
  402738:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40273a:	9c03      	ldr	r4, [sp, #12]
  40273c:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40273e:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  402742:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402746:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40274a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40274e:	fba5 6402 	umull	r6, r4, r5, r2
  402752:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402754:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  402758:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40275c:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402760:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  402764:	4b1e      	ldr	r3, [pc, #120]	; (4027e0 <rtc_set_date+0xb0>)
  402766:	fba3 4301 	umull	r4, r3, r3, r1
  40276a:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40276c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  402770:	4b1c      	ldr	r3, [pc, #112]	; (4027e4 <rtc_set_date+0xb4>)
  402772:	fba3 4301 	umull	r4, r3, r3, r1
  402776:	095b      	lsrs	r3, r3, #5
  402778:	fba5 6403 	umull	r6, r4, r5, r3
  40277c:	08e4      	lsrs	r4, r4, #3
  40277e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402782:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402786:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  402788:	fba5 4301 	umull	r4, r3, r5, r1
  40278c:	08db      	lsrs	r3, r3, #3
  40278e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  402792:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402796:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40279a:	fba5 1503 	umull	r1, r5, r5, r3
  40279e:	08ed      	lsrs	r5, r5, #3
  4027a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4027a4:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4027a8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4027ac:	6983      	ldr	r3, [r0, #24]
  4027ae:	f013 0f04 	tst.w	r3, #4
  4027b2:	d0fb      	beq.n	4027ac <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4027b4:	6803      	ldr	r3, [r0, #0]
  4027b6:	f043 0302 	orr.w	r3, r3, #2
  4027ba:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4027bc:	6983      	ldr	r3, [r0, #24]
  4027be:	f013 0f01 	tst.w	r3, #1
  4027c2:	d0fb      	beq.n	4027bc <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4027c4:	2301      	movs	r3, #1
  4027c6:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4027c8:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4027ca:	6803      	ldr	r3, [r0, #0]
  4027cc:	f023 0302 	bic.w	r3, r3, #2
  4027d0:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4027d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4027d4:	f000 0002 	and.w	r0, r0, #2
  4027d8:	bc70      	pop	{r4, r5, r6}
  4027da:	4770      	bx	lr
  4027dc:	cccccccd 	.word	0xcccccccd
  4027e0:	10624dd3 	.word	0x10624dd3
  4027e4:	51eb851f 	.word	0x51eb851f

004027e8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4027e8:	b508      	push	{r3, lr}
  4027ea:	2015      	movs	r0, #21
  4027ec:	4b01      	ldr	r3, [pc, #4]	; (4027f4 <spi_enable_clock+0xc>)
  4027ee:	4798      	blx	r3
  4027f0:	bd08      	pop	{r3, pc}
  4027f2:	bf00      	nop
  4027f4:	00402565 	.word	0x00402565

004027f8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4027f8:	6843      	ldr	r3, [r0, #4]
  4027fa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4027fe:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  402800:	6843      	ldr	r3, [r0, #4]
  402802:	0409      	lsls	r1, r1, #16
  402804:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  402808:	4319      	orrs	r1, r3
  40280a:	6041      	str	r1, [r0, #4]
  40280c:	4770      	bx	lr

0040280e <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  40280e:	6843      	ldr	r3, [r0, #4]
  402810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402814:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  402816:	6843      	ldr	r3, [r0, #4]
  402818:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  40281c:	6041      	str	r1, [r0, #4]
  40281e:	4770      	bx	lr

00402820 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  402820:	b932      	cbnz	r2, 402830 <spi_set_clock_polarity+0x10>
  402822:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  402826:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402828:	f023 0301 	bic.w	r3, r3, #1
  40282c:	6303      	str	r3, [r0, #48]	; 0x30
  40282e:	4770      	bx	lr
  402830:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  402834:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402836:	f043 0301 	orr.w	r3, r3, #1
  40283a:	6303      	str	r3, [r0, #48]	; 0x30
  40283c:	4770      	bx	lr

0040283e <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40283e:	b932      	cbnz	r2, 40284e <spi_set_clock_phase+0x10>
  402840:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  402844:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402846:	f023 0302 	bic.w	r3, r3, #2
  40284a:	6303      	str	r3, [r0, #48]	; 0x30
  40284c:	4770      	bx	lr
  40284e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  402852:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402854:	f043 0302 	orr.w	r3, r3, #2
  402858:	6303      	str	r3, [r0, #48]	; 0x30
  40285a:	4770      	bx	lr

0040285c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40285c:	2a04      	cmp	r2, #4
  40285e:	d003      	beq.n	402868 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  402860:	b16a      	cbz	r2, 40287e <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  402862:	2a08      	cmp	r2, #8
  402864:	d016      	beq.n	402894 <spi_configure_cs_behavior+0x38>
  402866:	4770      	bx	lr
  402868:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40286c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40286e:	f023 0308 	bic.w	r3, r3, #8
  402872:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  402874:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402876:	f043 0304 	orr.w	r3, r3, #4
  40287a:	6303      	str	r3, [r0, #48]	; 0x30
  40287c:	4770      	bx	lr
  40287e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  402882:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402884:	f023 0308 	bic.w	r3, r3, #8
  402888:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40288a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40288c:	f023 0304 	bic.w	r3, r3, #4
  402890:	6303      	str	r3, [r0, #48]	; 0x30
  402892:	4770      	bx	lr
  402894:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  402898:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40289a:	f043 0308 	orr.w	r3, r3, #8
  40289e:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4028a0:	e7e1      	b.n	402866 <spi_configure_cs_behavior+0xa>

004028a2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4028a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4028a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4028a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4028ac:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4028ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4028b0:	431a      	orrs	r2, r3
  4028b2:	630a      	str	r2, [r1, #48]	; 0x30
  4028b4:	4770      	bx	lr

004028b6 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4028b6:	1e43      	subs	r3, r0, #1
  4028b8:	4419      	add	r1, r3
  4028ba:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4028be:	1e43      	subs	r3, r0, #1
  4028c0:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4028c2:	bf94      	ite	ls
  4028c4:	b200      	sxthls	r0, r0
		return -1;
  4028c6:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4028ca:	4770      	bx	lr

004028cc <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4028cc:	b172      	cbz	r2, 4028ec <spi_set_baudrate_div+0x20>
{
  4028ce:	b410      	push	{r4}
  4028d0:	4614      	mov	r4, r2
  4028d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4028d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4028d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4028dc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4028de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4028e0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4028e4:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4028e6:	2000      	movs	r0, #0
}
  4028e8:	bc10      	pop	{r4}
  4028ea:	4770      	bx	lr
        return -1;
  4028ec:	f04f 30ff 	mov.w	r0, #4294967295
  4028f0:	4770      	bx	lr

004028f2 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4028f2:	b410      	push	{r4}
  4028f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4028f8:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4028fa:	b280      	uxth	r0, r0
  4028fc:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4028fe:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  402900:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  402904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402908:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  40290a:	bc10      	pop	{r4}
  40290c:	4770      	bx	lr
	...

00402910 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402910:	4b2a      	ldr	r3, [pc, #168]	; (4029bc <twi_set_speed+0xac>)
  402912:	4299      	cmp	r1, r3
  402914:	d849      	bhi.n	4029aa <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  402916:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40291a:	4299      	cmp	r1, r3
  40291c:	d92b      	bls.n	402976 <twi_set_speed+0x66>
{
  40291e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  402920:	4c27      	ldr	r4, [pc, #156]	; (4029c0 <twi_set_speed+0xb0>)
  402922:	fba4 3402 	umull	r3, r4, r4, r2
  402926:	0ba4      	lsrs	r4, r4, #14
  402928:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40292a:	4b26      	ldr	r3, [pc, #152]	; (4029c4 <twi_set_speed+0xb4>)
  40292c:	440b      	add	r3, r1
  40292e:	009b      	lsls	r3, r3, #2
  402930:	fbb2 f2f3 	udiv	r2, r2, r3
  402934:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402936:	2cff      	cmp	r4, #255	; 0xff
  402938:	d939      	bls.n	4029ae <twi_set_speed+0x9e>
  40293a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  40293c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40293e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402940:	2cff      	cmp	r4, #255	; 0xff
  402942:	d90d      	bls.n	402960 <twi_set_speed+0x50>
  402944:	2907      	cmp	r1, #7
  402946:	d1f9      	bne.n	40293c <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  402948:	0213      	lsls	r3, r2, #8
  40294a:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  40294c:	0409      	lsls	r1, r1, #16
  40294e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  402952:	430b      	orrs	r3, r1
  402954:	b2e4      	uxtb	r4, r4
  402956:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  402958:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40295a:	2000      	movs	r0, #0
}
  40295c:	bc10      	pop	{r4}
  40295e:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402960:	2aff      	cmp	r2, #255	; 0xff
  402962:	d9f1      	bls.n	402948 <twi_set_speed+0x38>
  402964:	2906      	cmp	r1, #6
  402966:	d8ef      	bhi.n	402948 <twi_set_speed+0x38>
			ckdiv++;
  402968:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  40296a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40296c:	2aff      	cmp	r2, #255	; 0xff
  40296e:	d9eb      	bls.n	402948 <twi_set_speed+0x38>
  402970:	2906      	cmp	r1, #6
  402972:	d9f9      	bls.n	402968 <twi_set_speed+0x58>
  402974:	e7e8      	b.n	402948 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  402976:	0049      	lsls	r1, r1, #1
  402978:	fbb2 f2f1 	udiv	r2, r2, r1
  40297c:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40297e:	2aff      	cmp	r2, #255	; 0xff
  402980:	d911      	bls.n	4029a6 <twi_set_speed+0x96>
  402982:	2300      	movs	r3, #0
			ckdiv++;
  402984:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  402986:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402988:	2aff      	cmp	r2, #255	; 0xff
  40298a:	d901      	bls.n	402990 <twi_set_speed+0x80>
  40298c:	2b07      	cmp	r3, #7
  40298e:	d1f9      	bne.n	402984 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  402990:	0211      	lsls	r1, r2, #8
  402992:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  402994:	041b      	lsls	r3, r3, #16
  402996:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40299a:	430b      	orrs	r3, r1
  40299c:	b2d2      	uxtb	r2, r2
  40299e:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4029a0:	6102      	str	r2, [r0, #16]
	return PASS;
  4029a2:	2000      	movs	r0, #0
  4029a4:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4029a6:	2300      	movs	r3, #0
  4029a8:	e7f2      	b.n	402990 <twi_set_speed+0x80>
		return FAIL;
  4029aa:	2001      	movs	r0, #1
  4029ac:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4029ae:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  4029b0:	bf88      	it	hi
  4029b2:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4029b4:	d8d8      	bhi.n	402968 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
  4029b6:	2100      	movs	r1, #0
  4029b8:	e7c6      	b.n	402948 <twi_set_speed+0x38>
  4029ba:	bf00      	nop
  4029bc:	00061a80 	.word	0x00061a80
  4029c0:	057619f1 	.word	0x057619f1
  4029c4:	3ffd1200 	.word	0x3ffd1200

004029c8 <twi_master_init>:
{
  4029c8:	b538      	push	{r3, r4, r5, lr}
  4029ca:	4604      	mov	r4, r0
  4029cc:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  4029ce:	f04f 33ff 	mov.w	r3, #4294967295
  4029d2:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  4029d4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4029d6:	2380      	movs	r3, #128	; 0x80
  4029d8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4029da:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4029dc:	2308      	movs	r3, #8
  4029de:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4029e0:	2320      	movs	r3, #32
  4029e2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  4029e4:	2304      	movs	r3, #4
  4029e6:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4029e8:	680a      	ldr	r2, [r1, #0]
  4029ea:	6849      	ldr	r1, [r1, #4]
  4029ec:	4b05      	ldr	r3, [pc, #20]	; (402a04 <twi_master_init+0x3c>)
  4029ee:	4798      	blx	r3
  4029f0:	2801      	cmp	r0, #1
  4029f2:	bf14      	ite	ne
  4029f4:	2000      	movne	r0, #0
  4029f6:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  4029f8:	7a6b      	ldrb	r3, [r5, #9]
  4029fa:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4029fc:	bf04      	itt	eq
  4029fe:	2340      	moveq	r3, #64	; 0x40
  402a00:	6023      	streq	r3, [r4, #0]
}
  402a02:	bd38      	pop	{r3, r4, r5, pc}
  402a04:	00402911 	.word	0x00402911

00402a08 <twi_mk_addr>:
	if (len == 0)
  402a08:	460a      	mov	r2, r1
  402a0a:	b159      	cbz	r1, 402a24 <twi_mk_addr+0x1c>
	val = addr[0];
  402a0c:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  402a0e:	2901      	cmp	r1, #1
		val |= addr[1];
  402a10:	bfc4      	itt	gt
  402a12:	7841      	ldrbgt	r1, [r0, #1]
  402a14:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  402a18:	2a02      	cmp	r2, #2
  402a1a:	dd04      	ble.n	402a26 <twi_mk_addr+0x1e>
		val |= addr[2];
  402a1c:	7882      	ldrb	r2, [r0, #2]
  402a1e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  402a22:	e000      	b.n	402a26 <twi_mk_addr+0x1e>
		return 0;
  402a24:	2300      	movs	r3, #0
}
  402a26:	4618      	mov	r0, r3
  402a28:	4770      	bx	lr
	...

00402a2c <twi_master_read>:
{
  402a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  402a2e:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  402a30:	2c00      	cmp	r4, #0
  402a32:	d04f      	beq.n	402ad4 <twi_master_read+0xa8>
  402a34:	460b      	mov	r3, r1
  402a36:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  402a38:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  402a3a:	2000      	movs	r0, #0
  402a3c:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  402a3e:	684a      	ldr	r2, [r1, #4]
  402a40:	0212      	lsls	r2, r2, #8
  402a42:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  402a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  402a4a:	7c09      	ldrb	r1, [r1, #16]
  402a4c:	0409      	lsls	r1, r1, #16
  402a4e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  402a52:	430a      	orrs	r2, r1
  402a54:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  402a56:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  402a58:	6859      	ldr	r1, [r3, #4]
  402a5a:	4618      	mov	r0, r3
  402a5c:	4b22      	ldr	r3, [pc, #136]	; (402ae8 <twi_master_read+0xbc>)
  402a5e:	4798      	blx	r3
  402a60:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  402a62:	2c01      	cmp	r4, #1
  402a64:	d00f      	beq.n	402a86 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  402a66:	2301      	movs	r3, #1
  402a68:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  402a6a:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  402a6c:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  402a6e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402a72:	d136      	bne.n	402ae2 <twi_master_read+0xb6>
  402a74:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  402a78:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  402a7c:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  402a80:	f04f 0c02 	mov.w	ip, #2
  402a84:	e019      	b.n	402aba <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  402a86:	2303      	movs	r3, #3
  402a88:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  402a8a:	2001      	movs	r0, #1
  402a8c:	e7ee      	b.n	402a6c <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  402a8e:	460a      	mov	r2, r1
  402a90:	4670      	mov	r0, lr
  402a92:	e00c      	b.n	402aae <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  402a94:	b908      	cbnz	r0, 402a9a <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  402a96:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  402a9a:	f013 0f02 	tst.w	r3, #2
  402a9e:	d0f6      	beq.n	402a8e <twi_master_read+0x62>
  402aa0:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  402aa2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402aa4:	7033      	strb	r3, [r6, #0]
		cnt--;
  402aa6:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  402aa8:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  402aaa:	463a      	mov	r2, r7
	while (cnt > 0) {
  402aac:	b164      	cbz	r4, 402ac8 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  402aae:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  402ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
  402ab4:	d111      	bne.n	402ada <twi_master_read+0xae>
		if (!timeout--) {
  402ab6:	1e51      	subs	r1, r2, #1
  402ab8:	b18a      	cbz	r2, 402ade <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
  402aba:	2c01      	cmp	r4, #1
  402abc:	d0ea      	beq.n	402a94 <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  402abe:	f013 0f02 	tst.w	r3, #2
  402ac2:	d1ee      	bne.n	402aa2 <twi_master_read+0x76>
  402ac4:	460a      	mov	r2, r1
  402ac6:	e7f1      	b.n	402aac <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  402ac8:	6a2b      	ldr	r3, [r5, #32]
  402aca:	f013 0f01 	tst.w	r3, #1
  402ace:	d0fb      	beq.n	402ac8 <twi_master_read+0x9c>
	p_twi->TWI_SR;
  402ad0:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
  402ad2:	e000      	b.n	402ad6 <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
  402ad4:	2401      	movs	r4, #1
}
  402ad6:	4620      	mov	r0, r4
  402ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  402ada:	2405      	movs	r4, #5
  402adc:	e7fb      	b.n	402ad6 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
  402ade:	2409      	movs	r4, #9
  402ae0:	e7f9      	b.n	402ad6 <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
  402ae2:	2405      	movs	r4, #5
  402ae4:	e7f7      	b.n	402ad6 <twi_master_read+0xaa>
  402ae6:	bf00      	nop
  402ae8:	00402a09 	.word	0x00402a09

00402aec <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402aec:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402aee:	23ac      	movs	r3, #172	; 0xac
  402af0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402af2:	680b      	ldr	r3, [r1, #0]
  402af4:	684a      	ldr	r2, [r1, #4]
  402af6:	fbb3 f3f2 	udiv	r3, r3, r2
  402afa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402afc:	1e5c      	subs	r4, r3, #1
  402afe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402b02:	4294      	cmp	r4, r2
  402b04:	d80b      	bhi.n	402b1e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  402b06:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402b08:	688b      	ldr	r3, [r1, #8]
  402b0a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402b0c:	f240 2302 	movw	r3, #514	; 0x202
  402b10:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402b14:	2350      	movs	r3, #80	; 0x50
  402b16:	6003      	str	r3, [r0, #0]

	return 0;
  402b18:	2000      	movs	r0, #0
}
  402b1a:	bc10      	pop	{r4}
  402b1c:	4770      	bx	lr
		return 1;
  402b1e:	2001      	movs	r0, #1
  402b20:	e7fb      	b.n	402b1a <uart_init+0x2e>

00402b22 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402b22:	2340      	movs	r3, #64	; 0x40
  402b24:	6003      	str	r3, [r0, #0]
  402b26:	4770      	bx	lr

00402b28 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402b28:	2310      	movs	r3, #16
  402b2a:	6003      	str	r3, [r0, #0]
  402b2c:	4770      	bx	lr

00402b2e <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  402b2e:	6940      	ldr	r0, [r0, #20]
}
  402b30:	4770      	bx	lr

00402b32 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402b32:	6943      	ldr	r3, [r0, #20]
  402b34:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402b38:	bf1a      	itte	ne
  402b3a:	61c1      	strne	r1, [r0, #28]
	return 0;
  402b3c:	2000      	movne	r0, #0
		return 1;
  402b3e:	2001      	moveq	r0, #1
}
  402b40:	4770      	bx	lr

00402b42 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402b42:	6943      	ldr	r3, [r0, #20]
  402b44:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402b48:	bf1d      	ittte	ne
  402b4a:	6983      	ldrne	r3, [r0, #24]
  402b4c:	700b      	strbne	r3, [r1, #0]
	return 0;
  402b4e:	2000      	movne	r0, #0
		return 1;
  402b50:	2001      	moveq	r0, #1
}
  402b52:	4770      	bx	lr

00402b54 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402b54:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402b56:	010b      	lsls	r3, r1, #4
  402b58:	4293      	cmp	r3, r2
  402b5a:	d914      	bls.n	402b86 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402b5c:	00c9      	lsls	r1, r1, #3
  402b5e:	084b      	lsrs	r3, r1, #1
  402b60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402b64:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  402b68:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402b6a:	1e5c      	subs	r4, r3, #1
  402b6c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402b70:	428c      	cmp	r4, r1
  402b72:	d901      	bls.n	402b78 <usart_set_async_baudrate+0x24>
		return 1;
  402b74:	2001      	movs	r0, #1
  402b76:	e017      	b.n	402ba8 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  402b78:	6841      	ldr	r1, [r0, #4]
  402b7a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402b7e:	6041      	str	r1, [r0, #4]
  402b80:	e00c      	b.n	402b9c <usart_set_async_baudrate+0x48>
		return 1;
  402b82:	2001      	movs	r0, #1
  402b84:	e010      	b.n	402ba8 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402b86:	0859      	lsrs	r1, r3, #1
  402b88:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  402b8c:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  402b90:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402b92:	1e5c      	subs	r4, r3, #1
  402b94:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402b98:	428c      	cmp	r4, r1
  402b9a:	d8f2      	bhi.n	402b82 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402b9c:	0412      	lsls	r2, r2, #16
  402b9e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402ba2:	431a      	orrs	r2, r3
  402ba4:	6202      	str	r2, [r0, #32]

	return 0;
  402ba6:	2000      	movs	r0, #0
}
  402ba8:	bc10      	pop	{r4}
  402baa:	4770      	bx	lr

00402bac <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402bac:	4b0a      	ldr	r3, [pc, #40]	; (402bd8 <usart_reset+0x2c>)
  402bae:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  402bb2:	2300      	movs	r3, #0
  402bb4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  402bb6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402bb8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402bba:	2388      	movs	r3, #136	; 0x88
  402bbc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402bbe:	2324      	movs	r3, #36	; 0x24
  402bc0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  402bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
  402bc6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  402bc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402bcc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
  402bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  402bd2:	6003      	str	r3, [r0, #0]
  402bd4:	4770      	bx	lr
  402bd6:	bf00      	nop
  402bd8:	55534100 	.word	0x55534100

00402bdc <usart_init_rs232>:
{
  402bdc:	b570      	push	{r4, r5, r6, lr}
  402bde:	4605      	mov	r5, r0
  402be0:	460c      	mov	r4, r1
  402be2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  402be4:	4b0f      	ldr	r3, [pc, #60]	; (402c24 <usart_init_rs232+0x48>)
  402be6:	4798      	blx	r3
	ul_reg_val = 0;
  402be8:	2200      	movs	r2, #0
  402bea:	4b0f      	ldr	r3, [pc, #60]	; (402c28 <usart_init_rs232+0x4c>)
  402bec:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  402bee:	b1a4      	cbz	r4, 402c1a <usart_init_rs232+0x3e>
  402bf0:	4632      	mov	r2, r6
  402bf2:	6821      	ldr	r1, [r4, #0]
  402bf4:	4628      	mov	r0, r5
  402bf6:	4b0d      	ldr	r3, [pc, #52]	; (402c2c <usart_init_rs232+0x50>)
  402bf8:	4798      	blx	r3
  402bfa:	4602      	mov	r2, r0
  402bfc:	b978      	cbnz	r0, 402c1e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402bfe:	6863      	ldr	r3, [r4, #4]
  402c00:	68a1      	ldr	r1, [r4, #8]
  402c02:	430b      	orrs	r3, r1
  402c04:	6921      	ldr	r1, [r4, #16]
  402c06:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402c08:	68e1      	ldr	r1, [r4, #12]
  402c0a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402c0c:	4906      	ldr	r1, [pc, #24]	; (402c28 <usart_init_rs232+0x4c>)
  402c0e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  402c10:	6869      	ldr	r1, [r5, #4]
  402c12:	430b      	orrs	r3, r1
  402c14:	606b      	str	r3, [r5, #4]
}
  402c16:	4610      	mov	r0, r2
  402c18:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  402c1a:	2201      	movs	r2, #1
  402c1c:	e7fb      	b.n	402c16 <usart_init_rs232+0x3a>
  402c1e:	2201      	movs	r2, #1
  402c20:	e7f9      	b.n	402c16 <usart_init_rs232+0x3a>
  402c22:	bf00      	nop
  402c24:	00402bad 	.word	0x00402bad
  402c28:	200010f8 	.word	0x200010f8
  402c2c:	00402b55 	.word	0x00402b55

00402c30 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402c30:	2340      	movs	r3, #64	; 0x40
  402c32:	6003      	str	r3, [r0, #0]
  402c34:	4770      	bx	lr

00402c36 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402c36:	2310      	movs	r3, #16
  402c38:	6003      	str	r3, [r0, #0]
  402c3a:	4770      	bx	lr

00402c3c <usart_get_status>:
	return p_usart->US_CSR;
  402c3c:	6940      	ldr	r0, [r0, #20]
}
  402c3e:	4770      	bx	lr

00402c40 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402c40:	6943      	ldr	r3, [r0, #20]
  402c42:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
  402c46:	bf1d      	ittte	ne
  402c48:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402c4c:	61c1      	strne	r1, [r0, #28]
	return 0;
  402c4e:	2000      	movne	r0, #0
		return 1;
  402c50:	2001      	moveq	r0, #1
}
  402c52:	4770      	bx	lr

00402c54 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402c54:	6943      	ldr	r3, [r0, #20]
  402c56:	f013 0f01 	tst.w	r3, #1
  402c5a:	d005      	beq.n	402c68 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402c5c:	6983      	ldr	r3, [r0, #24]
  402c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402c62:	600b      	str	r3, [r1, #0]
	return 0;
  402c64:	2000      	movs	r0, #0
  402c66:	4770      	bx	lr
		return 1;
  402c68:	2001      	movs	r0, #1
}
  402c6a:	4770      	bx	lr

00402c6c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402c70:	6043      	str	r3, [r0, #4]
  402c72:	4770      	bx	lr

00402c74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402c74:	e7fe      	b.n	402c74 <Dummy_Handler>
	...

00402c78 <Reset_Handler>:
{
  402c78:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  402c7a:	4b21      	ldr	r3, [pc, #132]	; (402d00 <Reset_Handler+0x88>)
  402c7c:	4a21      	ldr	r2, [pc, #132]	; (402d04 <Reset_Handler+0x8c>)
  402c7e:	429a      	cmp	r2, r3
  402c80:	d928      	bls.n	402cd4 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  402c82:	4b21      	ldr	r3, [pc, #132]	; (402d08 <Reset_Handler+0x90>)
  402c84:	4a1e      	ldr	r2, [pc, #120]	; (402d00 <Reset_Handler+0x88>)
  402c86:	429a      	cmp	r2, r3
  402c88:	d20c      	bcs.n	402ca4 <Reset_Handler+0x2c>
  402c8a:	3b01      	subs	r3, #1
  402c8c:	1a9b      	subs	r3, r3, r2
  402c8e:	f023 0303 	bic.w	r3, r3, #3
  402c92:	3304      	adds	r3, #4
  402c94:	4413      	add	r3, r2
  402c96:	491b      	ldr	r1, [pc, #108]	; (402d04 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  402c98:	f851 0b04 	ldr.w	r0, [r1], #4
  402c9c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  402ca0:	429a      	cmp	r2, r3
  402ca2:	d1f9      	bne.n	402c98 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402ca4:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  402ca6:	4b19      	ldr	r3, [pc, #100]	; (402d0c <Reset_Handler+0x94>)
  402ca8:	4a19      	ldr	r2, [pc, #100]	; (402d10 <Reset_Handler+0x98>)
  402caa:	429a      	cmp	r2, r3
  402cac:	d20a      	bcs.n	402cc4 <Reset_Handler+0x4c>
  402cae:	3b01      	subs	r3, #1
  402cb0:	1a9b      	subs	r3, r3, r2
  402cb2:	f023 0303 	bic.w	r3, r3, #3
  402cb6:	3304      	adds	r3, #4
  402cb8:	4413      	add	r3, r2
		*pDest++ = 0;
  402cba:	2100      	movs	r1, #0
  402cbc:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  402cc0:	429a      	cmp	r2, r3
  402cc2:	d1fb      	bne.n	402cbc <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  402cc4:	4b13      	ldr	r3, [pc, #76]	; (402d14 <Reset_Handler+0x9c>)
  402cc6:	4a14      	ldr	r2, [pc, #80]	; (402d18 <Reset_Handler+0xa0>)
  402cc8:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  402cca:	4b14      	ldr	r3, [pc, #80]	; (402d1c <Reset_Handler+0xa4>)
  402ccc:	4798      	blx	r3
	main();
  402cce:	4b14      	ldr	r3, [pc, #80]	; (402d20 <Reset_Handler+0xa8>)
  402cd0:	4798      	blx	r3
  402cd2:	e7fe      	b.n	402cd2 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  402cd4:	4b0a      	ldr	r3, [pc, #40]	; (402d00 <Reset_Handler+0x88>)
  402cd6:	4a0b      	ldr	r2, [pc, #44]	; (402d04 <Reset_Handler+0x8c>)
  402cd8:	429a      	cmp	r2, r3
  402cda:	d2e3      	bcs.n	402ca4 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402cdc:	4b0a      	ldr	r3, [pc, #40]	; (402d08 <Reset_Handler+0x90>)
  402cde:	4808      	ldr	r0, [pc, #32]	; (402d00 <Reset_Handler+0x88>)
  402ce0:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402ce2:	4611      	mov	r1, r2
  402ce4:	3a04      	subs	r2, #4
  402ce6:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  402ce8:	2800      	cmp	r0, #0
  402cea:	d0db      	beq.n	402ca4 <Reset_Handler+0x2c>
  402cec:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  402cf0:	f852 0904 	ldr.w	r0, [r2], #-4
  402cf4:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  402cf8:	42ca      	cmn	r2, r1
  402cfa:	d1f9      	bne.n	402cf0 <Reset_Handler+0x78>
  402cfc:	e7d2      	b.n	402ca4 <Reset_Handler+0x2c>
  402cfe:	bf00      	nop
  402d00:	20000000 	.word	0x20000000
  402d04:	00407fac 	.word	0x00407fac
  402d08:	20000e08 	.word	0x20000e08
  402d0c:	200011d8 	.word	0x200011d8
  402d10:	20000e08 	.word	0x20000e08
  402d14:	e000ed00 	.word	0xe000ed00
  402d18:	00400000 	.word	0x00400000
  402d1c:	00403db5 	.word	0x00403db5
  402d20:	00402fc1 	.word	0x00402fc1

00402d24 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402d24:	4b3c      	ldr	r3, [pc, #240]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d28:	f003 0303 	and.w	r3, r3, #3
  402d2c:	2b03      	cmp	r3, #3
  402d2e:	d80e      	bhi.n	402d4e <SystemCoreClockUpdate+0x2a>
  402d30:	e8df f003 	tbb	[pc, r3]
  402d34:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402d38:	4b38      	ldr	r3, [pc, #224]	; (402e1c <SystemCoreClockUpdate+0xf8>)
  402d3a:	695b      	ldr	r3, [r3, #20]
  402d3c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402d40:	bf14      	ite	ne
  402d42:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402d46:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402d4a:	4b35      	ldr	r3, [pc, #212]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402d4c:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402d4e:	4b32      	ldr	r3, [pc, #200]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d56:	2b70      	cmp	r3, #112	; 0x70
  402d58:	d055      	beq.n	402e06 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402d5a:	4b2f      	ldr	r3, [pc, #188]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  402d5e:	4930      	ldr	r1, [pc, #192]	; (402e20 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402d60:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  402d64:	680b      	ldr	r3, [r1, #0]
  402d66:	40d3      	lsrs	r3, r2
  402d68:	600b      	str	r3, [r1, #0]
  402d6a:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402d6c:	4b2a      	ldr	r3, [pc, #168]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402d6e:	6a1b      	ldr	r3, [r3, #32]
  402d70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402d74:	d003      	beq.n	402d7e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402d76:	4a2b      	ldr	r2, [pc, #172]	; (402e24 <SystemCoreClockUpdate+0x100>)
  402d78:	4b29      	ldr	r3, [pc, #164]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402d7a:	601a      	str	r2, [r3, #0]
  402d7c:	e7e7      	b.n	402d4e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d7e:	4a2a      	ldr	r2, [pc, #168]	; (402e28 <SystemCoreClockUpdate+0x104>)
  402d80:	4b27      	ldr	r3, [pc, #156]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402d82:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402d84:	4b24      	ldr	r3, [pc, #144]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402d86:	6a1b      	ldr	r3, [r3, #32]
  402d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d8c:	2b10      	cmp	r3, #16
  402d8e:	d005      	beq.n	402d9c <SystemCoreClockUpdate+0x78>
  402d90:	2b20      	cmp	r3, #32
  402d92:	d1dc      	bne.n	402d4e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402d94:	4a23      	ldr	r2, [pc, #140]	; (402e24 <SystemCoreClockUpdate+0x100>)
  402d96:	4b22      	ldr	r3, [pc, #136]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402d98:	601a      	str	r2, [r3, #0]
			break;
  402d9a:	e7d8      	b.n	402d4e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402d9c:	4a23      	ldr	r2, [pc, #140]	; (402e2c <SystemCoreClockUpdate+0x108>)
  402d9e:	4b20      	ldr	r3, [pc, #128]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402da0:	601a      	str	r2, [r3, #0]
			break;
  402da2:	e7d4      	b.n	402d4e <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402da4:	4b1c      	ldr	r3, [pc, #112]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402da6:	6a1b      	ldr	r3, [r3, #32]
  402da8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402dac:	d018      	beq.n	402de0 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402dae:	4a1d      	ldr	r2, [pc, #116]	; (402e24 <SystemCoreClockUpdate+0x100>)
  402db0:	4b1b      	ldr	r3, [pc, #108]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402db2:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402db4:	4b18      	ldr	r3, [pc, #96]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402db8:	f003 0303 	and.w	r3, r3, #3
  402dbc:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402dbe:	4a16      	ldr	r2, [pc, #88]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402dc0:	bf07      	ittee	eq
  402dc2:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402dc4:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402dc6:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402dc8:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402dca:	4815      	ldr	r0, [pc, #84]	; (402e20 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402dcc:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402dd0:	6803      	ldr	r3, [r0, #0]
  402dd2:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  402dd6:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402dd8:	fbb3 f3f2 	udiv	r3, r3, r2
  402ddc:	6003      	str	r3, [r0, #0]
  402dde:	e7b6      	b.n	402d4e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402de0:	4a11      	ldr	r2, [pc, #68]	; (402e28 <SystemCoreClockUpdate+0x104>)
  402de2:	4b0f      	ldr	r3, [pc, #60]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402de4:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402de6:	4b0c      	ldr	r3, [pc, #48]	; (402e18 <SystemCoreClockUpdate+0xf4>)
  402de8:	6a1b      	ldr	r3, [r3, #32]
  402dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402dee:	2b10      	cmp	r3, #16
  402df0:	d005      	beq.n	402dfe <SystemCoreClockUpdate+0xda>
  402df2:	2b20      	cmp	r3, #32
  402df4:	d1de      	bne.n	402db4 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402df6:	4a0b      	ldr	r2, [pc, #44]	; (402e24 <SystemCoreClockUpdate+0x100>)
  402df8:	4b09      	ldr	r3, [pc, #36]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402dfa:	601a      	str	r2, [r3, #0]
					break;
  402dfc:	e7da      	b.n	402db4 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402dfe:	4a0b      	ldr	r2, [pc, #44]	; (402e2c <SystemCoreClockUpdate+0x108>)
  402e00:	4b07      	ldr	r3, [pc, #28]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402e02:	601a      	str	r2, [r3, #0]
					break;
  402e04:	e7d6      	b.n	402db4 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  402e06:	4a06      	ldr	r2, [pc, #24]	; (402e20 <SystemCoreClockUpdate+0xfc>)
  402e08:	6813      	ldr	r3, [r2, #0]
  402e0a:	4909      	ldr	r1, [pc, #36]	; (402e30 <SystemCoreClockUpdate+0x10c>)
  402e0c:	fba1 1303 	umull	r1, r3, r1, r3
  402e10:	085b      	lsrs	r3, r3, #1
  402e12:	6013      	str	r3, [r2, #0]
  402e14:	4770      	bx	lr
  402e16:	bf00      	nop
  402e18:	400e0400 	.word	0x400e0400
  402e1c:	400e1410 	.word	0x400e1410
  402e20:	20000450 	.word	0x20000450
  402e24:	00b71b00 	.word	0x00b71b00
  402e28:	003d0900 	.word	0x003d0900
  402e2c:	007a1200 	.word	0x007a1200
  402e30:	aaaaaaab 	.word	0xaaaaaaab

00402e34 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402e34:	4b1a      	ldr	r3, [pc, #104]	; (402ea0 <system_init_flash+0x6c>)
  402e36:	4298      	cmp	r0, r3
  402e38:	d914      	bls.n	402e64 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402e3a:	4b1a      	ldr	r3, [pc, #104]	; (402ea4 <system_init_flash+0x70>)
  402e3c:	4298      	cmp	r0, r3
  402e3e:	d919      	bls.n	402e74 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402e40:	4b19      	ldr	r3, [pc, #100]	; (402ea8 <system_init_flash+0x74>)
  402e42:	4298      	cmp	r0, r3
  402e44:	d91d      	bls.n	402e82 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402e46:	4b19      	ldr	r3, [pc, #100]	; (402eac <system_init_flash+0x78>)
  402e48:	4298      	cmp	r0, r3
  402e4a:	d921      	bls.n	402e90 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402e4c:	4b18      	ldr	r3, [pc, #96]	; (402eb0 <system_init_flash+0x7c>)
  402e4e:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402e50:	bf94      	ite	ls
  402e52:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402e56:	4b17      	ldrhi	r3, [pc, #92]	; (402eb4 <system_init_flash+0x80>)
  402e58:	4a17      	ldr	r2, [pc, #92]	; (402eb8 <system_init_flash+0x84>)
  402e5a:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402e5c:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402e60:	6013      	str	r3, [r2, #0]
  402e62:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402e64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  402e68:	4a13      	ldr	r2, [pc, #76]	; (402eb8 <system_init_flash+0x84>)
  402e6a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402e6c:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402e70:	6013      	str	r3, [r2, #0]
  402e72:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402e74:	4b11      	ldr	r3, [pc, #68]	; (402ebc <system_init_flash+0x88>)
  402e76:	4a10      	ldr	r2, [pc, #64]	; (402eb8 <system_init_flash+0x84>)
  402e78:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402e7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402e7e:	6013      	str	r3, [r2, #0]
  402e80:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402e82:	4b0f      	ldr	r3, [pc, #60]	; (402ec0 <system_init_flash+0x8c>)
  402e84:	4a0c      	ldr	r2, [pc, #48]	; (402eb8 <system_init_flash+0x84>)
  402e86:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402e88:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402e8c:	6013      	str	r3, [r2, #0]
  402e8e:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402e90:	4b0c      	ldr	r3, [pc, #48]	; (402ec4 <system_init_flash+0x90>)
  402e92:	4a09      	ldr	r2, [pc, #36]	; (402eb8 <system_init_flash+0x84>)
  402e94:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402e96:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402e9a:	6013      	str	r3, [r2, #0]
  402e9c:	4770      	bx	lr
  402e9e:	bf00      	nop
  402ea0:	01312cff 	.word	0x01312cff
  402ea4:	026259ff 	.word	0x026259ff
  402ea8:	039386ff 	.word	0x039386ff
  402eac:	04c4b3ff 	.word	0x04c4b3ff
  402eb0:	05f5e0ff 	.word	0x05f5e0ff
  402eb4:	04000500 	.word	0x04000500
  402eb8:	400e0a00 	.word	0x400e0a00
  402ebc:	04000100 	.word	0x04000100
  402ec0:	04000200 	.word	0x04000200
  402ec4:	04000300 	.word	0x04000300

00402ec8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402ec8:	4b0a      	ldr	r3, [pc, #40]	; (402ef4 <_sbrk+0x2c>)
  402eca:	681b      	ldr	r3, [r3, #0]
  402ecc:	b153      	cbz	r3, 402ee4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402ece:	4b09      	ldr	r3, [pc, #36]	; (402ef4 <_sbrk+0x2c>)
  402ed0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402ed2:	181a      	adds	r2, r3, r0
  402ed4:	4908      	ldr	r1, [pc, #32]	; (402ef8 <_sbrk+0x30>)
  402ed6:	4291      	cmp	r1, r2
  402ed8:	db08      	blt.n	402eec <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402eda:	4610      	mov	r0, r2
  402edc:	4a05      	ldr	r2, [pc, #20]	; (402ef4 <_sbrk+0x2c>)
  402ede:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402ee0:	4618      	mov	r0, r3
  402ee2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402ee4:	4a05      	ldr	r2, [pc, #20]	; (402efc <_sbrk+0x34>)
  402ee6:	4b03      	ldr	r3, [pc, #12]	; (402ef4 <_sbrk+0x2c>)
  402ee8:	601a      	str	r2, [r3, #0]
  402eea:	e7f0      	b.n	402ece <_sbrk+0x6>
		return (caddr_t) -1;	
  402eec:	f04f 30ff 	mov.w	r0, #4294967295
}
  402ef0:	4770      	bx	lr
  402ef2:	bf00      	nop
  402ef4:	200010fc 	.word	0x200010fc
  402ef8:	20013ffc 	.word	0x20013ffc
  402efc:	200041d8 	.word	0x200041d8

00402f00 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402f00:	2807      	cmp	r0, #7
  402f02:	d901      	bls.n	402f08 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  402f04:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402f06:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  402f08:	4b06      	ldr	r3, [pc, #24]	; (402f24 <f_mount+0x24>)
  402f0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  402f0e:	b10b      	cbz	r3, 402f14 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  402f10:	2200      	movs	r2, #0
  402f12:	701a      	strb	r2, [r3, #0]
	if (fs) {
  402f14:	b109      	cbz	r1, 402f1a <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  402f16:	2300      	movs	r3, #0
  402f18:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  402f1a:	4b02      	ldr	r3, [pc, #8]	; (402f24 <f_mount+0x24>)
  402f1c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  402f20:	2000      	movs	r0, #0
  402f22:	4770      	bx	lr
  402f24:	20001100 	.word	0x20001100

00402f28 <button_callback>:
	}
}

void button_callback (tButtonNum b)
{
	button_pressed = true;
  402f28:	2201      	movs	r2, #1
  402f2a:	4b02      	ldr	r3, [pc, #8]	; (402f34 <button_callback+0xc>)
  402f2c:	701a      	strb	r2, [r3, #0]
	seleced_button = b;
  402f2e:	4b02      	ldr	r3, [pc, #8]	; (402f38 <button_callback+0x10>)
  402f30:	6018      	str	r0, [r3, #0]
  402f32:	4770      	bx	lr
  402f34:	20001120 	.word	0x20001120
  402f38:	2000116c 	.word	0x2000116c

00402f3c <move_aliens>:
}

void move_aliens ()
{
  402f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//move all the aliens in a sort of zig zag movement
	bool move_down = aliens_at_top;
  402f40:	4b0e      	ldr	r3, [pc, #56]	; (402f7c <move_aliens+0x40>)
  402f42:	781d      	ldrb	r5, [r3, #0]
  402f44:	4c0e      	ldr	r4, [pc, #56]	; (402f80 <move_aliens+0x44>)
  402f46:	f104 073c 	add.w	r7, r4, #60	; 0x3c
		{
			// move alien down
			move_shape_down(aliens[i]);
		} else {
			// else move it up
			move_shape_up(aliens[i]);
  402f4a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 402f88 <move_aliens+0x4c>
			move_shape_down(aliens[i]);
  402f4e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 402f8c <move_aliens+0x50>
		}
		// and move the aliens to left
		move_shape_left(aliens[i]);
  402f52:	4e0c      	ldr	r6, [pc, #48]	; (402f84 <move_aliens+0x48>)
  402f54:	e006      	b.n	402f64 <move_aliens+0x28>
			move_shape_up(aliens[i]);
  402f56:	6820      	ldr	r0, [r4, #0]
  402f58:	47c8      	blx	r9
		move_shape_left(aliens[i]);
  402f5a:	f854 0b04 	ldr.w	r0, [r4], #4
  402f5e:	47b0      	blx	r6
	for (uint16_t i = 0; i<ALIEN_NUM; i++)
  402f60:	42bc      	cmp	r4, r7
  402f62:	d004      	beq.n	402f6e <move_aliens+0x32>
		if (move_down)
  402f64:	2d00      	cmp	r5, #0
  402f66:	d0f6      	beq.n	402f56 <move_aliens+0x1a>
			move_shape_down(aliens[i]);
  402f68:	6820      	ldr	r0, [r4, #0]
  402f6a:	47c0      	blx	r8
  402f6c:	e7f5      	b.n	402f5a <move_aliens+0x1e>
	}
	aliens_at_top = !move_down;
  402f6e:	f085 0501 	eor.w	r5, r5, #1
  402f72:	4b02      	ldr	r3, [pc, #8]	; (402f7c <move_aliens+0x40>)
  402f74:	701d      	strb	r5, [r3, #0]
  402f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f7a:	bf00      	nop
  402f7c:	20000454 	.word	0x20000454
  402f80:	20001170 	.word	0x20001170
  402f84:	00400e35 	.word	0x00400e35
  402f88:	00400e2b 	.word	0x00400e2b
  402f8c:	00400e1d 	.word	0x00400e1d

00402f90 <print_string>:
}

void print_string (uint8_t* string)
{
  402f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f94:	4606      	mov	r6, r0
  402f96:	1e45      	subs	r5, r0, #1
	for (uint i = 0; i < strlen(string); i++)	
  402f98:	2400      	movs	r4, #0
  402f9a:	4f07      	ldr	r7, [pc, #28]	; (402fb8 <print_string+0x28>)
	{
		hal_display_putc(string[i]);
  402f9c:	f8df 801c 	ldr.w	r8, [pc, #28]	; 402fbc <print_string+0x2c>
	for (uint i = 0; i < strlen(string); i++)	
  402fa0:	e003      	b.n	402faa <print_string+0x1a>
		hal_display_putc(string[i]);
  402fa2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
  402fa6:	47c0      	blx	r8
	for (uint i = 0; i < strlen(string); i++)	
  402fa8:	3401      	adds	r4, #1
  402faa:	4630      	mov	r0, r6
  402fac:	47b8      	blx	r7
  402fae:	4284      	cmp	r4, r0
  402fb0:	d3f7      	bcc.n	402fa2 <print_string+0x12>
	}
}
  402fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402fb6:	bf00      	nop
  402fb8:	004044c1 	.word	0x004044c1
  402fbc:	004005e9 	.word	0x004005e9

00402fc0 <main>:
{
  402fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fc4:	b091      	sub	sp, #68	; 0x44
	system_init();		
  402fc6:	4b84      	ldr	r3, [pc, #528]	; (4031d8 <main+0x218>)
  402fc8:	4798      	blx	r3
	hal_button_start_int(button_callback);
  402fca:	4884      	ldr	r0, [pc, #528]	; (4031dc <main+0x21c>)
  402fcc:	4b84      	ldr	r3, [pc, #528]	; (4031e0 <main+0x220>)
  402fce:	4798      	blx	r3
		gameover = false;
  402fd0:	f8df b24c 	ldr.w	fp, [pc, #588]	; 403220 <main+0x260>
  402fd4:	f04f 0300 	mov.w	r3, #0
  402fd8:	f88d 300f 	strb.w	r3, [sp, #15]
			draw_shape(aliens[i]);
  402fdc:	f8df 9244 	ldr.w	r9, [pc, #580]	; 403224 <main+0x264>
  402fe0:	e14e      	b.n	403280 <main+0x2c0>
  402fe2:	3703      	adds	r7, #3
  402fe4:	b2bf      	uxth	r7, r7
		for (uint16_t i=10; i<15; i++) {
  402fe6:	9b01      	ldr	r3, [sp, #4]
  402fe8:	3301      	adds	r3, #1
  402fea:	b29b      	uxth	r3, r3
  402fec:	9301      	str	r3, [sp, #4]
  402fee:	2f0f      	cmp	r7, #15
  402ff0:	d014      	beq.n	40301c <main+0x5c>
{
  402ff2:	2500      	movs	r5, #0
  402ff4:	b2ab      	uxth	r3, r5
  402ff6:	18fc      	adds	r4, r7, r3
  402ff8:	b2a4      	uxth	r4, r4
				Alien[k] = make_shape(alien, i, j);
  402ffa:	9a02      	ldr	r2, [sp, #8]
  402ffc:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
  403000:	9a01      	ldr	r2, [sp, #4]
  403002:	2100      	movs	r1, #0
  403004:	a804      	add	r0, sp, #16
  403006:	47d0      	blx	sl
  403008:	4633      	mov	r3, r6
  40300a:	9804      	ldr	r0, [sp, #16]
  40300c:	9905      	ldr	r1, [sp, #20]
  40300e:	c303      	stmia	r3!, {r0, r1}
				aliens[k] = &Alien[k];
  403010:	f848 6024 	str.w	r6, [r8, r4, lsl #2]
  403014:	3501      	adds	r5, #1
			for (uint16_t j=0; j<3; j++) {
  403016:	2d03      	cmp	r5, #3
  403018:	d1ec      	bne.n	402ff4 <main+0x34>
  40301a:	e7e2      	b.n	402fe2 <main+0x22>
		aliens_at_top = true;
  40301c:	2101      	movs	r1, #1
  40301e:	4b71      	ldr	r3, [pc, #452]	; (4031e4 <main+0x224>)
  403020:	7019      	strb	r1, [r3, #0]
		Shape Ship = make_shape(ship, 0, 2);
  403022:	ac07      	add	r4, sp, #28
  403024:	2302      	movs	r3, #2
  403026:	2200      	movs	r2, #0
  403028:	4620      	mov	r0, r4
  40302a:	4d6f      	ldr	r5, [pc, #444]	; (4031e8 <main+0x228>)
  40302c:	47a8      	blx	r5
		spaceship = &Ship;
  40302e:	4b6f      	ldr	r3, [pc, #444]	; (4031ec <main+0x22c>)
  403030:	601c      	str	r4, [r3, #0]
		Shape Bullet = make_shape(bullet, 0, 0);
  403032:	ac09      	add	r4, sp, #36	; 0x24
  403034:	2300      	movs	r3, #0
  403036:	461a      	mov	r2, r3
  403038:	2102      	movs	r1, #2
  40303a:	4620      	mov	r0, r4
  40303c:	47a8      	blx	r5
		bullets = &Bullet;
  40303e:	4b6c      	ldr	r3, [pc, #432]	; (4031f0 <main+0x230>)
  403040:	601c      	str	r4, [r3, #0]
		bullets->exists = false;
  403042:	f89d 300f 	ldrb.w	r3, [sp, #15]
  403046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  40304a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 403228 <main+0x268>
  40304e:	f10a 053c 	add.w	r5, sl, #60	; 0x3c
  403052:	4654      	mov	r4, sl
			draw_shape(aliens[i]);
  403054:	f854 0f04 	ldr.w	r0, [r4, #4]!
  403058:	47c8      	blx	r9
		for (uint16_t i = 0; i < ALIEN_NUM; i++)
  40305a:	42ac      	cmp	r4, r5
  40305c:	d1fa      	bne.n	403054 <main+0x94>
		draw_shape(spaceship);
  40305e:	4b63      	ldr	r3, [pc, #396]	; (4031ec <main+0x22c>)
  403060:	6818      	ldr	r0, [r3, #0]
  403062:	47c8      	blx	r9
		score = 0;
  403064:	4b63      	ldr	r3, [pc, #396]	; (4031f4 <main+0x234>)
  403066:	f04f 0200 	mov.w	r2, #0
  40306a:	801a      	strh	r2, [r3, #0]
		while (!gameover)
  40306c:	e07c      	b.n	403168 <main+0x1a8>
						move_shape_up(spaceship);
  40306e:	4b5f      	ldr	r3, [pc, #380]	; (4031ec <main+0x22c>)
  403070:	6818      	ldr	r0, [r3, #0]
  403072:	4b61      	ldr	r3, [pc, #388]	; (4031f8 <main+0x238>)
  403074:	4798      	blx	r3
						break;
  403076:	e08b      	b.n	403190 <main+0x1d0>
						if (!bullets->exists)
  403078:	4b5d      	ldr	r3, [pc, #372]	; (4031f0 <main+0x230>)
  40307a:	681b      	ldr	r3, [r3, #0]
  40307c:	799a      	ldrb	r2, [r3, #6]
  40307e:	2a00      	cmp	r2, #0
  403080:	f040 8086 	bne.w	403190 <main+0x1d0>
							bullets->exists = true;
  403084:	2201      	movs	r2, #1
  403086:	719a      	strb	r2, [r3, #6]
							bullets->x = spaceship->x + 1;
  403088:	4958      	ldr	r1, [pc, #352]	; (4031ec <main+0x22c>)
  40308a:	680a      	ldr	r2, [r1, #0]
  40308c:	8852      	ldrh	r2, [r2, #2]
  40308e:	3201      	adds	r2, #1
  403090:	805a      	strh	r2, [r3, #2]
							bullets->y = spaceship->y;
  403092:	680b      	ldr	r3, [r1, #0]
  403094:	889a      	ldrh	r2, [r3, #4]
  403096:	4b56      	ldr	r3, [pc, #344]	; (4031f0 <main+0x230>)
  403098:	681b      	ldr	r3, [r3, #0]
  40309a:	809a      	strh	r2, [r3, #4]
  40309c:	e078      	b.n	403190 <main+0x1d0>
						move_shape_down(spaceship);
  40309e:	4b53      	ldr	r3, [pc, #332]	; (4031ec <main+0x22c>)
  4030a0:	6818      	ldr	r0, [r3, #0]
  4030a2:	4b56      	ldr	r3, [pc, #344]	; (4031fc <main+0x23c>)
  4030a4:	4798      	blx	r3
						break;
  4030a6:	e073      	b.n	403190 <main+0x1d0>
				bullets->exists = false;
  4030a8:	f04f 0300 	mov.w	r3, #0
  4030ac:	7183      	strb	r3, [r0, #6]
  4030ae:	e07b      	b.n	4031a8 <main+0x1e8>
				move_shape_right(bullets);
  4030b0:	4b53      	ldr	r3, [pc, #332]	; (403200 <main+0x240>)
  4030b2:	4798      	blx	r3
  4030b4:	e078      	b.n	4031a8 <main+0x1e8>
				move_aliens();
  4030b6:	4b53      	ldr	r3, [pc, #332]	; (403204 <main+0x244>)
  4030b8:	4798      	blx	r3
			update_alien = (update_alien == ALIEN_UPDATE) ? 0 : update_alien + 1;
  4030ba:	4b53      	ldr	r3, [pc, #332]	; (403208 <main+0x248>)
  4030bc:	881b      	ldrh	r3, [r3, #0]
  4030be:	2b05      	cmp	r3, #5
  4030c0:	bf08      	it	eq
  4030c2:	2300      	moveq	r3, #0
  4030c4:	d076      	beq.n	4031b4 <main+0x1f4>
  4030c6:	e073      	b.n	4031b0 <main+0x1f0>
  4030c8:	3304      	adds	r3, #4
			for (uint16_t i = 0; i < ALIEN_NUM; i++)
  4030ca:	428b      	cmp	r3, r1
  4030cc:	d014      	beq.n	4030f8 <main+0x138>
				if (bullets->exists && (current_alien->x == bullets->x) && (current_alien->y == bullets->y) && current_alien->exists)
  4030ce:	2800      	cmp	r0, #0
  4030d0:	d0fa      	beq.n	4030c8 <main+0x108>
				Shape* current_alien = aliens[i];
  4030d2:	681a      	ldr	r2, [r3, #0]
				if (bullets->exists && (current_alien->x == bullets->x) && (current_alien->y == bullets->y) && current_alien->exists)
  4030d4:	8857      	ldrh	r7, [r2, #2]
  4030d6:	f8be 5002 	ldrh.w	r5, [lr, #2]
  4030da:	42af      	cmp	r7, r5
  4030dc:	d1f4      	bne.n	4030c8 <main+0x108>
  4030de:	8897      	ldrh	r7, [r2, #4]
  4030e0:	f8be 5004 	ldrh.w	r5, [lr, #4]
  4030e4:	42af      	cmp	r7, r5
  4030e6:	d1ef      	bne.n	4030c8 <main+0x108>
  4030e8:	7995      	ldrb	r5, [r2, #6]
					collided_alien = current_alien;
  4030ea:	2d00      	cmp	r5, #0
  4030ec:	bf18      	it	ne
  4030ee:	4690      	movne	r8, r2
  4030f0:	2d00      	cmp	r5, #0
  4030f2:	bf18      	it	ne
  4030f4:	46ac      	movne	ip, r5
  4030f6:	e7e7      	b.n	4030c8 <main+0x108>
			if (collision_found)
  4030f8:	f1bc 0f00 	cmp.w	ip, #0
  4030fc:	d009      	beq.n	403112 <main+0x152>
				collided_alien->exists = false;
  4030fe:	f04f 0300 	mov.w	r3, #0
  403102:	f888 3006 	strb.w	r3, [r8, #6]
				bullets->exists = false;
  403106:	f88e 3006 	strb.w	r3, [lr, #6]
				score += 10;
  40310a:	4a3a      	ldr	r2, [pc, #232]	; (4031f4 <main+0x234>)
  40310c:	8813      	ldrh	r3, [r2, #0]
  40310e:	330a      	adds	r3, #10
  403110:	8013      	strh	r3, [r2, #0]
			hal_display_cls();
  403112:	4b3e      	ldr	r3, [pc, #248]	; (40320c <main+0x24c>)
  403114:	4798      	blx	r3
  403116:	4655      	mov	r5, sl
  403118:	e001      	b.n	40311e <main+0x15e>
			for (uint16_t i = 0; i < 15; i++)
  40311a:	42a5      	cmp	r5, r4
  40311c:	d006      	beq.n	40312c <main+0x16c>
				if (aliens[i]->exists)
  40311e:	f855 0f04 	ldr.w	r0, [r5, #4]!
  403122:	7983      	ldrb	r3, [r0, #6]
  403124:	2b00      	cmp	r3, #0
  403126:	d0f8      	beq.n	40311a <main+0x15a>
					draw_shape(aliens[i]);
  403128:	47c8      	blx	r9
  40312a:	e7f6      	b.n	40311a <main+0x15a>
			draw_shape(spaceship);
  40312c:	4b2f      	ldr	r3, [pc, #188]	; (4031ec <main+0x22c>)
  40312e:	6818      	ldr	r0, [r3, #0]
  403130:	47c8      	blx	r9
			if (bullets->exists)
  403132:	4b2f      	ldr	r3, [pc, #188]	; (4031f0 <main+0x230>)
  403134:	6818      	ldr	r0, [r3, #0]
  403136:	7983      	ldrb	r3, [r0, #6]
  403138:	b91b      	cbnz	r3, 403142 <main+0x182>
  40313a:	f89b 0000 	ldrb.w	r0, [fp]
			hal_display_cls();
  40313e:	4653      	mov	r3, sl
  403140:	e003      	b.n	40314a <main+0x18a>
				draw_shape(bullets);
  403142:	47c8      	blx	r9
  403144:	e7f9      	b.n	40313a <main+0x17a>
		for (uint16_t i = 0; i < ALIEN_NUM; i++)
  403146:	429d      	cmp	r5, r3
  403148:	d00c      	beq.n	403164 <main+0x1a4>
			Shape* current_alien = aliens[i];
  40314a:	f853 2f04 	ldr.w	r2, [r3, #4]!
			if ((current_alien->x == 0) && current_alien->exists)
  40314e:	8851      	ldrh	r1, [r2, #2]
  403150:	2900      	cmp	r1, #0
  403152:	d1f8      	bne.n	403146 <main+0x186>
  403154:	7992      	ldrb	r2, [r2, #6]
  403156:	2a00      	cmp	r2, #0
  403158:	bf18      	it	ne
  40315a:	4616      	movne	r6, r2
  40315c:	2a00      	cmp	r2, #0
  40315e:	bf18      	it	ne
  403160:	4610      	movne	r0, r2
  403162:	e7f0      	b.n	403146 <main+0x186>
  403164:	2e00      	cmp	r6, #0
  403166:	d133      	bne.n	4031d0 <main+0x210>
		while (!gameover)
  403168:	f89b 6000 	ldrb.w	r6, [fp]
  40316c:	2e00      	cmp	r6, #0
  40316e:	d15d      	bne.n	40322c <main+0x26c>
			hal_delay(200);
  403170:	20c8      	movs	r0, #200	; 0xc8
  403172:	4b27      	ldr	r3, [pc, #156]	; (403210 <main+0x250>)
  403174:	4798      	blx	r3
			if (button_pressed)
  403176:	4b27      	ldr	r3, [pc, #156]	; (403214 <main+0x254>)
  403178:	781b      	ldrb	r3, [r3, #0]
  40317a:	b16b      	cbz	r3, 403198 <main+0x1d8>
				switch(seleced_button)
  40317c:	4b26      	ldr	r3, [pc, #152]	; (403218 <main+0x258>)
  40317e:	681b      	ldr	r3, [r3, #0]
  403180:	2b02      	cmp	r3, #2
  403182:	f43f af79 	beq.w	403078 <main+0xb8>
  403186:	2b03      	cmp	r3, #3
  403188:	d089      	beq.n	40309e <main+0xde>
  40318a:	2b01      	cmp	r3, #1
  40318c:	f43f af6f 	beq.w	40306e <main+0xae>
				button_pressed = false;
  403190:	4b20      	ldr	r3, [pc, #128]	; (403214 <main+0x254>)
  403192:	f04f 0200 	mov.w	r2, #0
  403196:	701a      	strb	r2, [r3, #0]
			if (bullets->x == 15)
  403198:	4b15      	ldr	r3, [pc, #84]	; (4031f0 <main+0x230>)
  40319a:	6818      	ldr	r0, [r3, #0]
  40319c:	8843      	ldrh	r3, [r0, #2]
  40319e:	2b0f      	cmp	r3, #15
  4031a0:	d082      	beq.n	4030a8 <main+0xe8>
			if (bullets->exists)
  4031a2:	7983      	ldrb	r3, [r0, #6]
  4031a4:	2b00      	cmp	r3, #0
  4031a6:	d183      	bne.n	4030b0 <main+0xf0>
			if (update_alien == ALIEN_UPDATE)
  4031a8:	4b17      	ldr	r3, [pc, #92]	; (403208 <main+0x248>)
  4031aa:	881b      	ldrh	r3, [r3, #0]
  4031ac:	2b05      	cmp	r3, #5
  4031ae:	d082      	beq.n	4030b6 <main+0xf6>
			update_alien = (update_alien == ALIEN_UPDATE) ? 0 : update_alien + 1;
  4031b0:	3301      	adds	r3, #1
  4031b2:	b29b      	uxth	r3, r3
  4031b4:	4a14      	ldr	r2, [pc, #80]	; (403208 <main+0x248>)
  4031b6:	8013      	strh	r3, [r2, #0]
				if (bullets->exists && (current_alien->x == bullets->x) && (current_alien->y == bullets->y) && current_alien->exists)
  4031b8:	4b0d      	ldr	r3, [pc, #52]	; (4031f0 <main+0x230>)
  4031ba:	f8d3 e000 	ldr.w	lr, [r3]
  4031be:	f89e 0006 	ldrb.w	r0, [lr, #6]
  4031c2:	4b16      	ldr	r3, [pc, #88]	; (40321c <main+0x25c>)
  4031c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
			bool collision_found = false;
  4031c8:	46b4      	mov	ip, r6
			Shape* collided_alien = NULL;
  4031ca:	f04f 0800 	mov.w	r8, #0
  4031ce:	e77e      	b.n	4030ce <main+0x10e>
  4031d0:	f88b 0000 	strb.w	r0, [fp]
  4031d4:	e7c8      	b.n	403168 <main+0x1a8>
  4031d6:	bf00      	nop
  4031d8:	00400d35 	.word	0x00400d35
  4031dc:	00402f29 	.word	0x00402f29
  4031e0:	0040085d 	.word	0x0040085d
  4031e4:	20000454 	.word	0x20000454
  4031e8:	00400db9 	.word	0x00400db9
  4031ec:	200011ac 	.word	0x200011ac
  4031f0:	20001168 	.word	0x20001168
  4031f4:	20001124 	.word	0x20001124
  4031f8:	00400e2b 	.word	0x00400e2b
  4031fc:	00400e1d 	.word	0x00400e1d
  403200:	00400e3f 	.word	0x00400e3f
  403204:	00402f3d 	.word	0x00402f3d
  403208:	20001126 	.word	0x20001126
  40320c:	00400689 	.word	0x00400689
  403210:	004001d1 	.word	0x004001d1
  403214:	20001120 	.word	0x20001120
  403218:	2000116c 	.word	0x2000116c
  40321c:	20001170 	.word	0x20001170
  403220:	20001121 	.word	0x20001121
  403224:	00400ddd 	.word	0x00400ddd
  403228:	2000116c 	.word	0x2000116c
		free(Alien);
  40322c:	9802      	ldr	r0, [sp, #8]
  40322e:	4b1c      	ldr	r3, [pc, #112]	; (4032a0 <main+0x2e0>)
  403230:	4798      	blx	r3
		hal_display_cls();
  403232:	4b1c      	ldr	r3, [pc, #112]	; (4032a4 <main+0x2e4>)
  403234:	4798      	blx	r3
		sprintf(string, "Score: %d", score);
  403236:	4b1c      	ldr	r3, [pc, #112]	; (4032a8 <main+0x2e8>)
  403238:	881a      	ldrh	r2, [r3, #0]
  40323a:	491c      	ldr	r1, [pc, #112]	; (4032ac <main+0x2ec>)
  40323c:	a80b      	add	r0, sp, #44	; 0x2c
  40323e:	4b1c      	ldr	r3, [pc, #112]	; (4032b0 <main+0x2f0>)
  403240:	4798      	blx	r3
		print_string(string);
  403242:	a80b      	add	r0, sp, #44	; 0x2c
  403244:	4b1b      	ldr	r3, [pc, #108]	; (4032b4 <main+0x2f4>)
  403246:	4798      	blx	r3
		while(!button_pressed)
  403248:	4b1b      	ldr	r3, [pc, #108]	; (4032b8 <main+0x2f8>)
  40324a:	781b      	ldrb	r3, [r3, #0]
  40324c:	b9a3      	cbnz	r3, 403278 <main+0x2b8>
			hal_led_write(Led1, !led_state);
  40324e:	4d1b      	ldr	r5, [pc, #108]	; (4032bc <main+0x2fc>)
  403250:	4c1b      	ldr	r4, [pc, #108]	; (4032c0 <main+0x300>)
		while(!button_pressed)
  403252:	4e19      	ldr	r6, [pc, #100]	; (4032b8 <main+0x2f8>)
			hal_led_write(Led1, !led_state);
  403254:	7829      	ldrb	r1, [r5, #0]
  403256:	f081 0101 	eor.w	r1, r1, #1
  40325a:	2001      	movs	r0, #1
  40325c:	47a0      	blx	r4
			hal_led_write(Led2, !led_state);
  40325e:	7829      	ldrb	r1, [r5, #0]
  403260:	f081 0101 	eor.w	r1, r1, #1
  403264:	2002      	movs	r0, #2
  403266:	47a0      	blx	r4
			hal_led_write(Led3, !led_state);
  403268:	7829      	ldrb	r1, [r5, #0]
  40326a:	f081 0101 	eor.w	r1, r1, #1
  40326e:	2003      	movs	r0, #3
  403270:	47a0      	blx	r4
		while(!button_pressed)
  403272:	7833      	ldrb	r3, [r6, #0]
  403274:	2b00      	cmp	r3, #0
  403276:	d0ed      	beq.n	403254 <main+0x294>
		button_pressed = false;
  403278:	4b0f      	ldr	r3, [pc, #60]	; (4032b8 <main+0x2f8>)
  40327a:	f04f 0200 	mov.w	r2, #0
  40327e:	701a      	strb	r2, [r3, #0]
		gameover = false;
  403280:	f89d 300f 	ldrb.w	r3, [sp, #15]
  403284:	f88b 3000 	strb.w	r3, [fp]
		Shape *Alien = malloc(15*sizeof(Shape));
  403288:	2078      	movs	r0, #120	; 0x78
  40328a:	4b0e      	ldr	r3, [pc, #56]	; (4032c4 <main+0x304>)
  40328c:	4798      	blx	r3
  40328e:	9002      	str	r0, [sp, #8]
		for (uint16_t i=10; i<15; i++) {
  403290:	230a      	movs	r3, #10
  403292:	9301      	str	r3, [sp, #4]
		uint16_t k=0;
  403294:	2700      	movs	r7, #0
				Alien[k] = make_shape(alien, i, j);
  403296:	f8df a030 	ldr.w	sl, [pc, #48]	; 4032c8 <main+0x308>
				aliens[k] = &Alien[k];
  40329a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4032cc <main+0x30c>
  40329e:	e6a8      	b.n	402ff2 <main+0x32>
  4032a0:	00403e15 	.word	0x00403e15
  4032a4:	00400689 	.word	0x00400689
  4032a8:	20001124 	.word	0x20001124
  4032ac:	00407ce8 	.word	0x00407ce8
  4032b0:	0040445d 	.word	0x0040445d
  4032b4:	00402f91 	.word	0x00402f91
  4032b8:	20001120 	.word	0x20001120
  4032bc:	20001122 	.word	0x20001122
  4032c0:	004004a5 	.word	0x004004a5
  4032c4:	00403e05 	.word	0x00403e05
  4032c8:	00400db9 	.word	0x00400db9
  4032cc:	20001170 	.word	0x20001170

004032d0 <__aeabi_drsub>:
  4032d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4032d4:	e002      	b.n	4032dc <__adddf3>
  4032d6:	bf00      	nop

004032d8 <__aeabi_dsub>:
  4032d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004032dc <__adddf3>:
  4032dc:	b530      	push	{r4, r5, lr}
  4032de:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4032e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4032e6:	ea94 0f05 	teq	r4, r5
  4032ea:	bf08      	it	eq
  4032ec:	ea90 0f02 	teqeq	r0, r2
  4032f0:	bf1f      	itttt	ne
  4032f2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4032f6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4032fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4032fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403302:	f000 80e2 	beq.w	4034ca <__adddf3+0x1ee>
  403306:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40330a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40330e:	bfb8      	it	lt
  403310:	426d      	neglt	r5, r5
  403312:	dd0c      	ble.n	40332e <__adddf3+0x52>
  403314:	442c      	add	r4, r5
  403316:	ea80 0202 	eor.w	r2, r0, r2
  40331a:	ea81 0303 	eor.w	r3, r1, r3
  40331e:	ea82 0000 	eor.w	r0, r2, r0
  403322:	ea83 0101 	eor.w	r1, r3, r1
  403326:	ea80 0202 	eor.w	r2, r0, r2
  40332a:	ea81 0303 	eor.w	r3, r1, r3
  40332e:	2d36      	cmp	r5, #54	; 0x36
  403330:	bf88      	it	hi
  403332:	bd30      	pophi	{r4, r5, pc}
  403334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403338:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40333c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403344:	d002      	beq.n	40334c <__adddf3+0x70>
  403346:	4240      	negs	r0, r0
  403348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40334c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403350:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403358:	d002      	beq.n	403360 <__adddf3+0x84>
  40335a:	4252      	negs	r2, r2
  40335c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403360:	ea94 0f05 	teq	r4, r5
  403364:	f000 80a7 	beq.w	4034b6 <__adddf3+0x1da>
  403368:	f1a4 0401 	sub.w	r4, r4, #1
  40336c:	f1d5 0e20 	rsbs	lr, r5, #32
  403370:	db0d      	blt.n	40338e <__adddf3+0xb2>
  403372:	fa02 fc0e 	lsl.w	ip, r2, lr
  403376:	fa22 f205 	lsr.w	r2, r2, r5
  40337a:	1880      	adds	r0, r0, r2
  40337c:	f141 0100 	adc.w	r1, r1, #0
  403380:	fa03 f20e 	lsl.w	r2, r3, lr
  403384:	1880      	adds	r0, r0, r2
  403386:	fa43 f305 	asr.w	r3, r3, r5
  40338a:	4159      	adcs	r1, r3
  40338c:	e00e      	b.n	4033ac <__adddf3+0xd0>
  40338e:	f1a5 0520 	sub.w	r5, r5, #32
  403392:	f10e 0e20 	add.w	lr, lr, #32
  403396:	2a01      	cmp	r2, #1
  403398:	fa03 fc0e 	lsl.w	ip, r3, lr
  40339c:	bf28      	it	cs
  40339e:	f04c 0c02 	orrcs.w	ip, ip, #2
  4033a2:	fa43 f305 	asr.w	r3, r3, r5
  4033a6:	18c0      	adds	r0, r0, r3
  4033a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4033ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4033b0:	d507      	bpl.n	4033c2 <__adddf3+0xe6>
  4033b2:	f04f 0e00 	mov.w	lr, #0
  4033b6:	f1dc 0c00 	rsbs	ip, ip, #0
  4033ba:	eb7e 0000 	sbcs.w	r0, lr, r0
  4033be:	eb6e 0101 	sbc.w	r1, lr, r1
  4033c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4033c6:	d31b      	bcc.n	403400 <__adddf3+0x124>
  4033c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4033cc:	d30c      	bcc.n	4033e8 <__adddf3+0x10c>
  4033ce:	0849      	lsrs	r1, r1, #1
  4033d0:	ea5f 0030 	movs.w	r0, r0, rrx
  4033d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4033d8:	f104 0401 	add.w	r4, r4, #1
  4033dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4033e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4033e4:	f080 809a 	bcs.w	40351c <__adddf3+0x240>
  4033e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4033ec:	bf08      	it	eq
  4033ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4033f2:	f150 0000 	adcs.w	r0, r0, #0
  4033f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4033fa:	ea41 0105 	orr.w	r1, r1, r5
  4033fe:	bd30      	pop	{r4, r5, pc}
  403400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403404:	4140      	adcs	r0, r0
  403406:	eb41 0101 	adc.w	r1, r1, r1
  40340a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40340e:	f1a4 0401 	sub.w	r4, r4, #1
  403412:	d1e9      	bne.n	4033e8 <__adddf3+0x10c>
  403414:	f091 0f00 	teq	r1, #0
  403418:	bf04      	itt	eq
  40341a:	4601      	moveq	r1, r0
  40341c:	2000      	moveq	r0, #0
  40341e:	fab1 f381 	clz	r3, r1
  403422:	bf08      	it	eq
  403424:	3320      	addeq	r3, #32
  403426:	f1a3 030b 	sub.w	r3, r3, #11
  40342a:	f1b3 0220 	subs.w	r2, r3, #32
  40342e:	da0c      	bge.n	40344a <__adddf3+0x16e>
  403430:	320c      	adds	r2, #12
  403432:	dd08      	ble.n	403446 <__adddf3+0x16a>
  403434:	f102 0c14 	add.w	ip, r2, #20
  403438:	f1c2 020c 	rsb	r2, r2, #12
  40343c:	fa01 f00c 	lsl.w	r0, r1, ip
  403440:	fa21 f102 	lsr.w	r1, r1, r2
  403444:	e00c      	b.n	403460 <__adddf3+0x184>
  403446:	f102 0214 	add.w	r2, r2, #20
  40344a:	bfd8      	it	le
  40344c:	f1c2 0c20 	rsble	ip, r2, #32
  403450:	fa01 f102 	lsl.w	r1, r1, r2
  403454:	fa20 fc0c 	lsr.w	ip, r0, ip
  403458:	bfdc      	itt	le
  40345a:	ea41 010c 	orrle.w	r1, r1, ip
  40345e:	4090      	lslle	r0, r2
  403460:	1ae4      	subs	r4, r4, r3
  403462:	bfa2      	ittt	ge
  403464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403468:	4329      	orrge	r1, r5
  40346a:	bd30      	popge	{r4, r5, pc}
  40346c:	ea6f 0404 	mvn.w	r4, r4
  403470:	3c1f      	subs	r4, #31
  403472:	da1c      	bge.n	4034ae <__adddf3+0x1d2>
  403474:	340c      	adds	r4, #12
  403476:	dc0e      	bgt.n	403496 <__adddf3+0x1ba>
  403478:	f104 0414 	add.w	r4, r4, #20
  40347c:	f1c4 0220 	rsb	r2, r4, #32
  403480:	fa20 f004 	lsr.w	r0, r0, r4
  403484:	fa01 f302 	lsl.w	r3, r1, r2
  403488:	ea40 0003 	orr.w	r0, r0, r3
  40348c:	fa21 f304 	lsr.w	r3, r1, r4
  403490:	ea45 0103 	orr.w	r1, r5, r3
  403494:	bd30      	pop	{r4, r5, pc}
  403496:	f1c4 040c 	rsb	r4, r4, #12
  40349a:	f1c4 0220 	rsb	r2, r4, #32
  40349e:	fa20 f002 	lsr.w	r0, r0, r2
  4034a2:	fa01 f304 	lsl.w	r3, r1, r4
  4034a6:	ea40 0003 	orr.w	r0, r0, r3
  4034aa:	4629      	mov	r1, r5
  4034ac:	bd30      	pop	{r4, r5, pc}
  4034ae:	fa21 f004 	lsr.w	r0, r1, r4
  4034b2:	4629      	mov	r1, r5
  4034b4:	bd30      	pop	{r4, r5, pc}
  4034b6:	f094 0f00 	teq	r4, #0
  4034ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4034be:	bf06      	itte	eq
  4034c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4034c4:	3401      	addeq	r4, #1
  4034c6:	3d01      	subne	r5, #1
  4034c8:	e74e      	b.n	403368 <__adddf3+0x8c>
  4034ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4034ce:	bf18      	it	ne
  4034d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4034d4:	d029      	beq.n	40352a <__adddf3+0x24e>
  4034d6:	ea94 0f05 	teq	r4, r5
  4034da:	bf08      	it	eq
  4034dc:	ea90 0f02 	teqeq	r0, r2
  4034e0:	d005      	beq.n	4034ee <__adddf3+0x212>
  4034e2:	ea54 0c00 	orrs.w	ip, r4, r0
  4034e6:	bf04      	itt	eq
  4034e8:	4619      	moveq	r1, r3
  4034ea:	4610      	moveq	r0, r2
  4034ec:	bd30      	pop	{r4, r5, pc}
  4034ee:	ea91 0f03 	teq	r1, r3
  4034f2:	bf1e      	ittt	ne
  4034f4:	2100      	movne	r1, #0
  4034f6:	2000      	movne	r0, #0
  4034f8:	bd30      	popne	{r4, r5, pc}
  4034fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4034fe:	d105      	bne.n	40350c <__adddf3+0x230>
  403500:	0040      	lsls	r0, r0, #1
  403502:	4149      	adcs	r1, r1
  403504:	bf28      	it	cs
  403506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40350a:	bd30      	pop	{r4, r5, pc}
  40350c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403510:	bf3c      	itt	cc
  403512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403516:	bd30      	popcc	{r4, r5, pc}
  403518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40351c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403524:	f04f 0000 	mov.w	r0, #0
  403528:	bd30      	pop	{r4, r5, pc}
  40352a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40352e:	bf1a      	itte	ne
  403530:	4619      	movne	r1, r3
  403532:	4610      	movne	r0, r2
  403534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403538:	bf1c      	itt	ne
  40353a:	460b      	movne	r3, r1
  40353c:	4602      	movne	r2, r0
  40353e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403542:	bf06      	itte	eq
  403544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403548:	ea91 0f03 	teqeq	r1, r3
  40354c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403550:	bd30      	pop	{r4, r5, pc}
  403552:	bf00      	nop

00403554 <__aeabi_ui2d>:
  403554:	f090 0f00 	teq	r0, #0
  403558:	bf04      	itt	eq
  40355a:	2100      	moveq	r1, #0
  40355c:	4770      	bxeq	lr
  40355e:	b530      	push	{r4, r5, lr}
  403560:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403564:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403568:	f04f 0500 	mov.w	r5, #0
  40356c:	f04f 0100 	mov.w	r1, #0
  403570:	e750      	b.n	403414 <__adddf3+0x138>
  403572:	bf00      	nop

00403574 <__aeabi_i2d>:
  403574:	f090 0f00 	teq	r0, #0
  403578:	bf04      	itt	eq
  40357a:	2100      	moveq	r1, #0
  40357c:	4770      	bxeq	lr
  40357e:	b530      	push	{r4, r5, lr}
  403580:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403584:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40358c:	bf48      	it	mi
  40358e:	4240      	negmi	r0, r0
  403590:	f04f 0100 	mov.w	r1, #0
  403594:	e73e      	b.n	403414 <__adddf3+0x138>
  403596:	bf00      	nop

00403598 <__aeabi_f2d>:
  403598:	0042      	lsls	r2, r0, #1
  40359a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40359e:	ea4f 0131 	mov.w	r1, r1, rrx
  4035a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4035a6:	bf1f      	itttt	ne
  4035a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4035ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4035b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4035b4:	4770      	bxne	lr
  4035b6:	f092 0f00 	teq	r2, #0
  4035ba:	bf14      	ite	ne
  4035bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4035c0:	4770      	bxeq	lr
  4035c2:	b530      	push	{r4, r5, lr}
  4035c4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4035c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4035cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4035d0:	e720      	b.n	403414 <__adddf3+0x138>
  4035d2:	bf00      	nop

004035d4 <__aeabi_ul2d>:
  4035d4:	ea50 0201 	orrs.w	r2, r0, r1
  4035d8:	bf08      	it	eq
  4035da:	4770      	bxeq	lr
  4035dc:	b530      	push	{r4, r5, lr}
  4035de:	f04f 0500 	mov.w	r5, #0
  4035e2:	e00a      	b.n	4035fa <__aeabi_l2d+0x16>

004035e4 <__aeabi_l2d>:
  4035e4:	ea50 0201 	orrs.w	r2, r0, r1
  4035e8:	bf08      	it	eq
  4035ea:	4770      	bxeq	lr
  4035ec:	b530      	push	{r4, r5, lr}
  4035ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4035f2:	d502      	bpl.n	4035fa <__aeabi_l2d+0x16>
  4035f4:	4240      	negs	r0, r0
  4035f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4035fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4035fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403606:	f43f aedc 	beq.w	4033c2 <__adddf3+0xe6>
  40360a:	f04f 0203 	mov.w	r2, #3
  40360e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403612:	bf18      	it	ne
  403614:	3203      	addne	r2, #3
  403616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40361a:	bf18      	it	ne
  40361c:	3203      	addne	r2, #3
  40361e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403622:	f1c2 0320 	rsb	r3, r2, #32
  403626:	fa00 fc03 	lsl.w	ip, r0, r3
  40362a:	fa20 f002 	lsr.w	r0, r0, r2
  40362e:	fa01 fe03 	lsl.w	lr, r1, r3
  403632:	ea40 000e 	orr.w	r0, r0, lr
  403636:	fa21 f102 	lsr.w	r1, r1, r2
  40363a:	4414      	add	r4, r2
  40363c:	e6c1      	b.n	4033c2 <__adddf3+0xe6>
  40363e:	bf00      	nop

00403640 <__aeabi_dmul>:
  403640:	b570      	push	{r4, r5, r6, lr}
  403642:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40364a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40364e:	bf1d      	ittte	ne
  403650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403654:	ea94 0f0c 	teqne	r4, ip
  403658:	ea95 0f0c 	teqne	r5, ip
  40365c:	f000 f8de 	bleq	40381c <__aeabi_dmul+0x1dc>
  403660:	442c      	add	r4, r5
  403662:	ea81 0603 	eor.w	r6, r1, r3
  403666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40366a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40366e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403672:	bf18      	it	ne
  403674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40367c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403680:	d038      	beq.n	4036f4 <__aeabi_dmul+0xb4>
  403682:	fba0 ce02 	umull	ip, lr, r0, r2
  403686:	f04f 0500 	mov.w	r5, #0
  40368a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40368e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403692:	fbe0 e503 	umlal	lr, r5, r0, r3
  403696:	f04f 0600 	mov.w	r6, #0
  40369a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40369e:	f09c 0f00 	teq	ip, #0
  4036a2:	bf18      	it	ne
  4036a4:	f04e 0e01 	orrne.w	lr, lr, #1
  4036a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4036ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4036b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4036b4:	d204      	bcs.n	4036c0 <__aeabi_dmul+0x80>
  4036b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4036ba:	416d      	adcs	r5, r5
  4036bc:	eb46 0606 	adc.w	r6, r6, r6
  4036c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4036c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4036c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4036cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4036d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4036d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4036d8:	bf88      	it	hi
  4036da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4036de:	d81e      	bhi.n	40371e <__aeabi_dmul+0xde>
  4036e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4036e4:	bf08      	it	eq
  4036e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4036ea:	f150 0000 	adcs.w	r0, r0, #0
  4036ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4036f2:	bd70      	pop	{r4, r5, r6, pc}
  4036f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4036f8:	ea46 0101 	orr.w	r1, r6, r1
  4036fc:	ea40 0002 	orr.w	r0, r0, r2
  403700:	ea81 0103 	eor.w	r1, r1, r3
  403704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403708:	bfc2      	ittt	gt
  40370a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40370e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403712:	bd70      	popgt	{r4, r5, r6, pc}
  403714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403718:	f04f 0e00 	mov.w	lr, #0
  40371c:	3c01      	subs	r4, #1
  40371e:	f300 80ab 	bgt.w	403878 <__aeabi_dmul+0x238>
  403722:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403726:	bfde      	ittt	le
  403728:	2000      	movle	r0, #0
  40372a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40372e:	bd70      	pople	{r4, r5, r6, pc}
  403730:	f1c4 0400 	rsb	r4, r4, #0
  403734:	3c20      	subs	r4, #32
  403736:	da35      	bge.n	4037a4 <__aeabi_dmul+0x164>
  403738:	340c      	adds	r4, #12
  40373a:	dc1b      	bgt.n	403774 <__aeabi_dmul+0x134>
  40373c:	f104 0414 	add.w	r4, r4, #20
  403740:	f1c4 0520 	rsb	r5, r4, #32
  403744:	fa00 f305 	lsl.w	r3, r0, r5
  403748:	fa20 f004 	lsr.w	r0, r0, r4
  40374c:	fa01 f205 	lsl.w	r2, r1, r5
  403750:	ea40 0002 	orr.w	r0, r0, r2
  403754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40375c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403760:	fa21 f604 	lsr.w	r6, r1, r4
  403764:	eb42 0106 	adc.w	r1, r2, r6
  403768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40376c:	bf08      	it	eq
  40376e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403772:	bd70      	pop	{r4, r5, r6, pc}
  403774:	f1c4 040c 	rsb	r4, r4, #12
  403778:	f1c4 0520 	rsb	r5, r4, #32
  40377c:	fa00 f304 	lsl.w	r3, r0, r4
  403780:	fa20 f005 	lsr.w	r0, r0, r5
  403784:	fa01 f204 	lsl.w	r2, r1, r4
  403788:	ea40 0002 	orr.w	r0, r0, r2
  40378c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403794:	f141 0100 	adc.w	r1, r1, #0
  403798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40379c:	bf08      	it	eq
  40379e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4037a2:	bd70      	pop	{r4, r5, r6, pc}
  4037a4:	f1c4 0520 	rsb	r5, r4, #32
  4037a8:	fa00 f205 	lsl.w	r2, r0, r5
  4037ac:	ea4e 0e02 	orr.w	lr, lr, r2
  4037b0:	fa20 f304 	lsr.w	r3, r0, r4
  4037b4:	fa01 f205 	lsl.w	r2, r1, r5
  4037b8:	ea43 0302 	orr.w	r3, r3, r2
  4037bc:	fa21 f004 	lsr.w	r0, r1, r4
  4037c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4037c4:	fa21 f204 	lsr.w	r2, r1, r4
  4037c8:	ea20 0002 	bic.w	r0, r0, r2
  4037cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4037d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4037d4:	bf08      	it	eq
  4037d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4037da:	bd70      	pop	{r4, r5, r6, pc}
  4037dc:	f094 0f00 	teq	r4, #0
  4037e0:	d10f      	bne.n	403802 <__aeabi_dmul+0x1c2>
  4037e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4037e6:	0040      	lsls	r0, r0, #1
  4037e8:	eb41 0101 	adc.w	r1, r1, r1
  4037ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4037f0:	bf08      	it	eq
  4037f2:	3c01      	subeq	r4, #1
  4037f4:	d0f7      	beq.n	4037e6 <__aeabi_dmul+0x1a6>
  4037f6:	ea41 0106 	orr.w	r1, r1, r6
  4037fa:	f095 0f00 	teq	r5, #0
  4037fe:	bf18      	it	ne
  403800:	4770      	bxne	lr
  403802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403806:	0052      	lsls	r2, r2, #1
  403808:	eb43 0303 	adc.w	r3, r3, r3
  40380c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403810:	bf08      	it	eq
  403812:	3d01      	subeq	r5, #1
  403814:	d0f7      	beq.n	403806 <__aeabi_dmul+0x1c6>
  403816:	ea43 0306 	orr.w	r3, r3, r6
  40381a:	4770      	bx	lr
  40381c:	ea94 0f0c 	teq	r4, ip
  403820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403824:	bf18      	it	ne
  403826:	ea95 0f0c 	teqne	r5, ip
  40382a:	d00c      	beq.n	403846 <__aeabi_dmul+0x206>
  40382c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403830:	bf18      	it	ne
  403832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403836:	d1d1      	bne.n	4037dc <__aeabi_dmul+0x19c>
  403838:	ea81 0103 	eor.w	r1, r1, r3
  40383c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403840:	f04f 0000 	mov.w	r0, #0
  403844:	bd70      	pop	{r4, r5, r6, pc}
  403846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40384a:	bf06      	itte	eq
  40384c:	4610      	moveq	r0, r2
  40384e:	4619      	moveq	r1, r3
  403850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403854:	d019      	beq.n	40388a <__aeabi_dmul+0x24a>
  403856:	ea94 0f0c 	teq	r4, ip
  40385a:	d102      	bne.n	403862 <__aeabi_dmul+0x222>
  40385c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403860:	d113      	bne.n	40388a <__aeabi_dmul+0x24a>
  403862:	ea95 0f0c 	teq	r5, ip
  403866:	d105      	bne.n	403874 <__aeabi_dmul+0x234>
  403868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40386c:	bf1c      	itt	ne
  40386e:	4610      	movne	r0, r2
  403870:	4619      	movne	r1, r3
  403872:	d10a      	bne.n	40388a <__aeabi_dmul+0x24a>
  403874:	ea81 0103 	eor.w	r1, r1, r3
  403878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40387c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403884:	f04f 0000 	mov.w	r0, #0
  403888:	bd70      	pop	{r4, r5, r6, pc}
  40388a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40388e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403892:	bd70      	pop	{r4, r5, r6, pc}

00403894 <__aeabi_ddiv>:
  403894:	b570      	push	{r4, r5, r6, lr}
  403896:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40389a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40389e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4038a2:	bf1d      	ittte	ne
  4038a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4038a8:	ea94 0f0c 	teqne	r4, ip
  4038ac:	ea95 0f0c 	teqne	r5, ip
  4038b0:	f000 f8a7 	bleq	403a02 <__aeabi_ddiv+0x16e>
  4038b4:	eba4 0405 	sub.w	r4, r4, r5
  4038b8:	ea81 0e03 	eor.w	lr, r1, r3
  4038bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4038c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4038c4:	f000 8088 	beq.w	4039d8 <__aeabi_ddiv+0x144>
  4038c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4038cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4038d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4038d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4038d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4038dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4038e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4038e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4038e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4038ec:	429d      	cmp	r5, r3
  4038ee:	bf08      	it	eq
  4038f0:	4296      	cmpeq	r6, r2
  4038f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4038f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4038fa:	d202      	bcs.n	403902 <__aeabi_ddiv+0x6e>
  4038fc:	085b      	lsrs	r3, r3, #1
  4038fe:	ea4f 0232 	mov.w	r2, r2, rrx
  403902:	1ab6      	subs	r6, r6, r2
  403904:	eb65 0503 	sbc.w	r5, r5, r3
  403908:	085b      	lsrs	r3, r3, #1
  40390a:	ea4f 0232 	mov.w	r2, r2, rrx
  40390e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403916:	ebb6 0e02 	subs.w	lr, r6, r2
  40391a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40391e:	bf22      	ittt	cs
  403920:	1ab6      	subcs	r6, r6, r2
  403922:	4675      	movcs	r5, lr
  403924:	ea40 000c 	orrcs.w	r0, r0, ip
  403928:	085b      	lsrs	r3, r3, #1
  40392a:	ea4f 0232 	mov.w	r2, r2, rrx
  40392e:	ebb6 0e02 	subs.w	lr, r6, r2
  403932:	eb75 0e03 	sbcs.w	lr, r5, r3
  403936:	bf22      	ittt	cs
  403938:	1ab6      	subcs	r6, r6, r2
  40393a:	4675      	movcs	r5, lr
  40393c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403940:	085b      	lsrs	r3, r3, #1
  403942:	ea4f 0232 	mov.w	r2, r2, rrx
  403946:	ebb6 0e02 	subs.w	lr, r6, r2
  40394a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40394e:	bf22      	ittt	cs
  403950:	1ab6      	subcs	r6, r6, r2
  403952:	4675      	movcs	r5, lr
  403954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403958:	085b      	lsrs	r3, r3, #1
  40395a:	ea4f 0232 	mov.w	r2, r2, rrx
  40395e:	ebb6 0e02 	subs.w	lr, r6, r2
  403962:	eb75 0e03 	sbcs.w	lr, r5, r3
  403966:	bf22      	ittt	cs
  403968:	1ab6      	subcs	r6, r6, r2
  40396a:	4675      	movcs	r5, lr
  40396c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403970:	ea55 0e06 	orrs.w	lr, r5, r6
  403974:	d018      	beq.n	4039a8 <__aeabi_ddiv+0x114>
  403976:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40397a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40397e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40398a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40398e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403992:	d1c0      	bne.n	403916 <__aeabi_ddiv+0x82>
  403994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403998:	d10b      	bne.n	4039b2 <__aeabi_ddiv+0x11e>
  40399a:	ea41 0100 	orr.w	r1, r1, r0
  40399e:	f04f 0000 	mov.w	r0, #0
  4039a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4039a6:	e7b6      	b.n	403916 <__aeabi_ddiv+0x82>
  4039a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4039ac:	bf04      	itt	eq
  4039ae:	4301      	orreq	r1, r0
  4039b0:	2000      	moveq	r0, #0
  4039b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4039b6:	bf88      	it	hi
  4039b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4039bc:	f63f aeaf 	bhi.w	40371e <__aeabi_dmul+0xde>
  4039c0:	ebb5 0c03 	subs.w	ip, r5, r3
  4039c4:	bf04      	itt	eq
  4039c6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4039ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4039ce:	f150 0000 	adcs.w	r0, r0, #0
  4039d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4039d6:	bd70      	pop	{r4, r5, r6, pc}
  4039d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4039dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4039e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4039e4:	bfc2      	ittt	gt
  4039e6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4039ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4039ee:	bd70      	popgt	{r4, r5, r6, pc}
  4039f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4039f4:	f04f 0e00 	mov.w	lr, #0
  4039f8:	3c01      	subs	r4, #1
  4039fa:	e690      	b.n	40371e <__aeabi_dmul+0xde>
  4039fc:	ea45 0e06 	orr.w	lr, r5, r6
  403a00:	e68d      	b.n	40371e <__aeabi_dmul+0xde>
  403a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403a06:	ea94 0f0c 	teq	r4, ip
  403a0a:	bf08      	it	eq
  403a0c:	ea95 0f0c 	teqeq	r5, ip
  403a10:	f43f af3b 	beq.w	40388a <__aeabi_dmul+0x24a>
  403a14:	ea94 0f0c 	teq	r4, ip
  403a18:	d10a      	bne.n	403a30 <__aeabi_ddiv+0x19c>
  403a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403a1e:	f47f af34 	bne.w	40388a <__aeabi_dmul+0x24a>
  403a22:	ea95 0f0c 	teq	r5, ip
  403a26:	f47f af25 	bne.w	403874 <__aeabi_dmul+0x234>
  403a2a:	4610      	mov	r0, r2
  403a2c:	4619      	mov	r1, r3
  403a2e:	e72c      	b.n	40388a <__aeabi_dmul+0x24a>
  403a30:	ea95 0f0c 	teq	r5, ip
  403a34:	d106      	bne.n	403a44 <__aeabi_ddiv+0x1b0>
  403a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403a3a:	f43f aefd 	beq.w	403838 <__aeabi_dmul+0x1f8>
  403a3e:	4610      	mov	r0, r2
  403a40:	4619      	mov	r1, r3
  403a42:	e722      	b.n	40388a <__aeabi_dmul+0x24a>
  403a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403a48:	bf18      	it	ne
  403a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403a4e:	f47f aec5 	bne.w	4037dc <__aeabi_dmul+0x19c>
  403a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403a56:	f47f af0d 	bne.w	403874 <__aeabi_dmul+0x234>
  403a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403a5e:	f47f aeeb 	bne.w	403838 <__aeabi_dmul+0x1f8>
  403a62:	e712      	b.n	40388a <__aeabi_dmul+0x24a>

00403a64 <__aeabi_d2uiz>:
  403a64:	004a      	lsls	r2, r1, #1
  403a66:	d211      	bcs.n	403a8c <__aeabi_d2uiz+0x28>
  403a68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403a6c:	d211      	bcs.n	403a92 <__aeabi_d2uiz+0x2e>
  403a6e:	d50d      	bpl.n	403a8c <__aeabi_d2uiz+0x28>
  403a70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403a74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403a78:	d40e      	bmi.n	403a98 <__aeabi_d2uiz+0x34>
  403a7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403a82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403a86:	fa23 f002 	lsr.w	r0, r3, r2
  403a8a:	4770      	bx	lr
  403a8c:	f04f 0000 	mov.w	r0, #0
  403a90:	4770      	bx	lr
  403a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403a96:	d102      	bne.n	403a9e <__aeabi_d2uiz+0x3a>
  403a98:	f04f 30ff 	mov.w	r0, #4294967295
  403a9c:	4770      	bx	lr
  403a9e:	f04f 0000 	mov.w	r0, #0
  403aa2:	4770      	bx	lr

00403aa4 <__aeabi_uldivmod>:
  403aa4:	b953      	cbnz	r3, 403abc <__aeabi_uldivmod+0x18>
  403aa6:	b94a      	cbnz	r2, 403abc <__aeabi_uldivmod+0x18>
  403aa8:	2900      	cmp	r1, #0
  403aaa:	bf08      	it	eq
  403aac:	2800      	cmpeq	r0, #0
  403aae:	bf1c      	itt	ne
  403ab0:	f04f 31ff 	movne.w	r1, #4294967295
  403ab4:	f04f 30ff 	movne.w	r0, #4294967295
  403ab8:	f000 b97a 	b.w	403db0 <__aeabi_idiv0>
  403abc:	f1ad 0c08 	sub.w	ip, sp, #8
  403ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403ac4:	f000 f806 	bl	403ad4 <__udivmoddi4>
  403ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
  403acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ad0:	b004      	add	sp, #16
  403ad2:	4770      	bx	lr

00403ad4 <__udivmoddi4>:
  403ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403ad8:	468c      	mov	ip, r1
  403ada:	460d      	mov	r5, r1
  403adc:	4604      	mov	r4, r0
  403ade:	9e08      	ldr	r6, [sp, #32]
  403ae0:	2b00      	cmp	r3, #0
  403ae2:	d151      	bne.n	403b88 <__udivmoddi4+0xb4>
  403ae4:	428a      	cmp	r2, r1
  403ae6:	4617      	mov	r7, r2
  403ae8:	d96d      	bls.n	403bc6 <__udivmoddi4+0xf2>
  403aea:	fab2 fe82 	clz	lr, r2
  403aee:	f1be 0f00 	cmp.w	lr, #0
  403af2:	d00b      	beq.n	403b0c <__udivmoddi4+0x38>
  403af4:	f1ce 0c20 	rsb	ip, lr, #32
  403af8:	fa01 f50e 	lsl.w	r5, r1, lr
  403afc:	fa20 fc0c 	lsr.w	ip, r0, ip
  403b00:	fa02 f70e 	lsl.w	r7, r2, lr
  403b04:	ea4c 0c05 	orr.w	ip, ip, r5
  403b08:	fa00 f40e 	lsl.w	r4, r0, lr
  403b0c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403b10:	0c25      	lsrs	r5, r4, #16
  403b12:	fbbc f8fa 	udiv	r8, ip, sl
  403b16:	fa1f f987 	uxth.w	r9, r7
  403b1a:	fb0a cc18 	mls	ip, sl, r8, ip
  403b1e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403b22:	fb08 f309 	mul.w	r3, r8, r9
  403b26:	42ab      	cmp	r3, r5
  403b28:	d90a      	bls.n	403b40 <__udivmoddi4+0x6c>
  403b2a:	19ed      	adds	r5, r5, r7
  403b2c:	f108 32ff 	add.w	r2, r8, #4294967295
  403b30:	f080 8123 	bcs.w	403d7a <__udivmoddi4+0x2a6>
  403b34:	42ab      	cmp	r3, r5
  403b36:	f240 8120 	bls.w	403d7a <__udivmoddi4+0x2a6>
  403b3a:	f1a8 0802 	sub.w	r8, r8, #2
  403b3e:	443d      	add	r5, r7
  403b40:	1aed      	subs	r5, r5, r3
  403b42:	b2a4      	uxth	r4, r4
  403b44:	fbb5 f0fa 	udiv	r0, r5, sl
  403b48:	fb0a 5510 	mls	r5, sl, r0, r5
  403b4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403b50:	fb00 f909 	mul.w	r9, r0, r9
  403b54:	45a1      	cmp	r9, r4
  403b56:	d909      	bls.n	403b6c <__udivmoddi4+0x98>
  403b58:	19e4      	adds	r4, r4, r7
  403b5a:	f100 33ff 	add.w	r3, r0, #4294967295
  403b5e:	f080 810a 	bcs.w	403d76 <__udivmoddi4+0x2a2>
  403b62:	45a1      	cmp	r9, r4
  403b64:	f240 8107 	bls.w	403d76 <__udivmoddi4+0x2a2>
  403b68:	3802      	subs	r0, #2
  403b6a:	443c      	add	r4, r7
  403b6c:	eba4 0409 	sub.w	r4, r4, r9
  403b70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403b74:	2100      	movs	r1, #0
  403b76:	2e00      	cmp	r6, #0
  403b78:	d061      	beq.n	403c3e <__udivmoddi4+0x16a>
  403b7a:	fa24 f40e 	lsr.w	r4, r4, lr
  403b7e:	2300      	movs	r3, #0
  403b80:	6034      	str	r4, [r6, #0]
  403b82:	6073      	str	r3, [r6, #4]
  403b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b88:	428b      	cmp	r3, r1
  403b8a:	d907      	bls.n	403b9c <__udivmoddi4+0xc8>
  403b8c:	2e00      	cmp	r6, #0
  403b8e:	d054      	beq.n	403c3a <__udivmoddi4+0x166>
  403b90:	2100      	movs	r1, #0
  403b92:	e886 0021 	stmia.w	r6, {r0, r5}
  403b96:	4608      	mov	r0, r1
  403b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b9c:	fab3 f183 	clz	r1, r3
  403ba0:	2900      	cmp	r1, #0
  403ba2:	f040 808e 	bne.w	403cc2 <__udivmoddi4+0x1ee>
  403ba6:	42ab      	cmp	r3, r5
  403ba8:	d302      	bcc.n	403bb0 <__udivmoddi4+0xdc>
  403baa:	4282      	cmp	r2, r0
  403bac:	f200 80fa 	bhi.w	403da4 <__udivmoddi4+0x2d0>
  403bb0:	1a84      	subs	r4, r0, r2
  403bb2:	eb65 0503 	sbc.w	r5, r5, r3
  403bb6:	2001      	movs	r0, #1
  403bb8:	46ac      	mov	ip, r5
  403bba:	2e00      	cmp	r6, #0
  403bbc:	d03f      	beq.n	403c3e <__udivmoddi4+0x16a>
  403bbe:	e886 1010 	stmia.w	r6, {r4, ip}
  403bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bc6:	b912      	cbnz	r2, 403bce <__udivmoddi4+0xfa>
  403bc8:	2701      	movs	r7, #1
  403bca:	fbb7 f7f2 	udiv	r7, r7, r2
  403bce:	fab7 fe87 	clz	lr, r7
  403bd2:	f1be 0f00 	cmp.w	lr, #0
  403bd6:	d134      	bne.n	403c42 <__udivmoddi4+0x16e>
  403bd8:	1beb      	subs	r3, r5, r7
  403bda:	0c3a      	lsrs	r2, r7, #16
  403bdc:	fa1f fc87 	uxth.w	ip, r7
  403be0:	2101      	movs	r1, #1
  403be2:	fbb3 f8f2 	udiv	r8, r3, r2
  403be6:	0c25      	lsrs	r5, r4, #16
  403be8:	fb02 3318 	mls	r3, r2, r8, r3
  403bec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403bf0:	fb0c f308 	mul.w	r3, ip, r8
  403bf4:	42ab      	cmp	r3, r5
  403bf6:	d907      	bls.n	403c08 <__udivmoddi4+0x134>
  403bf8:	19ed      	adds	r5, r5, r7
  403bfa:	f108 30ff 	add.w	r0, r8, #4294967295
  403bfe:	d202      	bcs.n	403c06 <__udivmoddi4+0x132>
  403c00:	42ab      	cmp	r3, r5
  403c02:	f200 80d1 	bhi.w	403da8 <__udivmoddi4+0x2d4>
  403c06:	4680      	mov	r8, r0
  403c08:	1aed      	subs	r5, r5, r3
  403c0a:	b2a3      	uxth	r3, r4
  403c0c:	fbb5 f0f2 	udiv	r0, r5, r2
  403c10:	fb02 5510 	mls	r5, r2, r0, r5
  403c14:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403c18:	fb0c fc00 	mul.w	ip, ip, r0
  403c1c:	45a4      	cmp	ip, r4
  403c1e:	d907      	bls.n	403c30 <__udivmoddi4+0x15c>
  403c20:	19e4      	adds	r4, r4, r7
  403c22:	f100 33ff 	add.w	r3, r0, #4294967295
  403c26:	d202      	bcs.n	403c2e <__udivmoddi4+0x15a>
  403c28:	45a4      	cmp	ip, r4
  403c2a:	f200 80b8 	bhi.w	403d9e <__udivmoddi4+0x2ca>
  403c2e:	4618      	mov	r0, r3
  403c30:	eba4 040c 	sub.w	r4, r4, ip
  403c34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403c38:	e79d      	b.n	403b76 <__udivmoddi4+0xa2>
  403c3a:	4631      	mov	r1, r6
  403c3c:	4630      	mov	r0, r6
  403c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c42:	f1ce 0420 	rsb	r4, lr, #32
  403c46:	fa05 f30e 	lsl.w	r3, r5, lr
  403c4a:	fa07 f70e 	lsl.w	r7, r7, lr
  403c4e:	fa20 f804 	lsr.w	r8, r0, r4
  403c52:	0c3a      	lsrs	r2, r7, #16
  403c54:	fa25 f404 	lsr.w	r4, r5, r4
  403c58:	ea48 0803 	orr.w	r8, r8, r3
  403c5c:	fbb4 f1f2 	udiv	r1, r4, r2
  403c60:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403c64:	fb02 4411 	mls	r4, r2, r1, r4
  403c68:	fa1f fc87 	uxth.w	ip, r7
  403c6c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403c70:	fb01 f30c 	mul.w	r3, r1, ip
  403c74:	42ab      	cmp	r3, r5
  403c76:	fa00 f40e 	lsl.w	r4, r0, lr
  403c7a:	d909      	bls.n	403c90 <__udivmoddi4+0x1bc>
  403c7c:	19ed      	adds	r5, r5, r7
  403c7e:	f101 30ff 	add.w	r0, r1, #4294967295
  403c82:	f080 808a 	bcs.w	403d9a <__udivmoddi4+0x2c6>
  403c86:	42ab      	cmp	r3, r5
  403c88:	f240 8087 	bls.w	403d9a <__udivmoddi4+0x2c6>
  403c8c:	3902      	subs	r1, #2
  403c8e:	443d      	add	r5, r7
  403c90:	1aeb      	subs	r3, r5, r3
  403c92:	fa1f f588 	uxth.w	r5, r8
  403c96:	fbb3 f0f2 	udiv	r0, r3, r2
  403c9a:	fb02 3310 	mls	r3, r2, r0, r3
  403c9e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403ca2:	fb00 f30c 	mul.w	r3, r0, ip
  403ca6:	42ab      	cmp	r3, r5
  403ca8:	d907      	bls.n	403cba <__udivmoddi4+0x1e6>
  403caa:	19ed      	adds	r5, r5, r7
  403cac:	f100 38ff 	add.w	r8, r0, #4294967295
  403cb0:	d26f      	bcs.n	403d92 <__udivmoddi4+0x2be>
  403cb2:	42ab      	cmp	r3, r5
  403cb4:	d96d      	bls.n	403d92 <__udivmoddi4+0x2be>
  403cb6:	3802      	subs	r0, #2
  403cb8:	443d      	add	r5, r7
  403cba:	1aeb      	subs	r3, r5, r3
  403cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403cc0:	e78f      	b.n	403be2 <__udivmoddi4+0x10e>
  403cc2:	f1c1 0720 	rsb	r7, r1, #32
  403cc6:	fa22 f807 	lsr.w	r8, r2, r7
  403cca:	408b      	lsls	r3, r1
  403ccc:	fa05 f401 	lsl.w	r4, r5, r1
  403cd0:	ea48 0303 	orr.w	r3, r8, r3
  403cd4:	fa20 fe07 	lsr.w	lr, r0, r7
  403cd8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403cdc:	40fd      	lsrs	r5, r7
  403cde:	ea4e 0e04 	orr.w	lr, lr, r4
  403ce2:	fbb5 f9fc 	udiv	r9, r5, ip
  403ce6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403cea:	fb0c 5519 	mls	r5, ip, r9, r5
  403cee:	fa1f f883 	uxth.w	r8, r3
  403cf2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403cf6:	fb09 f408 	mul.w	r4, r9, r8
  403cfa:	42ac      	cmp	r4, r5
  403cfc:	fa02 f201 	lsl.w	r2, r2, r1
  403d00:	fa00 fa01 	lsl.w	sl, r0, r1
  403d04:	d908      	bls.n	403d18 <__udivmoddi4+0x244>
  403d06:	18ed      	adds	r5, r5, r3
  403d08:	f109 30ff 	add.w	r0, r9, #4294967295
  403d0c:	d243      	bcs.n	403d96 <__udivmoddi4+0x2c2>
  403d0e:	42ac      	cmp	r4, r5
  403d10:	d941      	bls.n	403d96 <__udivmoddi4+0x2c2>
  403d12:	f1a9 0902 	sub.w	r9, r9, #2
  403d16:	441d      	add	r5, r3
  403d18:	1b2d      	subs	r5, r5, r4
  403d1a:	fa1f fe8e 	uxth.w	lr, lr
  403d1e:	fbb5 f0fc 	udiv	r0, r5, ip
  403d22:	fb0c 5510 	mls	r5, ip, r0, r5
  403d26:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403d2a:	fb00 f808 	mul.w	r8, r0, r8
  403d2e:	45a0      	cmp	r8, r4
  403d30:	d907      	bls.n	403d42 <__udivmoddi4+0x26e>
  403d32:	18e4      	adds	r4, r4, r3
  403d34:	f100 35ff 	add.w	r5, r0, #4294967295
  403d38:	d229      	bcs.n	403d8e <__udivmoddi4+0x2ba>
  403d3a:	45a0      	cmp	r8, r4
  403d3c:	d927      	bls.n	403d8e <__udivmoddi4+0x2ba>
  403d3e:	3802      	subs	r0, #2
  403d40:	441c      	add	r4, r3
  403d42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403d46:	eba4 0408 	sub.w	r4, r4, r8
  403d4a:	fba0 8902 	umull	r8, r9, r0, r2
  403d4e:	454c      	cmp	r4, r9
  403d50:	46c6      	mov	lr, r8
  403d52:	464d      	mov	r5, r9
  403d54:	d315      	bcc.n	403d82 <__udivmoddi4+0x2ae>
  403d56:	d012      	beq.n	403d7e <__udivmoddi4+0x2aa>
  403d58:	b156      	cbz	r6, 403d70 <__udivmoddi4+0x29c>
  403d5a:	ebba 030e 	subs.w	r3, sl, lr
  403d5e:	eb64 0405 	sbc.w	r4, r4, r5
  403d62:	fa04 f707 	lsl.w	r7, r4, r7
  403d66:	40cb      	lsrs	r3, r1
  403d68:	431f      	orrs	r7, r3
  403d6a:	40cc      	lsrs	r4, r1
  403d6c:	6037      	str	r7, [r6, #0]
  403d6e:	6074      	str	r4, [r6, #4]
  403d70:	2100      	movs	r1, #0
  403d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d76:	4618      	mov	r0, r3
  403d78:	e6f8      	b.n	403b6c <__udivmoddi4+0x98>
  403d7a:	4690      	mov	r8, r2
  403d7c:	e6e0      	b.n	403b40 <__udivmoddi4+0x6c>
  403d7e:	45c2      	cmp	sl, r8
  403d80:	d2ea      	bcs.n	403d58 <__udivmoddi4+0x284>
  403d82:	ebb8 0e02 	subs.w	lr, r8, r2
  403d86:	eb69 0503 	sbc.w	r5, r9, r3
  403d8a:	3801      	subs	r0, #1
  403d8c:	e7e4      	b.n	403d58 <__udivmoddi4+0x284>
  403d8e:	4628      	mov	r0, r5
  403d90:	e7d7      	b.n	403d42 <__udivmoddi4+0x26e>
  403d92:	4640      	mov	r0, r8
  403d94:	e791      	b.n	403cba <__udivmoddi4+0x1e6>
  403d96:	4681      	mov	r9, r0
  403d98:	e7be      	b.n	403d18 <__udivmoddi4+0x244>
  403d9a:	4601      	mov	r1, r0
  403d9c:	e778      	b.n	403c90 <__udivmoddi4+0x1bc>
  403d9e:	3802      	subs	r0, #2
  403da0:	443c      	add	r4, r7
  403da2:	e745      	b.n	403c30 <__udivmoddi4+0x15c>
  403da4:	4608      	mov	r0, r1
  403da6:	e708      	b.n	403bba <__udivmoddi4+0xe6>
  403da8:	f1a8 0802 	sub.w	r8, r8, #2
  403dac:	443d      	add	r5, r7
  403dae:	e72b      	b.n	403c08 <__udivmoddi4+0x134>

00403db0 <__aeabi_idiv0>:
  403db0:	4770      	bx	lr
  403db2:	bf00      	nop

00403db4 <__libc_init_array>:
  403db4:	b570      	push	{r4, r5, r6, lr}
  403db6:	4e0f      	ldr	r6, [pc, #60]	; (403df4 <__libc_init_array+0x40>)
  403db8:	4d0f      	ldr	r5, [pc, #60]	; (403df8 <__libc_init_array+0x44>)
  403dba:	1b76      	subs	r6, r6, r5
  403dbc:	10b6      	asrs	r6, r6, #2
  403dbe:	bf18      	it	ne
  403dc0:	2400      	movne	r4, #0
  403dc2:	d005      	beq.n	403dd0 <__libc_init_array+0x1c>
  403dc4:	3401      	adds	r4, #1
  403dc6:	f855 3b04 	ldr.w	r3, [r5], #4
  403dca:	4798      	blx	r3
  403dcc:	42a6      	cmp	r6, r4
  403dce:	d1f9      	bne.n	403dc4 <__libc_init_array+0x10>
  403dd0:	4e0a      	ldr	r6, [pc, #40]	; (403dfc <__libc_init_array+0x48>)
  403dd2:	4d0b      	ldr	r5, [pc, #44]	; (403e00 <__libc_init_array+0x4c>)
  403dd4:	1b76      	subs	r6, r6, r5
  403dd6:	f004 f8d3 	bl	407f80 <_init>
  403dda:	10b6      	asrs	r6, r6, #2
  403ddc:	bf18      	it	ne
  403dde:	2400      	movne	r4, #0
  403de0:	d006      	beq.n	403df0 <__libc_init_array+0x3c>
  403de2:	3401      	adds	r4, #1
  403de4:	f855 3b04 	ldr.w	r3, [r5], #4
  403de8:	4798      	blx	r3
  403dea:	42a6      	cmp	r6, r4
  403dec:	d1f9      	bne.n	403de2 <__libc_init_array+0x2e>
  403dee:	bd70      	pop	{r4, r5, r6, pc}
  403df0:	bd70      	pop	{r4, r5, r6, pc}
  403df2:	bf00      	nop
  403df4:	00407f8c 	.word	0x00407f8c
  403df8:	00407f8c 	.word	0x00407f8c
  403dfc:	00407f94 	.word	0x00407f94
  403e00:	00407f8c 	.word	0x00407f8c

00403e04 <malloc>:
  403e04:	4b02      	ldr	r3, [pc, #8]	; (403e10 <malloc+0xc>)
  403e06:	4601      	mov	r1, r0
  403e08:	6818      	ldr	r0, [r3, #0]
  403e0a:	f000 b80b 	b.w	403e24 <_malloc_r>
  403e0e:	bf00      	nop
  403e10:	20000458 	.word	0x20000458

00403e14 <free>:
  403e14:	4b02      	ldr	r3, [pc, #8]	; (403e20 <free+0xc>)
  403e16:	4601      	mov	r1, r0
  403e18:	6818      	ldr	r0, [r3, #0]
  403e1a:	f002 be25 	b.w	406a68 <_free_r>
  403e1e:	bf00      	nop
  403e20:	20000458 	.word	0x20000458

00403e24 <_malloc_r>:
  403e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e28:	f101 060b 	add.w	r6, r1, #11
  403e2c:	2e16      	cmp	r6, #22
  403e2e:	b083      	sub	sp, #12
  403e30:	4605      	mov	r5, r0
  403e32:	f240 809e 	bls.w	403f72 <_malloc_r+0x14e>
  403e36:	f036 0607 	bics.w	r6, r6, #7
  403e3a:	f100 80bd 	bmi.w	403fb8 <_malloc_r+0x194>
  403e3e:	42b1      	cmp	r1, r6
  403e40:	f200 80ba 	bhi.w	403fb8 <_malloc_r+0x194>
  403e44:	f000 faec 	bl	404420 <__malloc_lock>
  403e48:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403e4c:	f0c0 8293 	bcc.w	404376 <_malloc_r+0x552>
  403e50:	0a73      	lsrs	r3, r6, #9
  403e52:	f000 80b8 	beq.w	403fc6 <_malloc_r+0x1a2>
  403e56:	2b04      	cmp	r3, #4
  403e58:	f200 8179 	bhi.w	40414e <_malloc_r+0x32a>
  403e5c:	09b3      	lsrs	r3, r6, #6
  403e5e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403e62:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403e66:	00c3      	lsls	r3, r0, #3
  403e68:	4fbf      	ldr	r7, [pc, #764]	; (404168 <_malloc_r+0x344>)
  403e6a:	443b      	add	r3, r7
  403e6c:	f1a3 0108 	sub.w	r1, r3, #8
  403e70:	685c      	ldr	r4, [r3, #4]
  403e72:	42a1      	cmp	r1, r4
  403e74:	d106      	bne.n	403e84 <_malloc_r+0x60>
  403e76:	e00c      	b.n	403e92 <_malloc_r+0x6e>
  403e78:	2a00      	cmp	r2, #0
  403e7a:	f280 80aa 	bge.w	403fd2 <_malloc_r+0x1ae>
  403e7e:	68e4      	ldr	r4, [r4, #12]
  403e80:	42a1      	cmp	r1, r4
  403e82:	d006      	beq.n	403e92 <_malloc_r+0x6e>
  403e84:	6863      	ldr	r3, [r4, #4]
  403e86:	f023 0303 	bic.w	r3, r3, #3
  403e8a:	1b9a      	subs	r2, r3, r6
  403e8c:	2a0f      	cmp	r2, #15
  403e8e:	ddf3      	ble.n	403e78 <_malloc_r+0x54>
  403e90:	4670      	mov	r0, lr
  403e92:	693c      	ldr	r4, [r7, #16]
  403e94:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40417c <_malloc_r+0x358>
  403e98:	4574      	cmp	r4, lr
  403e9a:	f000 81ab 	beq.w	4041f4 <_malloc_r+0x3d0>
  403e9e:	6863      	ldr	r3, [r4, #4]
  403ea0:	f023 0303 	bic.w	r3, r3, #3
  403ea4:	1b9a      	subs	r2, r3, r6
  403ea6:	2a0f      	cmp	r2, #15
  403ea8:	f300 8190 	bgt.w	4041cc <_malloc_r+0x3a8>
  403eac:	2a00      	cmp	r2, #0
  403eae:	f8c7 e014 	str.w	lr, [r7, #20]
  403eb2:	f8c7 e010 	str.w	lr, [r7, #16]
  403eb6:	f280 809d 	bge.w	403ff4 <_malloc_r+0x1d0>
  403eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403ebe:	f080 8161 	bcs.w	404184 <_malloc_r+0x360>
  403ec2:	08db      	lsrs	r3, r3, #3
  403ec4:	f103 0c01 	add.w	ip, r3, #1
  403ec8:	1099      	asrs	r1, r3, #2
  403eca:	687a      	ldr	r2, [r7, #4]
  403ecc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403ed0:	f8c4 8008 	str.w	r8, [r4, #8]
  403ed4:	2301      	movs	r3, #1
  403ed6:	408b      	lsls	r3, r1
  403ed8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403edc:	4313      	orrs	r3, r2
  403ede:	3908      	subs	r1, #8
  403ee0:	60e1      	str	r1, [r4, #12]
  403ee2:	607b      	str	r3, [r7, #4]
  403ee4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ee8:	f8c8 400c 	str.w	r4, [r8, #12]
  403eec:	1082      	asrs	r2, r0, #2
  403eee:	2401      	movs	r4, #1
  403ef0:	4094      	lsls	r4, r2
  403ef2:	429c      	cmp	r4, r3
  403ef4:	f200 808b 	bhi.w	40400e <_malloc_r+0x1ea>
  403ef8:	421c      	tst	r4, r3
  403efa:	d106      	bne.n	403f0a <_malloc_r+0xe6>
  403efc:	f020 0003 	bic.w	r0, r0, #3
  403f00:	0064      	lsls	r4, r4, #1
  403f02:	421c      	tst	r4, r3
  403f04:	f100 0004 	add.w	r0, r0, #4
  403f08:	d0fa      	beq.n	403f00 <_malloc_r+0xdc>
  403f0a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403f0e:	46cc      	mov	ip, r9
  403f10:	4680      	mov	r8, r0
  403f12:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403f16:	459c      	cmp	ip, r3
  403f18:	d107      	bne.n	403f2a <_malloc_r+0x106>
  403f1a:	e16d      	b.n	4041f8 <_malloc_r+0x3d4>
  403f1c:	2a00      	cmp	r2, #0
  403f1e:	f280 817b 	bge.w	404218 <_malloc_r+0x3f4>
  403f22:	68db      	ldr	r3, [r3, #12]
  403f24:	459c      	cmp	ip, r3
  403f26:	f000 8167 	beq.w	4041f8 <_malloc_r+0x3d4>
  403f2a:	6859      	ldr	r1, [r3, #4]
  403f2c:	f021 0103 	bic.w	r1, r1, #3
  403f30:	1b8a      	subs	r2, r1, r6
  403f32:	2a0f      	cmp	r2, #15
  403f34:	ddf2      	ble.n	403f1c <_malloc_r+0xf8>
  403f36:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403f3a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403f3e:	9300      	str	r3, [sp, #0]
  403f40:	199c      	adds	r4, r3, r6
  403f42:	4628      	mov	r0, r5
  403f44:	f046 0601 	orr.w	r6, r6, #1
  403f48:	f042 0501 	orr.w	r5, r2, #1
  403f4c:	605e      	str	r6, [r3, #4]
  403f4e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403f52:	f8cc 8008 	str.w	r8, [ip, #8]
  403f56:	617c      	str	r4, [r7, #20]
  403f58:	613c      	str	r4, [r7, #16]
  403f5a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403f5e:	f8c4 e008 	str.w	lr, [r4, #8]
  403f62:	6065      	str	r5, [r4, #4]
  403f64:	505a      	str	r2, [r3, r1]
  403f66:	f000 fa61 	bl	40442c <__malloc_unlock>
  403f6a:	9b00      	ldr	r3, [sp, #0]
  403f6c:	f103 0408 	add.w	r4, r3, #8
  403f70:	e01e      	b.n	403fb0 <_malloc_r+0x18c>
  403f72:	2910      	cmp	r1, #16
  403f74:	d820      	bhi.n	403fb8 <_malloc_r+0x194>
  403f76:	f000 fa53 	bl	404420 <__malloc_lock>
  403f7a:	2610      	movs	r6, #16
  403f7c:	2318      	movs	r3, #24
  403f7e:	2002      	movs	r0, #2
  403f80:	4f79      	ldr	r7, [pc, #484]	; (404168 <_malloc_r+0x344>)
  403f82:	443b      	add	r3, r7
  403f84:	f1a3 0208 	sub.w	r2, r3, #8
  403f88:	685c      	ldr	r4, [r3, #4]
  403f8a:	4294      	cmp	r4, r2
  403f8c:	f000 813d 	beq.w	40420a <_malloc_r+0x3e6>
  403f90:	6863      	ldr	r3, [r4, #4]
  403f92:	68e1      	ldr	r1, [r4, #12]
  403f94:	68a6      	ldr	r6, [r4, #8]
  403f96:	f023 0303 	bic.w	r3, r3, #3
  403f9a:	4423      	add	r3, r4
  403f9c:	4628      	mov	r0, r5
  403f9e:	685a      	ldr	r2, [r3, #4]
  403fa0:	60f1      	str	r1, [r6, #12]
  403fa2:	f042 0201 	orr.w	r2, r2, #1
  403fa6:	608e      	str	r6, [r1, #8]
  403fa8:	605a      	str	r2, [r3, #4]
  403faa:	f000 fa3f 	bl	40442c <__malloc_unlock>
  403fae:	3408      	adds	r4, #8
  403fb0:	4620      	mov	r0, r4
  403fb2:	b003      	add	sp, #12
  403fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fb8:	2400      	movs	r4, #0
  403fba:	230c      	movs	r3, #12
  403fbc:	4620      	mov	r0, r4
  403fbe:	602b      	str	r3, [r5, #0]
  403fc0:	b003      	add	sp, #12
  403fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fc6:	2040      	movs	r0, #64	; 0x40
  403fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403fcc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403fd0:	e74a      	b.n	403e68 <_malloc_r+0x44>
  403fd2:	4423      	add	r3, r4
  403fd4:	68e1      	ldr	r1, [r4, #12]
  403fd6:	685a      	ldr	r2, [r3, #4]
  403fd8:	68a6      	ldr	r6, [r4, #8]
  403fda:	f042 0201 	orr.w	r2, r2, #1
  403fde:	60f1      	str	r1, [r6, #12]
  403fe0:	4628      	mov	r0, r5
  403fe2:	608e      	str	r6, [r1, #8]
  403fe4:	605a      	str	r2, [r3, #4]
  403fe6:	f000 fa21 	bl	40442c <__malloc_unlock>
  403fea:	3408      	adds	r4, #8
  403fec:	4620      	mov	r0, r4
  403fee:	b003      	add	sp, #12
  403ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ff4:	4423      	add	r3, r4
  403ff6:	4628      	mov	r0, r5
  403ff8:	685a      	ldr	r2, [r3, #4]
  403ffa:	f042 0201 	orr.w	r2, r2, #1
  403ffe:	605a      	str	r2, [r3, #4]
  404000:	f000 fa14 	bl	40442c <__malloc_unlock>
  404004:	3408      	adds	r4, #8
  404006:	4620      	mov	r0, r4
  404008:	b003      	add	sp, #12
  40400a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40400e:	68bc      	ldr	r4, [r7, #8]
  404010:	6863      	ldr	r3, [r4, #4]
  404012:	f023 0803 	bic.w	r8, r3, #3
  404016:	45b0      	cmp	r8, r6
  404018:	d304      	bcc.n	404024 <_malloc_r+0x200>
  40401a:	eba8 0306 	sub.w	r3, r8, r6
  40401e:	2b0f      	cmp	r3, #15
  404020:	f300 8085 	bgt.w	40412e <_malloc_r+0x30a>
  404024:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404180 <_malloc_r+0x35c>
  404028:	4b50      	ldr	r3, [pc, #320]	; (40416c <_malloc_r+0x348>)
  40402a:	f8d9 2000 	ldr.w	r2, [r9]
  40402e:	681b      	ldr	r3, [r3, #0]
  404030:	3201      	adds	r2, #1
  404032:	4433      	add	r3, r6
  404034:	eb04 0a08 	add.w	sl, r4, r8
  404038:	f000 8155 	beq.w	4042e6 <_malloc_r+0x4c2>
  40403c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404040:	330f      	adds	r3, #15
  404042:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404046:	f02b 0b0f 	bic.w	fp, fp, #15
  40404a:	4659      	mov	r1, fp
  40404c:	4628      	mov	r0, r5
  40404e:	f000 f9f3 	bl	404438 <_sbrk_r>
  404052:	1c41      	adds	r1, r0, #1
  404054:	4602      	mov	r2, r0
  404056:	f000 80fc 	beq.w	404252 <_malloc_r+0x42e>
  40405a:	4582      	cmp	sl, r0
  40405c:	f200 80f7 	bhi.w	40424e <_malloc_r+0x42a>
  404060:	4b43      	ldr	r3, [pc, #268]	; (404170 <_malloc_r+0x34c>)
  404062:	6819      	ldr	r1, [r3, #0]
  404064:	4459      	add	r1, fp
  404066:	6019      	str	r1, [r3, #0]
  404068:	f000 814d 	beq.w	404306 <_malloc_r+0x4e2>
  40406c:	f8d9 0000 	ldr.w	r0, [r9]
  404070:	3001      	adds	r0, #1
  404072:	bf1b      	ittet	ne
  404074:	eba2 0a0a 	subne.w	sl, r2, sl
  404078:	4451      	addne	r1, sl
  40407a:	f8c9 2000 	streq.w	r2, [r9]
  40407e:	6019      	strne	r1, [r3, #0]
  404080:	f012 0107 	ands.w	r1, r2, #7
  404084:	f000 8115 	beq.w	4042b2 <_malloc_r+0x48e>
  404088:	f1c1 0008 	rsb	r0, r1, #8
  40408c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404090:	4402      	add	r2, r0
  404092:	3108      	adds	r1, #8
  404094:	eb02 090b 	add.w	r9, r2, fp
  404098:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40409c:	eba1 0909 	sub.w	r9, r1, r9
  4040a0:	4649      	mov	r1, r9
  4040a2:	4628      	mov	r0, r5
  4040a4:	9301      	str	r3, [sp, #4]
  4040a6:	9200      	str	r2, [sp, #0]
  4040a8:	f000 f9c6 	bl	404438 <_sbrk_r>
  4040ac:	1c43      	adds	r3, r0, #1
  4040ae:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4040b2:	f000 8143 	beq.w	40433c <_malloc_r+0x518>
  4040b6:	1a80      	subs	r0, r0, r2
  4040b8:	4448      	add	r0, r9
  4040ba:	f040 0001 	orr.w	r0, r0, #1
  4040be:	6819      	ldr	r1, [r3, #0]
  4040c0:	60ba      	str	r2, [r7, #8]
  4040c2:	4449      	add	r1, r9
  4040c4:	42bc      	cmp	r4, r7
  4040c6:	6050      	str	r0, [r2, #4]
  4040c8:	6019      	str	r1, [r3, #0]
  4040ca:	d017      	beq.n	4040fc <_malloc_r+0x2d8>
  4040cc:	f1b8 0f0f 	cmp.w	r8, #15
  4040d0:	f240 80fb 	bls.w	4042ca <_malloc_r+0x4a6>
  4040d4:	6860      	ldr	r0, [r4, #4]
  4040d6:	f1a8 020c 	sub.w	r2, r8, #12
  4040da:	f022 0207 	bic.w	r2, r2, #7
  4040de:	eb04 0e02 	add.w	lr, r4, r2
  4040e2:	f000 0001 	and.w	r0, r0, #1
  4040e6:	f04f 0c05 	mov.w	ip, #5
  4040ea:	4310      	orrs	r0, r2
  4040ec:	2a0f      	cmp	r2, #15
  4040ee:	6060      	str	r0, [r4, #4]
  4040f0:	f8ce c004 	str.w	ip, [lr, #4]
  4040f4:	f8ce c008 	str.w	ip, [lr, #8]
  4040f8:	f200 8117 	bhi.w	40432a <_malloc_r+0x506>
  4040fc:	4b1d      	ldr	r3, [pc, #116]	; (404174 <_malloc_r+0x350>)
  4040fe:	68bc      	ldr	r4, [r7, #8]
  404100:	681a      	ldr	r2, [r3, #0]
  404102:	4291      	cmp	r1, r2
  404104:	bf88      	it	hi
  404106:	6019      	strhi	r1, [r3, #0]
  404108:	4b1b      	ldr	r3, [pc, #108]	; (404178 <_malloc_r+0x354>)
  40410a:	681a      	ldr	r2, [r3, #0]
  40410c:	4291      	cmp	r1, r2
  40410e:	6862      	ldr	r2, [r4, #4]
  404110:	bf88      	it	hi
  404112:	6019      	strhi	r1, [r3, #0]
  404114:	f022 0203 	bic.w	r2, r2, #3
  404118:	4296      	cmp	r6, r2
  40411a:	eba2 0306 	sub.w	r3, r2, r6
  40411e:	d801      	bhi.n	404124 <_malloc_r+0x300>
  404120:	2b0f      	cmp	r3, #15
  404122:	dc04      	bgt.n	40412e <_malloc_r+0x30a>
  404124:	4628      	mov	r0, r5
  404126:	f000 f981 	bl	40442c <__malloc_unlock>
  40412a:	2400      	movs	r4, #0
  40412c:	e740      	b.n	403fb0 <_malloc_r+0x18c>
  40412e:	19a2      	adds	r2, r4, r6
  404130:	f043 0301 	orr.w	r3, r3, #1
  404134:	f046 0601 	orr.w	r6, r6, #1
  404138:	6066      	str	r6, [r4, #4]
  40413a:	4628      	mov	r0, r5
  40413c:	60ba      	str	r2, [r7, #8]
  40413e:	6053      	str	r3, [r2, #4]
  404140:	f000 f974 	bl	40442c <__malloc_unlock>
  404144:	3408      	adds	r4, #8
  404146:	4620      	mov	r0, r4
  404148:	b003      	add	sp, #12
  40414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40414e:	2b14      	cmp	r3, #20
  404150:	d971      	bls.n	404236 <_malloc_r+0x412>
  404152:	2b54      	cmp	r3, #84	; 0x54
  404154:	f200 80a3 	bhi.w	40429e <_malloc_r+0x47a>
  404158:	0b33      	lsrs	r3, r6, #12
  40415a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40415e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404162:	00c3      	lsls	r3, r0, #3
  404164:	e680      	b.n	403e68 <_malloc_r+0x44>
  404166:	bf00      	nop
  404168:	20000888 	.word	0x20000888
  40416c:	20001158 	.word	0x20001158
  404170:	20001128 	.word	0x20001128
  404174:	20001150 	.word	0x20001150
  404178:	20001154 	.word	0x20001154
  40417c:	20000890 	.word	0x20000890
  404180:	20000c90 	.word	0x20000c90
  404184:	0a5a      	lsrs	r2, r3, #9
  404186:	2a04      	cmp	r2, #4
  404188:	d95b      	bls.n	404242 <_malloc_r+0x41e>
  40418a:	2a14      	cmp	r2, #20
  40418c:	f200 80ae 	bhi.w	4042ec <_malloc_r+0x4c8>
  404190:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404194:	00c9      	lsls	r1, r1, #3
  404196:	325b      	adds	r2, #91	; 0x5b
  404198:	eb07 0c01 	add.w	ip, r7, r1
  40419c:	5879      	ldr	r1, [r7, r1]
  40419e:	f1ac 0c08 	sub.w	ip, ip, #8
  4041a2:	458c      	cmp	ip, r1
  4041a4:	f000 8088 	beq.w	4042b8 <_malloc_r+0x494>
  4041a8:	684a      	ldr	r2, [r1, #4]
  4041aa:	f022 0203 	bic.w	r2, r2, #3
  4041ae:	4293      	cmp	r3, r2
  4041b0:	d273      	bcs.n	40429a <_malloc_r+0x476>
  4041b2:	6889      	ldr	r1, [r1, #8]
  4041b4:	458c      	cmp	ip, r1
  4041b6:	d1f7      	bne.n	4041a8 <_malloc_r+0x384>
  4041b8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4041bc:	687b      	ldr	r3, [r7, #4]
  4041be:	60e2      	str	r2, [r4, #12]
  4041c0:	f8c4 c008 	str.w	ip, [r4, #8]
  4041c4:	6094      	str	r4, [r2, #8]
  4041c6:	f8cc 400c 	str.w	r4, [ip, #12]
  4041ca:	e68f      	b.n	403eec <_malloc_r+0xc8>
  4041cc:	19a1      	adds	r1, r4, r6
  4041ce:	f046 0c01 	orr.w	ip, r6, #1
  4041d2:	f042 0601 	orr.w	r6, r2, #1
  4041d6:	f8c4 c004 	str.w	ip, [r4, #4]
  4041da:	4628      	mov	r0, r5
  4041dc:	6179      	str	r1, [r7, #20]
  4041de:	6139      	str	r1, [r7, #16]
  4041e0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4041e4:	f8c1 e008 	str.w	lr, [r1, #8]
  4041e8:	604e      	str	r6, [r1, #4]
  4041ea:	50e2      	str	r2, [r4, r3]
  4041ec:	f000 f91e 	bl	40442c <__malloc_unlock>
  4041f0:	3408      	adds	r4, #8
  4041f2:	e6dd      	b.n	403fb0 <_malloc_r+0x18c>
  4041f4:	687b      	ldr	r3, [r7, #4]
  4041f6:	e679      	b.n	403eec <_malloc_r+0xc8>
  4041f8:	f108 0801 	add.w	r8, r8, #1
  4041fc:	f018 0f03 	tst.w	r8, #3
  404200:	f10c 0c08 	add.w	ip, ip, #8
  404204:	f47f ae85 	bne.w	403f12 <_malloc_r+0xee>
  404208:	e02d      	b.n	404266 <_malloc_r+0x442>
  40420a:	68dc      	ldr	r4, [r3, #12]
  40420c:	42a3      	cmp	r3, r4
  40420e:	bf08      	it	eq
  404210:	3002      	addeq	r0, #2
  404212:	f43f ae3e 	beq.w	403e92 <_malloc_r+0x6e>
  404216:	e6bb      	b.n	403f90 <_malloc_r+0x16c>
  404218:	4419      	add	r1, r3
  40421a:	461c      	mov	r4, r3
  40421c:	684a      	ldr	r2, [r1, #4]
  40421e:	68db      	ldr	r3, [r3, #12]
  404220:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404224:	f042 0201 	orr.w	r2, r2, #1
  404228:	604a      	str	r2, [r1, #4]
  40422a:	4628      	mov	r0, r5
  40422c:	60f3      	str	r3, [r6, #12]
  40422e:	609e      	str	r6, [r3, #8]
  404230:	f000 f8fc 	bl	40442c <__malloc_unlock>
  404234:	e6bc      	b.n	403fb0 <_malloc_r+0x18c>
  404236:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40423a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40423e:	00c3      	lsls	r3, r0, #3
  404240:	e612      	b.n	403e68 <_malloc_r+0x44>
  404242:	099a      	lsrs	r2, r3, #6
  404244:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404248:	00c9      	lsls	r1, r1, #3
  40424a:	3238      	adds	r2, #56	; 0x38
  40424c:	e7a4      	b.n	404198 <_malloc_r+0x374>
  40424e:	42bc      	cmp	r4, r7
  404250:	d054      	beq.n	4042fc <_malloc_r+0x4d8>
  404252:	68bc      	ldr	r4, [r7, #8]
  404254:	6862      	ldr	r2, [r4, #4]
  404256:	f022 0203 	bic.w	r2, r2, #3
  40425a:	e75d      	b.n	404118 <_malloc_r+0x2f4>
  40425c:	f859 3908 	ldr.w	r3, [r9], #-8
  404260:	4599      	cmp	r9, r3
  404262:	f040 8086 	bne.w	404372 <_malloc_r+0x54e>
  404266:	f010 0f03 	tst.w	r0, #3
  40426a:	f100 30ff 	add.w	r0, r0, #4294967295
  40426e:	d1f5      	bne.n	40425c <_malloc_r+0x438>
  404270:	687b      	ldr	r3, [r7, #4]
  404272:	ea23 0304 	bic.w	r3, r3, r4
  404276:	607b      	str	r3, [r7, #4]
  404278:	0064      	lsls	r4, r4, #1
  40427a:	429c      	cmp	r4, r3
  40427c:	f63f aec7 	bhi.w	40400e <_malloc_r+0x1ea>
  404280:	2c00      	cmp	r4, #0
  404282:	f43f aec4 	beq.w	40400e <_malloc_r+0x1ea>
  404286:	421c      	tst	r4, r3
  404288:	4640      	mov	r0, r8
  40428a:	f47f ae3e 	bne.w	403f0a <_malloc_r+0xe6>
  40428e:	0064      	lsls	r4, r4, #1
  404290:	421c      	tst	r4, r3
  404292:	f100 0004 	add.w	r0, r0, #4
  404296:	d0fa      	beq.n	40428e <_malloc_r+0x46a>
  404298:	e637      	b.n	403f0a <_malloc_r+0xe6>
  40429a:	468c      	mov	ip, r1
  40429c:	e78c      	b.n	4041b8 <_malloc_r+0x394>
  40429e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4042a2:	d815      	bhi.n	4042d0 <_malloc_r+0x4ac>
  4042a4:	0bf3      	lsrs	r3, r6, #15
  4042a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4042aa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4042ae:	00c3      	lsls	r3, r0, #3
  4042b0:	e5da      	b.n	403e68 <_malloc_r+0x44>
  4042b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4042b6:	e6ed      	b.n	404094 <_malloc_r+0x270>
  4042b8:	687b      	ldr	r3, [r7, #4]
  4042ba:	1092      	asrs	r2, r2, #2
  4042bc:	2101      	movs	r1, #1
  4042be:	fa01 f202 	lsl.w	r2, r1, r2
  4042c2:	4313      	orrs	r3, r2
  4042c4:	607b      	str	r3, [r7, #4]
  4042c6:	4662      	mov	r2, ip
  4042c8:	e779      	b.n	4041be <_malloc_r+0x39a>
  4042ca:	2301      	movs	r3, #1
  4042cc:	6053      	str	r3, [r2, #4]
  4042ce:	e729      	b.n	404124 <_malloc_r+0x300>
  4042d0:	f240 5254 	movw	r2, #1364	; 0x554
  4042d4:	4293      	cmp	r3, r2
  4042d6:	d822      	bhi.n	40431e <_malloc_r+0x4fa>
  4042d8:	0cb3      	lsrs	r3, r6, #18
  4042da:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4042de:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4042e2:	00c3      	lsls	r3, r0, #3
  4042e4:	e5c0      	b.n	403e68 <_malloc_r+0x44>
  4042e6:	f103 0b10 	add.w	fp, r3, #16
  4042ea:	e6ae      	b.n	40404a <_malloc_r+0x226>
  4042ec:	2a54      	cmp	r2, #84	; 0x54
  4042ee:	d829      	bhi.n	404344 <_malloc_r+0x520>
  4042f0:	0b1a      	lsrs	r2, r3, #12
  4042f2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4042f6:	00c9      	lsls	r1, r1, #3
  4042f8:	326e      	adds	r2, #110	; 0x6e
  4042fa:	e74d      	b.n	404198 <_malloc_r+0x374>
  4042fc:	4b20      	ldr	r3, [pc, #128]	; (404380 <_malloc_r+0x55c>)
  4042fe:	6819      	ldr	r1, [r3, #0]
  404300:	4459      	add	r1, fp
  404302:	6019      	str	r1, [r3, #0]
  404304:	e6b2      	b.n	40406c <_malloc_r+0x248>
  404306:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40430a:	2800      	cmp	r0, #0
  40430c:	f47f aeae 	bne.w	40406c <_malloc_r+0x248>
  404310:	eb08 030b 	add.w	r3, r8, fp
  404314:	68ba      	ldr	r2, [r7, #8]
  404316:	f043 0301 	orr.w	r3, r3, #1
  40431a:	6053      	str	r3, [r2, #4]
  40431c:	e6ee      	b.n	4040fc <_malloc_r+0x2d8>
  40431e:	207f      	movs	r0, #127	; 0x7f
  404320:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404324:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404328:	e59e      	b.n	403e68 <_malloc_r+0x44>
  40432a:	f104 0108 	add.w	r1, r4, #8
  40432e:	4628      	mov	r0, r5
  404330:	9300      	str	r3, [sp, #0]
  404332:	f002 fb99 	bl	406a68 <_free_r>
  404336:	9b00      	ldr	r3, [sp, #0]
  404338:	6819      	ldr	r1, [r3, #0]
  40433a:	e6df      	b.n	4040fc <_malloc_r+0x2d8>
  40433c:	2001      	movs	r0, #1
  40433e:	f04f 0900 	mov.w	r9, #0
  404342:	e6bc      	b.n	4040be <_malloc_r+0x29a>
  404344:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404348:	d805      	bhi.n	404356 <_malloc_r+0x532>
  40434a:	0bda      	lsrs	r2, r3, #15
  40434c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404350:	00c9      	lsls	r1, r1, #3
  404352:	3277      	adds	r2, #119	; 0x77
  404354:	e720      	b.n	404198 <_malloc_r+0x374>
  404356:	f240 5154 	movw	r1, #1364	; 0x554
  40435a:	428a      	cmp	r2, r1
  40435c:	d805      	bhi.n	40436a <_malloc_r+0x546>
  40435e:	0c9a      	lsrs	r2, r3, #18
  404360:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404364:	00c9      	lsls	r1, r1, #3
  404366:	327c      	adds	r2, #124	; 0x7c
  404368:	e716      	b.n	404198 <_malloc_r+0x374>
  40436a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40436e:	227e      	movs	r2, #126	; 0x7e
  404370:	e712      	b.n	404198 <_malloc_r+0x374>
  404372:	687b      	ldr	r3, [r7, #4]
  404374:	e780      	b.n	404278 <_malloc_r+0x454>
  404376:	08f0      	lsrs	r0, r6, #3
  404378:	f106 0308 	add.w	r3, r6, #8
  40437c:	e600      	b.n	403f80 <_malloc_r+0x15c>
  40437e:	bf00      	nop
  404380:	20001128 	.word	0x20001128

00404384 <memset>:
  404384:	b470      	push	{r4, r5, r6}
  404386:	0786      	lsls	r6, r0, #30
  404388:	d046      	beq.n	404418 <memset+0x94>
  40438a:	1e54      	subs	r4, r2, #1
  40438c:	2a00      	cmp	r2, #0
  40438e:	d041      	beq.n	404414 <memset+0x90>
  404390:	b2ca      	uxtb	r2, r1
  404392:	4603      	mov	r3, r0
  404394:	e002      	b.n	40439c <memset+0x18>
  404396:	f114 34ff 	adds.w	r4, r4, #4294967295
  40439a:	d33b      	bcc.n	404414 <memset+0x90>
  40439c:	f803 2b01 	strb.w	r2, [r3], #1
  4043a0:	079d      	lsls	r5, r3, #30
  4043a2:	d1f8      	bne.n	404396 <memset+0x12>
  4043a4:	2c03      	cmp	r4, #3
  4043a6:	d92e      	bls.n	404406 <memset+0x82>
  4043a8:	b2cd      	uxtb	r5, r1
  4043aa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4043ae:	2c0f      	cmp	r4, #15
  4043b0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4043b4:	d919      	bls.n	4043ea <memset+0x66>
  4043b6:	f103 0210 	add.w	r2, r3, #16
  4043ba:	4626      	mov	r6, r4
  4043bc:	3e10      	subs	r6, #16
  4043be:	2e0f      	cmp	r6, #15
  4043c0:	f842 5c10 	str.w	r5, [r2, #-16]
  4043c4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4043c8:	f842 5c08 	str.w	r5, [r2, #-8]
  4043cc:	f842 5c04 	str.w	r5, [r2, #-4]
  4043d0:	f102 0210 	add.w	r2, r2, #16
  4043d4:	d8f2      	bhi.n	4043bc <memset+0x38>
  4043d6:	f1a4 0210 	sub.w	r2, r4, #16
  4043da:	f022 020f 	bic.w	r2, r2, #15
  4043de:	f004 040f 	and.w	r4, r4, #15
  4043e2:	3210      	adds	r2, #16
  4043e4:	2c03      	cmp	r4, #3
  4043e6:	4413      	add	r3, r2
  4043e8:	d90d      	bls.n	404406 <memset+0x82>
  4043ea:	461e      	mov	r6, r3
  4043ec:	4622      	mov	r2, r4
  4043ee:	3a04      	subs	r2, #4
  4043f0:	2a03      	cmp	r2, #3
  4043f2:	f846 5b04 	str.w	r5, [r6], #4
  4043f6:	d8fa      	bhi.n	4043ee <memset+0x6a>
  4043f8:	1f22      	subs	r2, r4, #4
  4043fa:	f022 0203 	bic.w	r2, r2, #3
  4043fe:	3204      	adds	r2, #4
  404400:	4413      	add	r3, r2
  404402:	f004 0403 	and.w	r4, r4, #3
  404406:	b12c      	cbz	r4, 404414 <memset+0x90>
  404408:	b2c9      	uxtb	r1, r1
  40440a:	441c      	add	r4, r3
  40440c:	f803 1b01 	strb.w	r1, [r3], #1
  404410:	429c      	cmp	r4, r3
  404412:	d1fb      	bne.n	40440c <memset+0x88>
  404414:	bc70      	pop	{r4, r5, r6}
  404416:	4770      	bx	lr
  404418:	4614      	mov	r4, r2
  40441a:	4603      	mov	r3, r0
  40441c:	e7c2      	b.n	4043a4 <memset+0x20>
  40441e:	bf00      	nop

00404420 <__malloc_lock>:
  404420:	4801      	ldr	r0, [pc, #4]	; (404428 <__malloc_lock+0x8>)
  404422:	f002 bc15 	b.w	406c50 <__retarget_lock_acquire_recursive>
  404426:	bf00      	nop
  404428:	200011c0 	.word	0x200011c0

0040442c <__malloc_unlock>:
  40442c:	4801      	ldr	r0, [pc, #4]	; (404434 <__malloc_unlock+0x8>)
  40442e:	f002 bc11 	b.w	406c54 <__retarget_lock_release_recursive>
  404432:	bf00      	nop
  404434:	200011c0 	.word	0x200011c0

00404438 <_sbrk_r>:
  404438:	b538      	push	{r3, r4, r5, lr}
  40443a:	4c07      	ldr	r4, [pc, #28]	; (404458 <_sbrk_r+0x20>)
  40443c:	2300      	movs	r3, #0
  40443e:	4605      	mov	r5, r0
  404440:	4608      	mov	r0, r1
  404442:	6023      	str	r3, [r4, #0]
  404444:	f7fe fd40 	bl	402ec8 <_sbrk>
  404448:	1c43      	adds	r3, r0, #1
  40444a:	d000      	beq.n	40444e <_sbrk_r+0x16>
  40444c:	bd38      	pop	{r3, r4, r5, pc}
  40444e:	6823      	ldr	r3, [r4, #0]
  404450:	2b00      	cmp	r3, #0
  404452:	d0fb      	beq.n	40444c <_sbrk_r+0x14>
  404454:	602b      	str	r3, [r5, #0]
  404456:	bd38      	pop	{r3, r4, r5, pc}
  404458:	200011d4 	.word	0x200011d4

0040445c <sprintf>:
  40445c:	b40e      	push	{r1, r2, r3}
  40445e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404460:	b09c      	sub	sp, #112	; 0x70
  404462:	ab21      	add	r3, sp, #132	; 0x84
  404464:	490f      	ldr	r1, [pc, #60]	; (4044a4 <sprintf+0x48>)
  404466:	f853 2b04 	ldr.w	r2, [r3], #4
  40446a:	9301      	str	r3, [sp, #4]
  40446c:	4605      	mov	r5, r0
  40446e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404472:	6808      	ldr	r0, [r1, #0]
  404474:	9502      	str	r5, [sp, #8]
  404476:	f44f 7702 	mov.w	r7, #520	; 0x208
  40447a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40447e:	a902      	add	r1, sp, #8
  404480:	9506      	str	r5, [sp, #24]
  404482:	f8ad 7014 	strh.w	r7, [sp, #20]
  404486:	9404      	str	r4, [sp, #16]
  404488:	9407      	str	r4, [sp, #28]
  40448a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40448e:	f000 f885 	bl	40459c <_svfprintf_r>
  404492:	9b02      	ldr	r3, [sp, #8]
  404494:	2200      	movs	r2, #0
  404496:	701a      	strb	r2, [r3, #0]
  404498:	b01c      	add	sp, #112	; 0x70
  40449a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40449e:	b003      	add	sp, #12
  4044a0:	4770      	bx	lr
  4044a2:	bf00      	nop
  4044a4:	20000458 	.word	0x20000458
	...

004044c0 <strlen>:
  4044c0:	f890 f000 	pld	[r0]
  4044c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4044c8:	f020 0107 	bic.w	r1, r0, #7
  4044cc:	f06f 0c00 	mvn.w	ip, #0
  4044d0:	f010 0407 	ands.w	r4, r0, #7
  4044d4:	f891 f020 	pld	[r1, #32]
  4044d8:	f040 8049 	bne.w	40456e <strlen+0xae>
  4044dc:	f04f 0400 	mov.w	r4, #0
  4044e0:	f06f 0007 	mvn.w	r0, #7
  4044e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4044e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4044ec:	f100 0008 	add.w	r0, r0, #8
  4044f0:	fa82 f24c 	uadd8	r2, r2, ip
  4044f4:	faa4 f28c 	sel	r2, r4, ip
  4044f8:	fa83 f34c 	uadd8	r3, r3, ip
  4044fc:	faa2 f38c 	sel	r3, r2, ip
  404500:	bb4b      	cbnz	r3, 404556 <strlen+0x96>
  404502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404506:	fa82 f24c 	uadd8	r2, r2, ip
  40450a:	f100 0008 	add.w	r0, r0, #8
  40450e:	faa4 f28c 	sel	r2, r4, ip
  404512:	fa83 f34c 	uadd8	r3, r3, ip
  404516:	faa2 f38c 	sel	r3, r2, ip
  40451a:	b9e3      	cbnz	r3, 404556 <strlen+0x96>
  40451c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404520:	fa82 f24c 	uadd8	r2, r2, ip
  404524:	f100 0008 	add.w	r0, r0, #8
  404528:	faa4 f28c 	sel	r2, r4, ip
  40452c:	fa83 f34c 	uadd8	r3, r3, ip
  404530:	faa2 f38c 	sel	r3, r2, ip
  404534:	b97b      	cbnz	r3, 404556 <strlen+0x96>
  404536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40453a:	f101 0120 	add.w	r1, r1, #32
  40453e:	fa82 f24c 	uadd8	r2, r2, ip
  404542:	f100 0008 	add.w	r0, r0, #8
  404546:	faa4 f28c 	sel	r2, r4, ip
  40454a:	fa83 f34c 	uadd8	r3, r3, ip
  40454e:	faa2 f38c 	sel	r3, r2, ip
  404552:	2b00      	cmp	r3, #0
  404554:	d0c6      	beq.n	4044e4 <strlen+0x24>
  404556:	2a00      	cmp	r2, #0
  404558:	bf04      	itt	eq
  40455a:	3004      	addeq	r0, #4
  40455c:	461a      	moveq	r2, r3
  40455e:	ba12      	rev	r2, r2
  404560:	fab2 f282 	clz	r2, r2
  404564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40456c:	4770      	bx	lr
  40456e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404572:	f004 0503 	and.w	r5, r4, #3
  404576:	f1c4 0000 	rsb	r0, r4, #0
  40457a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40457e:	f014 0f04 	tst.w	r4, #4
  404582:	f891 f040 	pld	[r1, #64]	; 0x40
  404586:	fa0c f505 	lsl.w	r5, ip, r5
  40458a:	ea62 0205 	orn	r2, r2, r5
  40458e:	bf1c      	itt	ne
  404590:	ea63 0305 	ornne	r3, r3, r5
  404594:	4662      	movne	r2, ip
  404596:	f04f 0400 	mov.w	r4, #0
  40459a:	e7a9      	b.n	4044f0 <strlen+0x30>

0040459c <_svfprintf_r>:
  40459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045a0:	b0c3      	sub	sp, #268	; 0x10c
  4045a2:	460c      	mov	r4, r1
  4045a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4045a6:	4692      	mov	sl, r2
  4045a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4045aa:	900c      	str	r0, [sp, #48]	; 0x30
  4045ac:	f002 fb42 	bl	406c34 <_localeconv_r>
  4045b0:	6803      	ldr	r3, [r0, #0]
  4045b2:	931a      	str	r3, [sp, #104]	; 0x68
  4045b4:	4618      	mov	r0, r3
  4045b6:	f7ff ff83 	bl	4044c0 <strlen>
  4045ba:	89a3      	ldrh	r3, [r4, #12]
  4045bc:	9019      	str	r0, [sp, #100]	; 0x64
  4045be:	0619      	lsls	r1, r3, #24
  4045c0:	d503      	bpl.n	4045ca <_svfprintf_r+0x2e>
  4045c2:	6923      	ldr	r3, [r4, #16]
  4045c4:	2b00      	cmp	r3, #0
  4045c6:	f001 8003 	beq.w	4055d0 <_svfprintf_r+0x1034>
  4045ca:	2300      	movs	r3, #0
  4045cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4045d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4045d2:	9315      	str	r3, [sp, #84]	; 0x54
  4045d4:	9314      	str	r3, [sp, #80]	; 0x50
  4045d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4045d8:	9326      	str	r3, [sp, #152]	; 0x98
  4045da:	9318      	str	r3, [sp, #96]	; 0x60
  4045dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4045de:	9309      	str	r3, [sp, #36]	; 0x24
  4045e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4045e4:	46c8      	mov	r8, r9
  4045e6:	9316      	str	r3, [sp, #88]	; 0x58
  4045e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4045ea:	f89a 3000 	ldrb.w	r3, [sl]
  4045ee:	4654      	mov	r4, sl
  4045f0:	b1e3      	cbz	r3, 40462c <_svfprintf_r+0x90>
  4045f2:	2b25      	cmp	r3, #37	; 0x25
  4045f4:	d102      	bne.n	4045fc <_svfprintf_r+0x60>
  4045f6:	e019      	b.n	40462c <_svfprintf_r+0x90>
  4045f8:	2b25      	cmp	r3, #37	; 0x25
  4045fa:	d003      	beq.n	404604 <_svfprintf_r+0x68>
  4045fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404600:	2b00      	cmp	r3, #0
  404602:	d1f9      	bne.n	4045f8 <_svfprintf_r+0x5c>
  404604:	eba4 050a 	sub.w	r5, r4, sl
  404608:	b185      	cbz	r5, 40462c <_svfprintf_r+0x90>
  40460a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40460c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40460e:	f8c8 a000 	str.w	sl, [r8]
  404612:	3301      	adds	r3, #1
  404614:	442a      	add	r2, r5
  404616:	2b07      	cmp	r3, #7
  404618:	f8c8 5004 	str.w	r5, [r8, #4]
  40461c:	9227      	str	r2, [sp, #156]	; 0x9c
  40461e:	9326      	str	r3, [sp, #152]	; 0x98
  404620:	dc7f      	bgt.n	404722 <_svfprintf_r+0x186>
  404622:	f108 0808 	add.w	r8, r8, #8
  404626:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404628:	442b      	add	r3, r5
  40462a:	9309      	str	r3, [sp, #36]	; 0x24
  40462c:	7823      	ldrb	r3, [r4, #0]
  40462e:	2b00      	cmp	r3, #0
  404630:	d07f      	beq.n	404732 <_svfprintf_r+0x196>
  404632:	2300      	movs	r3, #0
  404634:	461a      	mov	r2, r3
  404636:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40463a:	4619      	mov	r1, r3
  40463c:	930d      	str	r3, [sp, #52]	; 0x34
  40463e:	469b      	mov	fp, r3
  404640:	f04f 30ff 	mov.w	r0, #4294967295
  404644:	7863      	ldrb	r3, [r4, #1]
  404646:	900a      	str	r0, [sp, #40]	; 0x28
  404648:	f104 0a01 	add.w	sl, r4, #1
  40464c:	f10a 0a01 	add.w	sl, sl, #1
  404650:	f1a3 0020 	sub.w	r0, r3, #32
  404654:	2858      	cmp	r0, #88	; 0x58
  404656:	f200 83c1 	bhi.w	404ddc <_svfprintf_r+0x840>
  40465a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40465e:	0238      	.short	0x0238
  404660:	03bf03bf 	.word	0x03bf03bf
  404664:	03bf0240 	.word	0x03bf0240
  404668:	03bf03bf 	.word	0x03bf03bf
  40466c:	03bf03bf 	.word	0x03bf03bf
  404670:	024503bf 	.word	0x024503bf
  404674:	03bf0203 	.word	0x03bf0203
  404678:	026b005d 	.word	0x026b005d
  40467c:	028603bf 	.word	0x028603bf
  404680:	039d039d 	.word	0x039d039d
  404684:	039d039d 	.word	0x039d039d
  404688:	039d039d 	.word	0x039d039d
  40468c:	039d039d 	.word	0x039d039d
  404690:	03bf039d 	.word	0x03bf039d
  404694:	03bf03bf 	.word	0x03bf03bf
  404698:	03bf03bf 	.word	0x03bf03bf
  40469c:	03bf03bf 	.word	0x03bf03bf
  4046a0:	03bf03bf 	.word	0x03bf03bf
  4046a4:	033703bf 	.word	0x033703bf
  4046a8:	03bf0357 	.word	0x03bf0357
  4046ac:	03bf0357 	.word	0x03bf0357
  4046b0:	03bf03bf 	.word	0x03bf03bf
  4046b4:	039803bf 	.word	0x039803bf
  4046b8:	03bf03bf 	.word	0x03bf03bf
  4046bc:	03bf03ad 	.word	0x03bf03ad
  4046c0:	03bf03bf 	.word	0x03bf03bf
  4046c4:	03bf03bf 	.word	0x03bf03bf
  4046c8:	03bf0259 	.word	0x03bf0259
  4046cc:	031e03bf 	.word	0x031e03bf
  4046d0:	03bf03bf 	.word	0x03bf03bf
  4046d4:	03bf03bf 	.word	0x03bf03bf
  4046d8:	03bf03bf 	.word	0x03bf03bf
  4046dc:	03bf03bf 	.word	0x03bf03bf
  4046e0:	03bf03bf 	.word	0x03bf03bf
  4046e4:	02db02c6 	.word	0x02db02c6
  4046e8:	03570357 	.word	0x03570357
  4046ec:	028b0357 	.word	0x028b0357
  4046f0:	03bf02db 	.word	0x03bf02db
  4046f4:	029003bf 	.word	0x029003bf
  4046f8:	029d03bf 	.word	0x029d03bf
  4046fc:	02b401cc 	.word	0x02b401cc
  404700:	03bf0208 	.word	0x03bf0208
  404704:	03bf01e1 	.word	0x03bf01e1
  404708:	03bf007e 	.word	0x03bf007e
  40470c:	020d03bf 	.word	0x020d03bf
  404710:	980d      	ldr	r0, [sp, #52]	; 0x34
  404712:	930f      	str	r3, [sp, #60]	; 0x3c
  404714:	4240      	negs	r0, r0
  404716:	900d      	str	r0, [sp, #52]	; 0x34
  404718:	f04b 0b04 	orr.w	fp, fp, #4
  40471c:	f89a 3000 	ldrb.w	r3, [sl]
  404720:	e794      	b.n	40464c <_svfprintf_r+0xb0>
  404722:	aa25      	add	r2, sp, #148	; 0x94
  404724:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404726:	980c      	ldr	r0, [sp, #48]	; 0x30
  404728:	f003 f8a0 	bl	40786c <__ssprint_r>
  40472c:	b940      	cbnz	r0, 404740 <_svfprintf_r+0x1a4>
  40472e:	46c8      	mov	r8, r9
  404730:	e779      	b.n	404626 <_svfprintf_r+0x8a>
  404732:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404734:	b123      	cbz	r3, 404740 <_svfprintf_r+0x1a4>
  404736:	980c      	ldr	r0, [sp, #48]	; 0x30
  404738:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40473a:	aa25      	add	r2, sp, #148	; 0x94
  40473c:	f003 f896 	bl	40786c <__ssprint_r>
  404740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404742:	899b      	ldrh	r3, [r3, #12]
  404744:	f013 0f40 	tst.w	r3, #64	; 0x40
  404748:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40474a:	bf18      	it	ne
  40474c:	f04f 33ff 	movne.w	r3, #4294967295
  404750:	9309      	str	r3, [sp, #36]	; 0x24
  404752:	9809      	ldr	r0, [sp, #36]	; 0x24
  404754:	b043      	add	sp, #268	; 0x10c
  404756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40475a:	f01b 0f20 	tst.w	fp, #32
  40475e:	9311      	str	r3, [sp, #68]	; 0x44
  404760:	f040 81dd 	bne.w	404b1e <_svfprintf_r+0x582>
  404764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404766:	f01b 0f10 	tst.w	fp, #16
  40476a:	4613      	mov	r3, r2
  40476c:	f040 856e 	bne.w	40524c <_svfprintf_r+0xcb0>
  404770:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404774:	f000 856a 	beq.w	40524c <_svfprintf_r+0xcb0>
  404778:	8814      	ldrh	r4, [r2, #0]
  40477a:	3204      	adds	r2, #4
  40477c:	2500      	movs	r5, #0
  40477e:	2301      	movs	r3, #1
  404780:	920f      	str	r2, [sp, #60]	; 0x3c
  404782:	2700      	movs	r7, #0
  404784:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404788:	990a      	ldr	r1, [sp, #40]	; 0x28
  40478a:	1c4a      	adds	r2, r1, #1
  40478c:	f000 8265 	beq.w	404c5a <_svfprintf_r+0x6be>
  404790:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404794:	9207      	str	r2, [sp, #28]
  404796:	ea54 0205 	orrs.w	r2, r4, r5
  40479a:	f040 8264 	bne.w	404c66 <_svfprintf_r+0x6ca>
  40479e:	2900      	cmp	r1, #0
  4047a0:	f040 843c 	bne.w	40501c <_svfprintf_r+0xa80>
  4047a4:	2b00      	cmp	r3, #0
  4047a6:	f040 84d7 	bne.w	405158 <_svfprintf_r+0xbbc>
  4047aa:	f01b 0301 	ands.w	r3, fp, #1
  4047ae:	930e      	str	r3, [sp, #56]	; 0x38
  4047b0:	f000 8604 	beq.w	4053bc <_svfprintf_r+0xe20>
  4047b4:	ae42      	add	r6, sp, #264	; 0x108
  4047b6:	2330      	movs	r3, #48	; 0x30
  4047b8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4047bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4047c0:	4293      	cmp	r3, r2
  4047c2:	bfb8      	it	lt
  4047c4:	4613      	movlt	r3, r2
  4047c6:	9308      	str	r3, [sp, #32]
  4047c8:	2300      	movs	r3, #0
  4047ca:	9312      	str	r3, [sp, #72]	; 0x48
  4047cc:	b117      	cbz	r7, 4047d4 <_svfprintf_r+0x238>
  4047ce:	9b08      	ldr	r3, [sp, #32]
  4047d0:	3301      	adds	r3, #1
  4047d2:	9308      	str	r3, [sp, #32]
  4047d4:	9b07      	ldr	r3, [sp, #28]
  4047d6:	f013 0302 	ands.w	r3, r3, #2
  4047da:	9310      	str	r3, [sp, #64]	; 0x40
  4047dc:	d002      	beq.n	4047e4 <_svfprintf_r+0x248>
  4047de:	9b08      	ldr	r3, [sp, #32]
  4047e0:	3302      	adds	r3, #2
  4047e2:	9308      	str	r3, [sp, #32]
  4047e4:	9b07      	ldr	r3, [sp, #28]
  4047e6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4047ea:	f040 830e 	bne.w	404e0a <_svfprintf_r+0x86e>
  4047ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4047f0:	9a08      	ldr	r2, [sp, #32]
  4047f2:	eba3 0b02 	sub.w	fp, r3, r2
  4047f6:	f1bb 0f00 	cmp.w	fp, #0
  4047fa:	f340 8306 	ble.w	404e0a <_svfprintf_r+0x86e>
  4047fe:	f1bb 0f10 	cmp.w	fp, #16
  404802:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404804:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404806:	dd29      	ble.n	40485c <_svfprintf_r+0x2c0>
  404808:	4643      	mov	r3, r8
  40480a:	4621      	mov	r1, r4
  40480c:	46a8      	mov	r8, r5
  40480e:	2710      	movs	r7, #16
  404810:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404814:	e006      	b.n	404824 <_svfprintf_r+0x288>
  404816:	f1ab 0b10 	sub.w	fp, fp, #16
  40481a:	f1bb 0f10 	cmp.w	fp, #16
  40481e:	f103 0308 	add.w	r3, r3, #8
  404822:	dd18      	ble.n	404856 <_svfprintf_r+0x2ba>
  404824:	3201      	adds	r2, #1
  404826:	48b7      	ldr	r0, [pc, #732]	; (404b04 <_svfprintf_r+0x568>)
  404828:	9226      	str	r2, [sp, #152]	; 0x98
  40482a:	3110      	adds	r1, #16
  40482c:	2a07      	cmp	r2, #7
  40482e:	9127      	str	r1, [sp, #156]	; 0x9c
  404830:	e883 0081 	stmia.w	r3, {r0, r7}
  404834:	ddef      	ble.n	404816 <_svfprintf_r+0x27a>
  404836:	aa25      	add	r2, sp, #148	; 0x94
  404838:	4629      	mov	r1, r5
  40483a:	4620      	mov	r0, r4
  40483c:	f003 f816 	bl	40786c <__ssprint_r>
  404840:	2800      	cmp	r0, #0
  404842:	f47f af7d 	bne.w	404740 <_svfprintf_r+0x1a4>
  404846:	f1ab 0b10 	sub.w	fp, fp, #16
  40484a:	f1bb 0f10 	cmp.w	fp, #16
  40484e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404850:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404852:	464b      	mov	r3, r9
  404854:	dce6      	bgt.n	404824 <_svfprintf_r+0x288>
  404856:	4645      	mov	r5, r8
  404858:	460c      	mov	r4, r1
  40485a:	4698      	mov	r8, r3
  40485c:	3201      	adds	r2, #1
  40485e:	4ba9      	ldr	r3, [pc, #676]	; (404b04 <_svfprintf_r+0x568>)
  404860:	9226      	str	r2, [sp, #152]	; 0x98
  404862:	445c      	add	r4, fp
  404864:	2a07      	cmp	r2, #7
  404866:	9427      	str	r4, [sp, #156]	; 0x9c
  404868:	e888 0808 	stmia.w	r8, {r3, fp}
  40486c:	f300 8498 	bgt.w	4051a0 <_svfprintf_r+0xc04>
  404870:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404874:	f108 0808 	add.w	r8, r8, #8
  404878:	b177      	cbz	r7, 404898 <_svfprintf_r+0x2fc>
  40487a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40487c:	3301      	adds	r3, #1
  40487e:	3401      	adds	r4, #1
  404880:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404884:	2201      	movs	r2, #1
  404886:	2b07      	cmp	r3, #7
  404888:	9427      	str	r4, [sp, #156]	; 0x9c
  40488a:	9326      	str	r3, [sp, #152]	; 0x98
  40488c:	e888 0006 	stmia.w	r8, {r1, r2}
  404890:	f300 83db 	bgt.w	40504a <_svfprintf_r+0xaae>
  404894:	f108 0808 	add.w	r8, r8, #8
  404898:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40489a:	b16b      	cbz	r3, 4048b8 <_svfprintf_r+0x31c>
  40489c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40489e:	3301      	adds	r3, #1
  4048a0:	3402      	adds	r4, #2
  4048a2:	a91e      	add	r1, sp, #120	; 0x78
  4048a4:	2202      	movs	r2, #2
  4048a6:	2b07      	cmp	r3, #7
  4048a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4048aa:	9326      	str	r3, [sp, #152]	; 0x98
  4048ac:	e888 0006 	stmia.w	r8, {r1, r2}
  4048b0:	f300 83d6 	bgt.w	405060 <_svfprintf_r+0xac4>
  4048b4:	f108 0808 	add.w	r8, r8, #8
  4048b8:	2d80      	cmp	r5, #128	; 0x80
  4048ba:	f000 8315 	beq.w	404ee8 <_svfprintf_r+0x94c>
  4048be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4048c2:	1a9f      	subs	r7, r3, r2
  4048c4:	2f00      	cmp	r7, #0
  4048c6:	dd36      	ble.n	404936 <_svfprintf_r+0x39a>
  4048c8:	2f10      	cmp	r7, #16
  4048ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048cc:	4d8e      	ldr	r5, [pc, #568]	; (404b08 <_svfprintf_r+0x56c>)
  4048ce:	dd27      	ble.n	404920 <_svfprintf_r+0x384>
  4048d0:	4642      	mov	r2, r8
  4048d2:	4621      	mov	r1, r4
  4048d4:	46b0      	mov	r8, r6
  4048d6:	f04f 0b10 	mov.w	fp, #16
  4048da:	462e      	mov	r6, r5
  4048dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4048de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4048e0:	e004      	b.n	4048ec <_svfprintf_r+0x350>
  4048e2:	3f10      	subs	r7, #16
  4048e4:	2f10      	cmp	r7, #16
  4048e6:	f102 0208 	add.w	r2, r2, #8
  4048ea:	dd15      	ble.n	404918 <_svfprintf_r+0x37c>
  4048ec:	3301      	adds	r3, #1
  4048ee:	3110      	adds	r1, #16
  4048f0:	2b07      	cmp	r3, #7
  4048f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4048f4:	9326      	str	r3, [sp, #152]	; 0x98
  4048f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4048fa:	ddf2      	ble.n	4048e2 <_svfprintf_r+0x346>
  4048fc:	aa25      	add	r2, sp, #148	; 0x94
  4048fe:	4629      	mov	r1, r5
  404900:	4620      	mov	r0, r4
  404902:	f002 ffb3 	bl	40786c <__ssprint_r>
  404906:	2800      	cmp	r0, #0
  404908:	f47f af1a 	bne.w	404740 <_svfprintf_r+0x1a4>
  40490c:	3f10      	subs	r7, #16
  40490e:	2f10      	cmp	r7, #16
  404910:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404912:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404914:	464a      	mov	r2, r9
  404916:	dce9      	bgt.n	4048ec <_svfprintf_r+0x350>
  404918:	4635      	mov	r5, r6
  40491a:	460c      	mov	r4, r1
  40491c:	4646      	mov	r6, r8
  40491e:	4690      	mov	r8, r2
  404920:	3301      	adds	r3, #1
  404922:	443c      	add	r4, r7
  404924:	2b07      	cmp	r3, #7
  404926:	9427      	str	r4, [sp, #156]	; 0x9c
  404928:	9326      	str	r3, [sp, #152]	; 0x98
  40492a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40492e:	f300 8381 	bgt.w	405034 <_svfprintf_r+0xa98>
  404932:	f108 0808 	add.w	r8, r8, #8
  404936:	9b07      	ldr	r3, [sp, #28]
  404938:	05df      	lsls	r7, r3, #23
  40493a:	f100 8268 	bmi.w	404e0e <_svfprintf_r+0x872>
  40493e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404940:	990e      	ldr	r1, [sp, #56]	; 0x38
  404942:	f8c8 6000 	str.w	r6, [r8]
  404946:	3301      	adds	r3, #1
  404948:	440c      	add	r4, r1
  40494a:	2b07      	cmp	r3, #7
  40494c:	9427      	str	r4, [sp, #156]	; 0x9c
  40494e:	f8c8 1004 	str.w	r1, [r8, #4]
  404952:	9326      	str	r3, [sp, #152]	; 0x98
  404954:	f300 834d 	bgt.w	404ff2 <_svfprintf_r+0xa56>
  404958:	f108 0808 	add.w	r8, r8, #8
  40495c:	9b07      	ldr	r3, [sp, #28]
  40495e:	075b      	lsls	r3, r3, #29
  404960:	d53a      	bpl.n	4049d8 <_svfprintf_r+0x43c>
  404962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404964:	9a08      	ldr	r2, [sp, #32]
  404966:	1a9d      	subs	r5, r3, r2
  404968:	2d00      	cmp	r5, #0
  40496a:	dd35      	ble.n	4049d8 <_svfprintf_r+0x43c>
  40496c:	2d10      	cmp	r5, #16
  40496e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404970:	dd20      	ble.n	4049b4 <_svfprintf_r+0x418>
  404972:	2610      	movs	r6, #16
  404974:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404976:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40497a:	e004      	b.n	404986 <_svfprintf_r+0x3ea>
  40497c:	3d10      	subs	r5, #16
  40497e:	2d10      	cmp	r5, #16
  404980:	f108 0808 	add.w	r8, r8, #8
  404984:	dd16      	ble.n	4049b4 <_svfprintf_r+0x418>
  404986:	3301      	adds	r3, #1
  404988:	4a5e      	ldr	r2, [pc, #376]	; (404b04 <_svfprintf_r+0x568>)
  40498a:	9326      	str	r3, [sp, #152]	; 0x98
  40498c:	3410      	adds	r4, #16
  40498e:	2b07      	cmp	r3, #7
  404990:	9427      	str	r4, [sp, #156]	; 0x9c
  404992:	e888 0044 	stmia.w	r8, {r2, r6}
  404996:	ddf1      	ble.n	40497c <_svfprintf_r+0x3e0>
  404998:	aa25      	add	r2, sp, #148	; 0x94
  40499a:	4659      	mov	r1, fp
  40499c:	4638      	mov	r0, r7
  40499e:	f002 ff65 	bl	40786c <__ssprint_r>
  4049a2:	2800      	cmp	r0, #0
  4049a4:	f47f aecc 	bne.w	404740 <_svfprintf_r+0x1a4>
  4049a8:	3d10      	subs	r5, #16
  4049aa:	2d10      	cmp	r5, #16
  4049ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049b0:	46c8      	mov	r8, r9
  4049b2:	dce8      	bgt.n	404986 <_svfprintf_r+0x3ea>
  4049b4:	3301      	adds	r3, #1
  4049b6:	4a53      	ldr	r2, [pc, #332]	; (404b04 <_svfprintf_r+0x568>)
  4049b8:	9326      	str	r3, [sp, #152]	; 0x98
  4049ba:	442c      	add	r4, r5
  4049bc:	2b07      	cmp	r3, #7
  4049be:	9427      	str	r4, [sp, #156]	; 0x9c
  4049c0:	e888 0024 	stmia.w	r8, {r2, r5}
  4049c4:	dd08      	ble.n	4049d8 <_svfprintf_r+0x43c>
  4049c6:	aa25      	add	r2, sp, #148	; 0x94
  4049c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049cc:	f002 ff4e 	bl	40786c <__ssprint_r>
  4049d0:	2800      	cmp	r0, #0
  4049d2:	f47f aeb5 	bne.w	404740 <_svfprintf_r+0x1a4>
  4049d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4049dc:	9908      	ldr	r1, [sp, #32]
  4049de:	428a      	cmp	r2, r1
  4049e0:	bfac      	ite	ge
  4049e2:	189b      	addge	r3, r3, r2
  4049e4:	185b      	addlt	r3, r3, r1
  4049e6:	9309      	str	r3, [sp, #36]	; 0x24
  4049e8:	2c00      	cmp	r4, #0
  4049ea:	f040 830d 	bne.w	405008 <_svfprintf_r+0xa6c>
  4049ee:	2300      	movs	r3, #0
  4049f0:	9326      	str	r3, [sp, #152]	; 0x98
  4049f2:	46c8      	mov	r8, r9
  4049f4:	e5f9      	b.n	4045ea <_svfprintf_r+0x4e>
  4049f6:	9311      	str	r3, [sp, #68]	; 0x44
  4049f8:	f01b 0320 	ands.w	r3, fp, #32
  4049fc:	f040 81e3 	bne.w	404dc6 <_svfprintf_r+0x82a>
  404a00:	f01b 0210 	ands.w	r2, fp, #16
  404a04:	f040 842e 	bne.w	405264 <_svfprintf_r+0xcc8>
  404a08:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404a0c:	f000 842a 	beq.w	405264 <_svfprintf_r+0xcc8>
  404a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404a12:	4613      	mov	r3, r2
  404a14:	460a      	mov	r2, r1
  404a16:	3204      	adds	r2, #4
  404a18:	880c      	ldrh	r4, [r1, #0]
  404a1a:	920f      	str	r2, [sp, #60]	; 0x3c
  404a1c:	2500      	movs	r5, #0
  404a1e:	e6b0      	b.n	404782 <_svfprintf_r+0x1e6>
  404a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a22:	9311      	str	r3, [sp, #68]	; 0x44
  404a24:	6816      	ldr	r6, [r2, #0]
  404a26:	2400      	movs	r4, #0
  404a28:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404a2c:	1d15      	adds	r5, r2, #4
  404a2e:	2e00      	cmp	r6, #0
  404a30:	f000 86a7 	beq.w	405782 <_svfprintf_r+0x11e6>
  404a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404a36:	1c53      	adds	r3, r2, #1
  404a38:	f000 8609 	beq.w	40564e <_svfprintf_r+0x10b2>
  404a3c:	4621      	mov	r1, r4
  404a3e:	4630      	mov	r0, r6
  404a40:	f002 f926 	bl	406c90 <memchr>
  404a44:	2800      	cmp	r0, #0
  404a46:	f000 86e1 	beq.w	40580c <_svfprintf_r+0x1270>
  404a4a:	1b83      	subs	r3, r0, r6
  404a4c:	930e      	str	r3, [sp, #56]	; 0x38
  404a4e:	940a      	str	r4, [sp, #40]	; 0x28
  404a50:	950f      	str	r5, [sp, #60]	; 0x3c
  404a52:	f8cd b01c 	str.w	fp, [sp, #28]
  404a56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404a5a:	9308      	str	r3, [sp, #32]
  404a5c:	9412      	str	r4, [sp, #72]	; 0x48
  404a5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404a62:	e6b3      	b.n	4047cc <_svfprintf_r+0x230>
  404a64:	f89a 3000 	ldrb.w	r3, [sl]
  404a68:	2201      	movs	r2, #1
  404a6a:	212b      	movs	r1, #43	; 0x2b
  404a6c:	e5ee      	b.n	40464c <_svfprintf_r+0xb0>
  404a6e:	f04b 0b20 	orr.w	fp, fp, #32
  404a72:	f89a 3000 	ldrb.w	r3, [sl]
  404a76:	e5e9      	b.n	40464c <_svfprintf_r+0xb0>
  404a78:	9311      	str	r3, [sp, #68]	; 0x44
  404a7a:	2a00      	cmp	r2, #0
  404a7c:	f040 8795 	bne.w	4059aa <_svfprintf_r+0x140e>
  404a80:	4b22      	ldr	r3, [pc, #136]	; (404b0c <_svfprintf_r+0x570>)
  404a82:	9318      	str	r3, [sp, #96]	; 0x60
  404a84:	f01b 0f20 	tst.w	fp, #32
  404a88:	f040 8111 	bne.w	404cae <_svfprintf_r+0x712>
  404a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a8e:	f01b 0f10 	tst.w	fp, #16
  404a92:	4613      	mov	r3, r2
  404a94:	f040 83e1 	bne.w	40525a <_svfprintf_r+0xcbe>
  404a98:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404a9c:	f000 83dd 	beq.w	40525a <_svfprintf_r+0xcbe>
  404aa0:	3304      	adds	r3, #4
  404aa2:	8814      	ldrh	r4, [r2, #0]
  404aa4:	930f      	str	r3, [sp, #60]	; 0x3c
  404aa6:	2500      	movs	r5, #0
  404aa8:	f01b 0f01 	tst.w	fp, #1
  404aac:	f000 810c 	beq.w	404cc8 <_svfprintf_r+0x72c>
  404ab0:	ea54 0305 	orrs.w	r3, r4, r5
  404ab4:	f000 8108 	beq.w	404cc8 <_svfprintf_r+0x72c>
  404ab8:	2330      	movs	r3, #48	; 0x30
  404aba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404abe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404ac2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404ac6:	f04b 0b02 	orr.w	fp, fp, #2
  404aca:	2302      	movs	r3, #2
  404acc:	e659      	b.n	404782 <_svfprintf_r+0x1e6>
  404ace:	f89a 3000 	ldrb.w	r3, [sl]
  404ad2:	2900      	cmp	r1, #0
  404ad4:	f47f adba 	bne.w	40464c <_svfprintf_r+0xb0>
  404ad8:	2201      	movs	r2, #1
  404ada:	2120      	movs	r1, #32
  404adc:	e5b6      	b.n	40464c <_svfprintf_r+0xb0>
  404ade:	f04b 0b01 	orr.w	fp, fp, #1
  404ae2:	f89a 3000 	ldrb.w	r3, [sl]
  404ae6:	e5b1      	b.n	40464c <_svfprintf_r+0xb0>
  404ae8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404aea:	6823      	ldr	r3, [r4, #0]
  404aec:	930d      	str	r3, [sp, #52]	; 0x34
  404aee:	4618      	mov	r0, r3
  404af0:	2800      	cmp	r0, #0
  404af2:	4623      	mov	r3, r4
  404af4:	f103 0304 	add.w	r3, r3, #4
  404af8:	f6ff ae0a 	blt.w	404710 <_svfprintf_r+0x174>
  404afc:	930f      	str	r3, [sp, #60]	; 0x3c
  404afe:	f89a 3000 	ldrb.w	r3, [sl]
  404b02:	e5a3      	b.n	40464c <_svfprintf_r+0xb0>
  404b04:	00407d3c 	.word	0x00407d3c
  404b08:	00407d4c 	.word	0x00407d4c
  404b0c:	00407d1c 	.word	0x00407d1c
  404b10:	f04b 0b10 	orr.w	fp, fp, #16
  404b14:	f01b 0f20 	tst.w	fp, #32
  404b18:	9311      	str	r3, [sp, #68]	; 0x44
  404b1a:	f43f ae23 	beq.w	404764 <_svfprintf_r+0x1c8>
  404b1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404b20:	3507      	adds	r5, #7
  404b22:	f025 0307 	bic.w	r3, r5, #7
  404b26:	f103 0208 	add.w	r2, r3, #8
  404b2a:	e9d3 4500 	ldrd	r4, r5, [r3]
  404b2e:	920f      	str	r2, [sp, #60]	; 0x3c
  404b30:	2301      	movs	r3, #1
  404b32:	e626      	b.n	404782 <_svfprintf_r+0x1e6>
  404b34:	f89a 3000 	ldrb.w	r3, [sl]
  404b38:	2b2a      	cmp	r3, #42	; 0x2a
  404b3a:	f10a 0401 	add.w	r4, sl, #1
  404b3e:	f000 8727 	beq.w	405990 <_svfprintf_r+0x13f4>
  404b42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404b46:	2809      	cmp	r0, #9
  404b48:	46a2      	mov	sl, r4
  404b4a:	f200 86ad 	bhi.w	4058a8 <_svfprintf_r+0x130c>
  404b4e:	2300      	movs	r3, #0
  404b50:	461c      	mov	r4, r3
  404b52:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404b56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404b5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404b5e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404b62:	2809      	cmp	r0, #9
  404b64:	d9f5      	bls.n	404b52 <_svfprintf_r+0x5b6>
  404b66:	940a      	str	r4, [sp, #40]	; 0x28
  404b68:	e572      	b.n	404650 <_svfprintf_r+0xb4>
  404b6a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404b6e:	f89a 3000 	ldrb.w	r3, [sl]
  404b72:	e56b      	b.n	40464c <_svfprintf_r+0xb0>
  404b74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404b78:	f89a 3000 	ldrb.w	r3, [sl]
  404b7c:	e566      	b.n	40464c <_svfprintf_r+0xb0>
  404b7e:	f89a 3000 	ldrb.w	r3, [sl]
  404b82:	2b6c      	cmp	r3, #108	; 0x6c
  404b84:	bf03      	ittte	eq
  404b86:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404b8a:	f04b 0b20 	orreq.w	fp, fp, #32
  404b8e:	f10a 0a01 	addeq.w	sl, sl, #1
  404b92:	f04b 0b10 	orrne.w	fp, fp, #16
  404b96:	e559      	b.n	40464c <_svfprintf_r+0xb0>
  404b98:	2a00      	cmp	r2, #0
  404b9a:	f040 8711 	bne.w	4059c0 <_svfprintf_r+0x1424>
  404b9e:	f01b 0f20 	tst.w	fp, #32
  404ba2:	f040 84f9 	bne.w	405598 <_svfprintf_r+0xffc>
  404ba6:	f01b 0f10 	tst.w	fp, #16
  404baa:	f040 84ac 	bne.w	405506 <_svfprintf_r+0xf6a>
  404bae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404bb2:	f000 84a8 	beq.w	405506 <_svfprintf_r+0xf6a>
  404bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bb8:	6813      	ldr	r3, [r2, #0]
  404bba:	3204      	adds	r2, #4
  404bbc:	920f      	str	r2, [sp, #60]	; 0x3c
  404bbe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404bc2:	801a      	strh	r2, [r3, #0]
  404bc4:	e511      	b.n	4045ea <_svfprintf_r+0x4e>
  404bc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404bc8:	4bb3      	ldr	r3, [pc, #716]	; (404e98 <_svfprintf_r+0x8fc>)
  404bca:	680c      	ldr	r4, [r1, #0]
  404bcc:	9318      	str	r3, [sp, #96]	; 0x60
  404bce:	2230      	movs	r2, #48	; 0x30
  404bd0:	2378      	movs	r3, #120	; 0x78
  404bd2:	3104      	adds	r1, #4
  404bd4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404bd8:	9311      	str	r3, [sp, #68]	; 0x44
  404bda:	f04b 0b02 	orr.w	fp, fp, #2
  404bde:	910f      	str	r1, [sp, #60]	; 0x3c
  404be0:	2500      	movs	r5, #0
  404be2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404be6:	2302      	movs	r3, #2
  404be8:	e5cb      	b.n	404782 <_svfprintf_r+0x1e6>
  404bea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404bec:	9311      	str	r3, [sp, #68]	; 0x44
  404bee:	680a      	ldr	r2, [r1, #0]
  404bf0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404bf4:	2300      	movs	r3, #0
  404bf6:	460a      	mov	r2, r1
  404bf8:	461f      	mov	r7, r3
  404bfa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404bfe:	3204      	adds	r2, #4
  404c00:	2301      	movs	r3, #1
  404c02:	9308      	str	r3, [sp, #32]
  404c04:	f8cd b01c 	str.w	fp, [sp, #28]
  404c08:	970a      	str	r7, [sp, #40]	; 0x28
  404c0a:	9712      	str	r7, [sp, #72]	; 0x48
  404c0c:	920f      	str	r2, [sp, #60]	; 0x3c
  404c0e:	930e      	str	r3, [sp, #56]	; 0x38
  404c10:	ae28      	add	r6, sp, #160	; 0xa0
  404c12:	e5df      	b.n	4047d4 <_svfprintf_r+0x238>
  404c14:	9311      	str	r3, [sp, #68]	; 0x44
  404c16:	2a00      	cmp	r2, #0
  404c18:	f040 86ea 	bne.w	4059f0 <_svfprintf_r+0x1454>
  404c1c:	f01b 0f20 	tst.w	fp, #32
  404c20:	d15d      	bne.n	404cde <_svfprintf_r+0x742>
  404c22:	f01b 0f10 	tst.w	fp, #16
  404c26:	f040 8308 	bne.w	40523a <_svfprintf_r+0xc9e>
  404c2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404c2e:	f000 8304 	beq.w	40523a <_svfprintf_r+0xc9e>
  404c32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404c34:	f9b1 4000 	ldrsh.w	r4, [r1]
  404c38:	3104      	adds	r1, #4
  404c3a:	17e5      	asrs	r5, r4, #31
  404c3c:	4622      	mov	r2, r4
  404c3e:	462b      	mov	r3, r5
  404c40:	910f      	str	r1, [sp, #60]	; 0x3c
  404c42:	2a00      	cmp	r2, #0
  404c44:	f173 0300 	sbcs.w	r3, r3, #0
  404c48:	db58      	blt.n	404cfc <_svfprintf_r+0x760>
  404c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404c4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404c50:	1c4a      	adds	r2, r1, #1
  404c52:	f04f 0301 	mov.w	r3, #1
  404c56:	f47f ad9b 	bne.w	404790 <_svfprintf_r+0x1f4>
  404c5a:	ea54 0205 	orrs.w	r2, r4, r5
  404c5e:	f000 81df 	beq.w	405020 <_svfprintf_r+0xa84>
  404c62:	f8cd b01c 	str.w	fp, [sp, #28]
  404c66:	2b01      	cmp	r3, #1
  404c68:	f000 827b 	beq.w	405162 <_svfprintf_r+0xbc6>
  404c6c:	2b02      	cmp	r3, #2
  404c6e:	f040 8206 	bne.w	40507e <_svfprintf_r+0xae2>
  404c72:	9818      	ldr	r0, [sp, #96]	; 0x60
  404c74:	464e      	mov	r6, r9
  404c76:	0923      	lsrs	r3, r4, #4
  404c78:	f004 010f 	and.w	r1, r4, #15
  404c7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404c80:	092a      	lsrs	r2, r5, #4
  404c82:	461c      	mov	r4, r3
  404c84:	4615      	mov	r5, r2
  404c86:	5c43      	ldrb	r3, [r0, r1]
  404c88:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404c8c:	ea54 0305 	orrs.w	r3, r4, r5
  404c90:	d1f1      	bne.n	404c76 <_svfprintf_r+0x6da>
  404c92:	eba9 0306 	sub.w	r3, r9, r6
  404c96:	930e      	str	r3, [sp, #56]	; 0x38
  404c98:	e590      	b.n	4047bc <_svfprintf_r+0x220>
  404c9a:	9311      	str	r3, [sp, #68]	; 0x44
  404c9c:	2a00      	cmp	r2, #0
  404c9e:	f040 86a3 	bne.w	4059e8 <_svfprintf_r+0x144c>
  404ca2:	4b7e      	ldr	r3, [pc, #504]	; (404e9c <_svfprintf_r+0x900>)
  404ca4:	9318      	str	r3, [sp, #96]	; 0x60
  404ca6:	f01b 0f20 	tst.w	fp, #32
  404caa:	f43f aeef 	beq.w	404a8c <_svfprintf_r+0x4f0>
  404cae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404cb0:	3507      	adds	r5, #7
  404cb2:	f025 0307 	bic.w	r3, r5, #7
  404cb6:	f103 0208 	add.w	r2, r3, #8
  404cba:	f01b 0f01 	tst.w	fp, #1
  404cbe:	920f      	str	r2, [sp, #60]	; 0x3c
  404cc0:	e9d3 4500 	ldrd	r4, r5, [r3]
  404cc4:	f47f aef4 	bne.w	404ab0 <_svfprintf_r+0x514>
  404cc8:	2302      	movs	r3, #2
  404cca:	e55a      	b.n	404782 <_svfprintf_r+0x1e6>
  404ccc:	9311      	str	r3, [sp, #68]	; 0x44
  404cce:	2a00      	cmp	r2, #0
  404cd0:	f040 8686 	bne.w	4059e0 <_svfprintf_r+0x1444>
  404cd4:	f04b 0b10 	orr.w	fp, fp, #16
  404cd8:	f01b 0f20 	tst.w	fp, #32
  404cdc:	d0a1      	beq.n	404c22 <_svfprintf_r+0x686>
  404cde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404ce0:	3507      	adds	r5, #7
  404ce2:	f025 0507 	bic.w	r5, r5, #7
  404ce6:	e9d5 2300 	ldrd	r2, r3, [r5]
  404cea:	2a00      	cmp	r2, #0
  404cec:	f105 0108 	add.w	r1, r5, #8
  404cf0:	461d      	mov	r5, r3
  404cf2:	f173 0300 	sbcs.w	r3, r3, #0
  404cf6:	910f      	str	r1, [sp, #60]	; 0x3c
  404cf8:	4614      	mov	r4, r2
  404cfa:	daa6      	bge.n	404c4a <_svfprintf_r+0x6ae>
  404cfc:	272d      	movs	r7, #45	; 0x2d
  404cfe:	4264      	negs	r4, r4
  404d00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404d04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404d08:	2301      	movs	r3, #1
  404d0a:	e53d      	b.n	404788 <_svfprintf_r+0x1ec>
  404d0c:	9311      	str	r3, [sp, #68]	; 0x44
  404d0e:	2a00      	cmp	r2, #0
  404d10:	f040 8662 	bne.w	4059d8 <_svfprintf_r+0x143c>
  404d14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404d16:	3507      	adds	r5, #7
  404d18:	f025 0307 	bic.w	r3, r5, #7
  404d1c:	f103 0208 	add.w	r2, r3, #8
  404d20:	920f      	str	r2, [sp, #60]	; 0x3c
  404d22:	681a      	ldr	r2, [r3, #0]
  404d24:	9215      	str	r2, [sp, #84]	; 0x54
  404d26:	685b      	ldr	r3, [r3, #4]
  404d28:	9314      	str	r3, [sp, #80]	; 0x50
  404d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404d2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404d2e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404d32:	4628      	mov	r0, r5
  404d34:	4621      	mov	r1, r4
  404d36:	f04f 32ff 	mov.w	r2, #4294967295
  404d3a:	4b59      	ldr	r3, [pc, #356]	; (404ea0 <_svfprintf_r+0x904>)
  404d3c:	f002 ff3c 	bl	407bb8 <__aeabi_dcmpun>
  404d40:	2800      	cmp	r0, #0
  404d42:	f040 834a 	bne.w	4053da <_svfprintf_r+0xe3e>
  404d46:	4628      	mov	r0, r5
  404d48:	4621      	mov	r1, r4
  404d4a:	f04f 32ff 	mov.w	r2, #4294967295
  404d4e:	4b54      	ldr	r3, [pc, #336]	; (404ea0 <_svfprintf_r+0x904>)
  404d50:	f002 ff14 	bl	407b7c <__aeabi_dcmple>
  404d54:	2800      	cmp	r0, #0
  404d56:	f040 8340 	bne.w	4053da <_svfprintf_r+0xe3e>
  404d5a:	a815      	add	r0, sp, #84	; 0x54
  404d5c:	c80d      	ldmia	r0, {r0, r2, r3}
  404d5e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404d60:	f002 ff02 	bl	407b68 <__aeabi_dcmplt>
  404d64:	2800      	cmp	r0, #0
  404d66:	f040 8530 	bne.w	4057ca <_svfprintf_r+0x122e>
  404d6a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404d6e:	4e4d      	ldr	r6, [pc, #308]	; (404ea4 <_svfprintf_r+0x908>)
  404d70:	4b4d      	ldr	r3, [pc, #308]	; (404ea8 <_svfprintf_r+0x90c>)
  404d72:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404d76:	9007      	str	r0, [sp, #28]
  404d78:	9811      	ldr	r0, [sp, #68]	; 0x44
  404d7a:	2203      	movs	r2, #3
  404d7c:	2100      	movs	r1, #0
  404d7e:	9208      	str	r2, [sp, #32]
  404d80:	910a      	str	r1, [sp, #40]	; 0x28
  404d82:	2847      	cmp	r0, #71	; 0x47
  404d84:	bfd8      	it	le
  404d86:	461e      	movle	r6, r3
  404d88:	920e      	str	r2, [sp, #56]	; 0x38
  404d8a:	9112      	str	r1, [sp, #72]	; 0x48
  404d8c:	e51e      	b.n	4047cc <_svfprintf_r+0x230>
  404d8e:	f04b 0b08 	orr.w	fp, fp, #8
  404d92:	f89a 3000 	ldrb.w	r3, [sl]
  404d96:	e459      	b.n	40464c <_svfprintf_r+0xb0>
  404d98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d9c:	2300      	movs	r3, #0
  404d9e:	461c      	mov	r4, r3
  404da0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404da4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404da8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404dac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404db0:	2809      	cmp	r0, #9
  404db2:	d9f5      	bls.n	404da0 <_svfprintf_r+0x804>
  404db4:	940d      	str	r4, [sp, #52]	; 0x34
  404db6:	e44b      	b.n	404650 <_svfprintf_r+0xb4>
  404db8:	f04b 0b10 	orr.w	fp, fp, #16
  404dbc:	9311      	str	r3, [sp, #68]	; 0x44
  404dbe:	f01b 0320 	ands.w	r3, fp, #32
  404dc2:	f43f ae1d 	beq.w	404a00 <_svfprintf_r+0x464>
  404dc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404dc8:	3507      	adds	r5, #7
  404dca:	f025 0307 	bic.w	r3, r5, #7
  404dce:	f103 0208 	add.w	r2, r3, #8
  404dd2:	e9d3 4500 	ldrd	r4, r5, [r3]
  404dd6:	920f      	str	r2, [sp, #60]	; 0x3c
  404dd8:	2300      	movs	r3, #0
  404dda:	e4d2      	b.n	404782 <_svfprintf_r+0x1e6>
  404ddc:	9311      	str	r3, [sp, #68]	; 0x44
  404dde:	2a00      	cmp	r2, #0
  404de0:	f040 85e7 	bne.w	4059b2 <_svfprintf_r+0x1416>
  404de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404de6:	2a00      	cmp	r2, #0
  404de8:	f43f aca3 	beq.w	404732 <_svfprintf_r+0x196>
  404dec:	2300      	movs	r3, #0
  404dee:	2101      	movs	r1, #1
  404df0:	461f      	mov	r7, r3
  404df2:	9108      	str	r1, [sp, #32]
  404df4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404df8:	f8cd b01c 	str.w	fp, [sp, #28]
  404dfc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404e00:	930a      	str	r3, [sp, #40]	; 0x28
  404e02:	9312      	str	r3, [sp, #72]	; 0x48
  404e04:	910e      	str	r1, [sp, #56]	; 0x38
  404e06:	ae28      	add	r6, sp, #160	; 0xa0
  404e08:	e4e4      	b.n	4047d4 <_svfprintf_r+0x238>
  404e0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e0c:	e534      	b.n	404878 <_svfprintf_r+0x2dc>
  404e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e10:	2b65      	cmp	r3, #101	; 0x65
  404e12:	f340 80a7 	ble.w	404f64 <_svfprintf_r+0x9c8>
  404e16:	a815      	add	r0, sp, #84	; 0x54
  404e18:	c80d      	ldmia	r0, {r0, r2, r3}
  404e1a:	9914      	ldr	r1, [sp, #80]	; 0x50
  404e1c:	f002 fe9a 	bl	407b54 <__aeabi_dcmpeq>
  404e20:	2800      	cmp	r0, #0
  404e22:	f000 8150 	beq.w	4050c6 <_svfprintf_r+0xb2a>
  404e26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e28:	4a20      	ldr	r2, [pc, #128]	; (404eac <_svfprintf_r+0x910>)
  404e2a:	f8c8 2000 	str.w	r2, [r8]
  404e2e:	3301      	adds	r3, #1
  404e30:	3401      	adds	r4, #1
  404e32:	2201      	movs	r2, #1
  404e34:	2b07      	cmp	r3, #7
  404e36:	9427      	str	r4, [sp, #156]	; 0x9c
  404e38:	9326      	str	r3, [sp, #152]	; 0x98
  404e3a:	f8c8 2004 	str.w	r2, [r8, #4]
  404e3e:	f300 836a 	bgt.w	405516 <_svfprintf_r+0xf7a>
  404e42:	f108 0808 	add.w	r8, r8, #8
  404e46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404e4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e4c:	4293      	cmp	r3, r2
  404e4e:	db03      	blt.n	404e58 <_svfprintf_r+0x8bc>
  404e50:	9b07      	ldr	r3, [sp, #28]
  404e52:	07dd      	lsls	r5, r3, #31
  404e54:	f57f ad82 	bpl.w	40495c <_svfprintf_r+0x3c0>
  404e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e5a:	9919      	ldr	r1, [sp, #100]	; 0x64
  404e5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404e5e:	f8c8 2000 	str.w	r2, [r8]
  404e62:	3301      	adds	r3, #1
  404e64:	440c      	add	r4, r1
  404e66:	2b07      	cmp	r3, #7
  404e68:	f8c8 1004 	str.w	r1, [r8, #4]
  404e6c:	9427      	str	r4, [sp, #156]	; 0x9c
  404e6e:	9326      	str	r3, [sp, #152]	; 0x98
  404e70:	f300 839e 	bgt.w	4055b0 <_svfprintf_r+0x1014>
  404e74:	f108 0808 	add.w	r8, r8, #8
  404e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e7a:	1e5e      	subs	r6, r3, #1
  404e7c:	2e00      	cmp	r6, #0
  404e7e:	f77f ad6d 	ble.w	40495c <_svfprintf_r+0x3c0>
  404e82:	2e10      	cmp	r6, #16
  404e84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e86:	4d0a      	ldr	r5, [pc, #40]	; (404eb0 <_svfprintf_r+0x914>)
  404e88:	f340 81f5 	ble.w	405276 <_svfprintf_r+0xcda>
  404e8c:	4622      	mov	r2, r4
  404e8e:	2710      	movs	r7, #16
  404e90:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404e94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404e96:	e013      	b.n	404ec0 <_svfprintf_r+0x924>
  404e98:	00407d1c 	.word	0x00407d1c
  404e9c:	00407d08 	.word	0x00407d08
  404ea0:	7fefffff 	.word	0x7fefffff
  404ea4:	00407cfc 	.word	0x00407cfc
  404ea8:	00407cf8 	.word	0x00407cf8
  404eac:	00407d38 	.word	0x00407d38
  404eb0:	00407d4c 	.word	0x00407d4c
  404eb4:	f108 0808 	add.w	r8, r8, #8
  404eb8:	3e10      	subs	r6, #16
  404eba:	2e10      	cmp	r6, #16
  404ebc:	f340 81da 	ble.w	405274 <_svfprintf_r+0xcd8>
  404ec0:	3301      	adds	r3, #1
  404ec2:	3210      	adds	r2, #16
  404ec4:	2b07      	cmp	r3, #7
  404ec6:	9227      	str	r2, [sp, #156]	; 0x9c
  404ec8:	9326      	str	r3, [sp, #152]	; 0x98
  404eca:	e888 00a0 	stmia.w	r8, {r5, r7}
  404ece:	ddf1      	ble.n	404eb4 <_svfprintf_r+0x918>
  404ed0:	aa25      	add	r2, sp, #148	; 0x94
  404ed2:	4621      	mov	r1, r4
  404ed4:	4658      	mov	r0, fp
  404ed6:	f002 fcc9 	bl	40786c <__ssprint_r>
  404eda:	2800      	cmp	r0, #0
  404edc:	f47f ac30 	bne.w	404740 <_svfprintf_r+0x1a4>
  404ee0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ee2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ee4:	46c8      	mov	r8, r9
  404ee6:	e7e7      	b.n	404eb8 <_svfprintf_r+0x91c>
  404ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404eea:	9a08      	ldr	r2, [sp, #32]
  404eec:	1a9f      	subs	r7, r3, r2
  404eee:	2f00      	cmp	r7, #0
  404ef0:	f77f ace5 	ble.w	4048be <_svfprintf_r+0x322>
  404ef4:	2f10      	cmp	r7, #16
  404ef6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ef8:	4db6      	ldr	r5, [pc, #728]	; (4051d4 <_svfprintf_r+0xc38>)
  404efa:	dd27      	ble.n	404f4c <_svfprintf_r+0x9b0>
  404efc:	4642      	mov	r2, r8
  404efe:	4621      	mov	r1, r4
  404f00:	46b0      	mov	r8, r6
  404f02:	f04f 0b10 	mov.w	fp, #16
  404f06:	462e      	mov	r6, r5
  404f08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404f0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404f0c:	e004      	b.n	404f18 <_svfprintf_r+0x97c>
  404f0e:	3f10      	subs	r7, #16
  404f10:	2f10      	cmp	r7, #16
  404f12:	f102 0208 	add.w	r2, r2, #8
  404f16:	dd15      	ble.n	404f44 <_svfprintf_r+0x9a8>
  404f18:	3301      	adds	r3, #1
  404f1a:	3110      	adds	r1, #16
  404f1c:	2b07      	cmp	r3, #7
  404f1e:	9127      	str	r1, [sp, #156]	; 0x9c
  404f20:	9326      	str	r3, [sp, #152]	; 0x98
  404f22:	e882 0840 	stmia.w	r2, {r6, fp}
  404f26:	ddf2      	ble.n	404f0e <_svfprintf_r+0x972>
  404f28:	aa25      	add	r2, sp, #148	; 0x94
  404f2a:	4629      	mov	r1, r5
  404f2c:	4620      	mov	r0, r4
  404f2e:	f002 fc9d 	bl	40786c <__ssprint_r>
  404f32:	2800      	cmp	r0, #0
  404f34:	f47f ac04 	bne.w	404740 <_svfprintf_r+0x1a4>
  404f38:	3f10      	subs	r7, #16
  404f3a:	2f10      	cmp	r7, #16
  404f3c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404f3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f40:	464a      	mov	r2, r9
  404f42:	dce9      	bgt.n	404f18 <_svfprintf_r+0x97c>
  404f44:	4635      	mov	r5, r6
  404f46:	460c      	mov	r4, r1
  404f48:	4646      	mov	r6, r8
  404f4a:	4690      	mov	r8, r2
  404f4c:	3301      	adds	r3, #1
  404f4e:	443c      	add	r4, r7
  404f50:	2b07      	cmp	r3, #7
  404f52:	9427      	str	r4, [sp, #156]	; 0x9c
  404f54:	9326      	str	r3, [sp, #152]	; 0x98
  404f56:	e888 00a0 	stmia.w	r8, {r5, r7}
  404f5a:	f300 8232 	bgt.w	4053c2 <_svfprintf_r+0xe26>
  404f5e:	f108 0808 	add.w	r8, r8, #8
  404f62:	e4ac      	b.n	4048be <_svfprintf_r+0x322>
  404f64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f66:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404f68:	2b01      	cmp	r3, #1
  404f6a:	f340 81fe 	ble.w	40536a <_svfprintf_r+0xdce>
  404f6e:	3701      	adds	r7, #1
  404f70:	3401      	adds	r4, #1
  404f72:	2301      	movs	r3, #1
  404f74:	2f07      	cmp	r7, #7
  404f76:	9427      	str	r4, [sp, #156]	; 0x9c
  404f78:	9726      	str	r7, [sp, #152]	; 0x98
  404f7a:	f8c8 6000 	str.w	r6, [r8]
  404f7e:	f8c8 3004 	str.w	r3, [r8, #4]
  404f82:	f300 8203 	bgt.w	40538c <_svfprintf_r+0xdf0>
  404f86:	f108 0808 	add.w	r8, r8, #8
  404f8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404f8e:	f8c8 3000 	str.w	r3, [r8]
  404f92:	3701      	adds	r7, #1
  404f94:	4414      	add	r4, r2
  404f96:	2f07      	cmp	r7, #7
  404f98:	9427      	str	r4, [sp, #156]	; 0x9c
  404f9a:	9726      	str	r7, [sp, #152]	; 0x98
  404f9c:	f8c8 2004 	str.w	r2, [r8, #4]
  404fa0:	f300 8200 	bgt.w	4053a4 <_svfprintf_r+0xe08>
  404fa4:	f108 0808 	add.w	r8, r8, #8
  404fa8:	a815      	add	r0, sp, #84	; 0x54
  404faa:	c80d      	ldmia	r0, {r0, r2, r3}
  404fac:	9914      	ldr	r1, [sp, #80]	; 0x50
  404fae:	f002 fdd1 	bl	407b54 <__aeabi_dcmpeq>
  404fb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404fb4:	2800      	cmp	r0, #0
  404fb6:	f040 8101 	bne.w	4051bc <_svfprintf_r+0xc20>
  404fba:	3b01      	subs	r3, #1
  404fbc:	3701      	adds	r7, #1
  404fbe:	3601      	adds	r6, #1
  404fc0:	441c      	add	r4, r3
  404fc2:	2f07      	cmp	r7, #7
  404fc4:	9726      	str	r7, [sp, #152]	; 0x98
  404fc6:	9427      	str	r4, [sp, #156]	; 0x9c
  404fc8:	f8c8 6000 	str.w	r6, [r8]
  404fcc:	f8c8 3004 	str.w	r3, [r8, #4]
  404fd0:	f300 8127 	bgt.w	405222 <_svfprintf_r+0xc86>
  404fd4:	f108 0808 	add.w	r8, r8, #8
  404fd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404fda:	f8c8 2004 	str.w	r2, [r8, #4]
  404fde:	3701      	adds	r7, #1
  404fe0:	4414      	add	r4, r2
  404fe2:	ab21      	add	r3, sp, #132	; 0x84
  404fe4:	2f07      	cmp	r7, #7
  404fe6:	9427      	str	r4, [sp, #156]	; 0x9c
  404fe8:	9726      	str	r7, [sp, #152]	; 0x98
  404fea:	f8c8 3000 	str.w	r3, [r8]
  404fee:	f77f acb3 	ble.w	404958 <_svfprintf_r+0x3bc>
  404ff2:	aa25      	add	r2, sp, #148	; 0x94
  404ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ff8:	f002 fc38 	bl	40786c <__ssprint_r>
  404ffc:	2800      	cmp	r0, #0
  404ffe:	f47f ab9f 	bne.w	404740 <_svfprintf_r+0x1a4>
  405002:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405004:	46c8      	mov	r8, r9
  405006:	e4a9      	b.n	40495c <_svfprintf_r+0x3c0>
  405008:	aa25      	add	r2, sp, #148	; 0x94
  40500a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40500c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40500e:	f002 fc2d 	bl	40786c <__ssprint_r>
  405012:	2800      	cmp	r0, #0
  405014:	f43f aceb 	beq.w	4049ee <_svfprintf_r+0x452>
  405018:	f7ff bb92 	b.w	404740 <_svfprintf_r+0x1a4>
  40501c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405020:	2b01      	cmp	r3, #1
  405022:	f000 8134 	beq.w	40528e <_svfprintf_r+0xcf2>
  405026:	2b02      	cmp	r3, #2
  405028:	d125      	bne.n	405076 <_svfprintf_r+0xada>
  40502a:	f8cd b01c 	str.w	fp, [sp, #28]
  40502e:	2400      	movs	r4, #0
  405030:	2500      	movs	r5, #0
  405032:	e61e      	b.n	404c72 <_svfprintf_r+0x6d6>
  405034:	aa25      	add	r2, sp, #148	; 0x94
  405036:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405038:	980c      	ldr	r0, [sp, #48]	; 0x30
  40503a:	f002 fc17 	bl	40786c <__ssprint_r>
  40503e:	2800      	cmp	r0, #0
  405040:	f47f ab7e 	bne.w	404740 <_svfprintf_r+0x1a4>
  405044:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405046:	46c8      	mov	r8, r9
  405048:	e475      	b.n	404936 <_svfprintf_r+0x39a>
  40504a:	aa25      	add	r2, sp, #148	; 0x94
  40504c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40504e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405050:	f002 fc0c 	bl	40786c <__ssprint_r>
  405054:	2800      	cmp	r0, #0
  405056:	f47f ab73 	bne.w	404740 <_svfprintf_r+0x1a4>
  40505a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40505c:	46c8      	mov	r8, r9
  40505e:	e41b      	b.n	404898 <_svfprintf_r+0x2fc>
  405060:	aa25      	add	r2, sp, #148	; 0x94
  405062:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405064:	980c      	ldr	r0, [sp, #48]	; 0x30
  405066:	f002 fc01 	bl	40786c <__ssprint_r>
  40506a:	2800      	cmp	r0, #0
  40506c:	f47f ab68 	bne.w	404740 <_svfprintf_r+0x1a4>
  405070:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405072:	46c8      	mov	r8, r9
  405074:	e420      	b.n	4048b8 <_svfprintf_r+0x31c>
  405076:	f8cd b01c 	str.w	fp, [sp, #28]
  40507a:	2400      	movs	r4, #0
  40507c:	2500      	movs	r5, #0
  40507e:	4649      	mov	r1, r9
  405080:	e000      	b.n	405084 <_svfprintf_r+0xae8>
  405082:	4631      	mov	r1, r6
  405084:	08e2      	lsrs	r2, r4, #3
  405086:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40508a:	08e8      	lsrs	r0, r5, #3
  40508c:	f004 0307 	and.w	r3, r4, #7
  405090:	4605      	mov	r5, r0
  405092:	4614      	mov	r4, r2
  405094:	3330      	adds	r3, #48	; 0x30
  405096:	ea54 0205 	orrs.w	r2, r4, r5
  40509a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40509e:	f101 36ff 	add.w	r6, r1, #4294967295
  4050a2:	d1ee      	bne.n	405082 <_svfprintf_r+0xae6>
  4050a4:	9a07      	ldr	r2, [sp, #28]
  4050a6:	07d2      	lsls	r2, r2, #31
  4050a8:	f57f adf3 	bpl.w	404c92 <_svfprintf_r+0x6f6>
  4050ac:	2b30      	cmp	r3, #48	; 0x30
  4050ae:	f43f adf0 	beq.w	404c92 <_svfprintf_r+0x6f6>
  4050b2:	3902      	subs	r1, #2
  4050b4:	2330      	movs	r3, #48	; 0x30
  4050b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4050ba:	eba9 0301 	sub.w	r3, r9, r1
  4050be:	930e      	str	r3, [sp, #56]	; 0x38
  4050c0:	460e      	mov	r6, r1
  4050c2:	f7ff bb7b 	b.w	4047bc <_svfprintf_r+0x220>
  4050c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4050c8:	2900      	cmp	r1, #0
  4050ca:	f340 822e 	ble.w	40552a <_svfprintf_r+0xf8e>
  4050ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4050d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4050d2:	4293      	cmp	r3, r2
  4050d4:	bfa8      	it	ge
  4050d6:	4613      	movge	r3, r2
  4050d8:	2b00      	cmp	r3, #0
  4050da:	461f      	mov	r7, r3
  4050dc:	dd0d      	ble.n	4050fa <_svfprintf_r+0xb5e>
  4050de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050e0:	f8c8 6000 	str.w	r6, [r8]
  4050e4:	3301      	adds	r3, #1
  4050e6:	443c      	add	r4, r7
  4050e8:	2b07      	cmp	r3, #7
  4050ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4050ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4050f0:	9326      	str	r3, [sp, #152]	; 0x98
  4050f2:	f300 831f 	bgt.w	405734 <_svfprintf_r+0x1198>
  4050f6:	f108 0808 	add.w	r8, r8, #8
  4050fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4050fc:	2f00      	cmp	r7, #0
  4050fe:	bfa8      	it	ge
  405100:	1bdb      	subge	r3, r3, r7
  405102:	2b00      	cmp	r3, #0
  405104:	461f      	mov	r7, r3
  405106:	f340 80d6 	ble.w	4052b6 <_svfprintf_r+0xd1a>
  40510a:	2f10      	cmp	r7, #16
  40510c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40510e:	4d31      	ldr	r5, [pc, #196]	; (4051d4 <_svfprintf_r+0xc38>)
  405110:	f340 81ed 	ble.w	4054ee <_svfprintf_r+0xf52>
  405114:	4642      	mov	r2, r8
  405116:	4621      	mov	r1, r4
  405118:	46b0      	mov	r8, r6
  40511a:	f04f 0b10 	mov.w	fp, #16
  40511e:	462e      	mov	r6, r5
  405120:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405122:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405124:	e004      	b.n	405130 <_svfprintf_r+0xb94>
  405126:	3208      	adds	r2, #8
  405128:	3f10      	subs	r7, #16
  40512a:	2f10      	cmp	r7, #16
  40512c:	f340 81db 	ble.w	4054e6 <_svfprintf_r+0xf4a>
  405130:	3301      	adds	r3, #1
  405132:	3110      	adds	r1, #16
  405134:	2b07      	cmp	r3, #7
  405136:	9127      	str	r1, [sp, #156]	; 0x9c
  405138:	9326      	str	r3, [sp, #152]	; 0x98
  40513a:	e882 0840 	stmia.w	r2, {r6, fp}
  40513e:	ddf2      	ble.n	405126 <_svfprintf_r+0xb8a>
  405140:	aa25      	add	r2, sp, #148	; 0x94
  405142:	4629      	mov	r1, r5
  405144:	4620      	mov	r0, r4
  405146:	f002 fb91 	bl	40786c <__ssprint_r>
  40514a:	2800      	cmp	r0, #0
  40514c:	f47f aaf8 	bne.w	404740 <_svfprintf_r+0x1a4>
  405150:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405152:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405154:	464a      	mov	r2, r9
  405156:	e7e7      	b.n	405128 <_svfprintf_r+0xb8c>
  405158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40515a:	930e      	str	r3, [sp, #56]	; 0x38
  40515c:	464e      	mov	r6, r9
  40515e:	f7ff bb2d 	b.w	4047bc <_svfprintf_r+0x220>
  405162:	2d00      	cmp	r5, #0
  405164:	bf08      	it	eq
  405166:	2c0a      	cmpeq	r4, #10
  405168:	f0c0 808f 	bcc.w	40528a <_svfprintf_r+0xcee>
  40516c:	464e      	mov	r6, r9
  40516e:	4620      	mov	r0, r4
  405170:	4629      	mov	r1, r5
  405172:	220a      	movs	r2, #10
  405174:	2300      	movs	r3, #0
  405176:	f7fe fc95 	bl	403aa4 <__aeabi_uldivmod>
  40517a:	3230      	adds	r2, #48	; 0x30
  40517c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405180:	4620      	mov	r0, r4
  405182:	4629      	mov	r1, r5
  405184:	2300      	movs	r3, #0
  405186:	220a      	movs	r2, #10
  405188:	f7fe fc8c 	bl	403aa4 <__aeabi_uldivmod>
  40518c:	4604      	mov	r4, r0
  40518e:	460d      	mov	r5, r1
  405190:	ea54 0305 	orrs.w	r3, r4, r5
  405194:	d1eb      	bne.n	40516e <_svfprintf_r+0xbd2>
  405196:	eba9 0306 	sub.w	r3, r9, r6
  40519a:	930e      	str	r3, [sp, #56]	; 0x38
  40519c:	f7ff bb0e 	b.w	4047bc <_svfprintf_r+0x220>
  4051a0:	aa25      	add	r2, sp, #148	; 0x94
  4051a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051a6:	f002 fb61 	bl	40786c <__ssprint_r>
  4051aa:	2800      	cmp	r0, #0
  4051ac:	f47f aac8 	bne.w	404740 <_svfprintf_r+0x1a4>
  4051b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4051b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051b6:	46c8      	mov	r8, r9
  4051b8:	f7ff bb5e 	b.w	404878 <_svfprintf_r+0x2dc>
  4051bc:	1e5e      	subs	r6, r3, #1
  4051be:	2e00      	cmp	r6, #0
  4051c0:	f77f af0a 	ble.w	404fd8 <_svfprintf_r+0xa3c>
  4051c4:	2e10      	cmp	r6, #16
  4051c6:	4d03      	ldr	r5, [pc, #12]	; (4051d4 <_svfprintf_r+0xc38>)
  4051c8:	dd22      	ble.n	405210 <_svfprintf_r+0xc74>
  4051ca:	4622      	mov	r2, r4
  4051cc:	f04f 0b10 	mov.w	fp, #16
  4051d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4051d2:	e006      	b.n	4051e2 <_svfprintf_r+0xc46>
  4051d4:	00407d4c 	.word	0x00407d4c
  4051d8:	3e10      	subs	r6, #16
  4051da:	2e10      	cmp	r6, #16
  4051dc:	f108 0808 	add.w	r8, r8, #8
  4051e0:	dd15      	ble.n	40520e <_svfprintf_r+0xc72>
  4051e2:	3701      	adds	r7, #1
  4051e4:	3210      	adds	r2, #16
  4051e6:	2f07      	cmp	r7, #7
  4051e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4051ea:	9726      	str	r7, [sp, #152]	; 0x98
  4051ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4051f0:	ddf2      	ble.n	4051d8 <_svfprintf_r+0xc3c>
  4051f2:	aa25      	add	r2, sp, #148	; 0x94
  4051f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051f6:	4620      	mov	r0, r4
  4051f8:	f002 fb38 	bl	40786c <__ssprint_r>
  4051fc:	2800      	cmp	r0, #0
  4051fe:	f47f aa9f 	bne.w	404740 <_svfprintf_r+0x1a4>
  405202:	3e10      	subs	r6, #16
  405204:	2e10      	cmp	r6, #16
  405206:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405208:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40520a:	46c8      	mov	r8, r9
  40520c:	dce9      	bgt.n	4051e2 <_svfprintf_r+0xc46>
  40520e:	4614      	mov	r4, r2
  405210:	3701      	adds	r7, #1
  405212:	4434      	add	r4, r6
  405214:	2f07      	cmp	r7, #7
  405216:	9427      	str	r4, [sp, #156]	; 0x9c
  405218:	9726      	str	r7, [sp, #152]	; 0x98
  40521a:	e888 0060 	stmia.w	r8, {r5, r6}
  40521e:	f77f aed9 	ble.w	404fd4 <_svfprintf_r+0xa38>
  405222:	aa25      	add	r2, sp, #148	; 0x94
  405224:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405226:	980c      	ldr	r0, [sp, #48]	; 0x30
  405228:	f002 fb20 	bl	40786c <__ssprint_r>
  40522c:	2800      	cmp	r0, #0
  40522e:	f47f aa87 	bne.w	404740 <_svfprintf_r+0x1a4>
  405232:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405234:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405236:	46c8      	mov	r8, r9
  405238:	e6ce      	b.n	404fd8 <_svfprintf_r+0xa3c>
  40523a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40523c:	6814      	ldr	r4, [r2, #0]
  40523e:	4613      	mov	r3, r2
  405240:	3304      	adds	r3, #4
  405242:	17e5      	asrs	r5, r4, #31
  405244:	930f      	str	r3, [sp, #60]	; 0x3c
  405246:	4622      	mov	r2, r4
  405248:	462b      	mov	r3, r5
  40524a:	e4fa      	b.n	404c42 <_svfprintf_r+0x6a6>
  40524c:	3204      	adds	r2, #4
  40524e:	681c      	ldr	r4, [r3, #0]
  405250:	920f      	str	r2, [sp, #60]	; 0x3c
  405252:	2301      	movs	r3, #1
  405254:	2500      	movs	r5, #0
  405256:	f7ff ba94 	b.w	404782 <_svfprintf_r+0x1e6>
  40525a:	681c      	ldr	r4, [r3, #0]
  40525c:	3304      	adds	r3, #4
  40525e:	930f      	str	r3, [sp, #60]	; 0x3c
  405260:	2500      	movs	r5, #0
  405262:	e421      	b.n	404aa8 <_svfprintf_r+0x50c>
  405264:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405266:	460a      	mov	r2, r1
  405268:	3204      	adds	r2, #4
  40526a:	680c      	ldr	r4, [r1, #0]
  40526c:	920f      	str	r2, [sp, #60]	; 0x3c
  40526e:	2500      	movs	r5, #0
  405270:	f7ff ba87 	b.w	404782 <_svfprintf_r+0x1e6>
  405274:	4614      	mov	r4, r2
  405276:	3301      	adds	r3, #1
  405278:	4434      	add	r4, r6
  40527a:	2b07      	cmp	r3, #7
  40527c:	9427      	str	r4, [sp, #156]	; 0x9c
  40527e:	9326      	str	r3, [sp, #152]	; 0x98
  405280:	e888 0060 	stmia.w	r8, {r5, r6}
  405284:	f77f ab68 	ble.w	404958 <_svfprintf_r+0x3bc>
  405288:	e6b3      	b.n	404ff2 <_svfprintf_r+0xa56>
  40528a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40528e:	f8cd b01c 	str.w	fp, [sp, #28]
  405292:	ae42      	add	r6, sp, #264	; 0x108
  405294:	3430      	adds	r4, #48	; 0x30
  405296:	2301      	movs	r3, #1
  405298:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40529c:	930e      	str	r3, [sp, #56]	; 0x38
  40529e:	f7ff ba8d 	b.w	4047bc <_svfprintf_r+0x220>
  4052a2:	aa25      	add	r2, sp, #148	; 0x94
  4052a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052a8:	f002 fae0 	bl	40786c <__ssprint_r>
  4052ac:	2800      	cmp	r0, #0
  4052ae:	f47f aa47 	bne.w	404740 <_svfprintf_r+0x1a4>
  4052b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4052b4:	46c8      	mov	r8, r9
  4052b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4052b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4052ba:	429a      	cmp	r2, r3
  4052bc:	db44      	blt.n	405348 <_svfprintf_r+0xdac>
  4052be:	9b07      	ldr	r3, [sp, #28]
  4052c0:	07d9      	lsls	r1, r3, #31
  4052c2:	d441      	bmi.n	405348 <_svfprintf_r+0xdac>
  4052c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4052c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4052c8:	1a9a      	subs	r2, r3, r2
  4052ca:	1a1d      	subs	r5, r3, r0
  4052cc:	4295      	cmp	r5, r2
  4052ce:	bfa8      	it	ge
  4052d0:	4615      	movge	r5, r2
  4052d2:	2d00      	cmp	r5, #0
  4052d4:	dd0e      	ble.n	4052f4 <_svfprintf_r+0xd58>
  4052d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4052d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4052dc:	3101      	adds	r1, #1
  4052de:	4406      	add	r6, r0
  4052e0:	442c      	add	r4, r5
  4052e2:	2907      	cmp	r1, #7
  4052e4:	f8c8 6000 	str.w	r6, [r8]
  4052e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4052ea:	9126      	str	r1, [sp, #152]	; 0x98
  4052ec:	f300 823b 	bgt.w	405766 <_svfprintf_r+0x11ca>
  4052f0:	f108 0808 	add.w	r8, r8, #8
  4052f4:	2d00      	cmp	r5, #0
  4052f6:	bfac      	ite	ge
  4052f8:	1b56      	subge	r6, r2, r5
  4052fa:	4616      	movlt	r6, r2
  4052fc:	2e00      	cmp	r6, #0
  4052fe:	f77f ab2d 	ble.w	40495c <_svfprintf_r+0x3c0>
  405302:	2e10      	cmp	r6, #16
  405304:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405306:	4db0      	ldr	r5, [pc, #704]	; (4055c8 <_svfprintf_r+0x102c>)
  405308:	ddb5      	ble.n	405276 <_svfprintf_r+0xcda>
  40530a:	4622      	mov	r2, r4
  40530c:	2710      	movs	r7, #16
  40530e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405312:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405314:	e004      	b.n	405320 <_svfprintf_r+0xd84>
  405316:	f108 0808 	add.w	r8, r8, #8
  40531a:	3e10      	subs	r6, #16
  40531c:	2e10      	cmp	r6, #16
  40531e:	dda9      	ble.n	405274 <_svfprintf_r+0xcd8>
  405320:	3301      	adds	r3, #1
  405322:	3210      	adds	r2, #16
  405324:	2b07      	cmp	r3, #7
  405326:	9227      	str	r2, [sp, #156]	; 0x9c
  405328:	9326      	str	r3, [sp, #152]	; 0x98
  40532a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40532e:	ddf2      	ble.n	405316 <_svfprintf_r+0xd7a>
  405330:	aa25      	add	r2, sp, #148	; 0x94
  405332:	4621      	mov	r1, r4
  405334:	4658      	mov	r0, fp
  405336:	f002 fa99 	bl	40786c <__ssprint_r>
  40533a:	2800      	cmp	r0, #0
  40533c:	f47f aa00 	bne.w	404740 <_svfprintf_r+0x1a4>
  405340:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405342:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405344:	46c8      	mov	r8, r9
  405346:	e7e8      	b.n	40531a <_svfprintf_r+0xd7e>
  405348:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40534a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40534c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40534e:	f8c8 1000 	str.w	r1, [r8]
  405352:	3301      	adds	r3, #1
  405354:	4404      	add	r4, r0
  405356:	2b07      	cmp	r3, #7
  405358:	9427      	str	r4, [sp, #156]	; 0x9c
  40535a:	f8c8 0004 	str.w	r0, [r8, #4]
  40535e:	9326      	str	r3, [sp, #152]	; 0x98
  405360:	f300 81f5 	bgt.w	40574e <_svfprintf_r+0x11b2>
  405364:	f108 0808 	add.w	r8, r8, #8
  405368:	e7ac      	b.n	4052c4 <_svfprintf_r+0xd28>
  40536a:	9b07      	ldr	r3, [sp, #28]
  40536c:	07da      	lsls	r2, r3, #31
  40536e:	f53f adfe 	bmi.w	404f6e <_svfprintf_r+0x9d2>
  405372:	3701      	adds	r7, #1
  405374:	3401      	adds	r4, #1
  405376:	2301      	movs	r3, #1
  405378:	2f07      	cmp	r7, #7
  40537a:	9427      	str	r4, [sp, #156]	; 0x9c
  40537c:	9726      	str	r7, [sp, #152]	; 0x98
  40537e:	f8c8 6000 	str.w	r6, [r8]
  405382:	f8c8 3004 	str.w	r3, [r8, #4]
  405386:	f77f ae25 	ble.w	404fd4 <_svfprintf_r+0xa38>
  40538a:	e74a      	b.n	405222 <_svfprintf_r+0xc86>
  40538c:	aa25      	add	r2, sp, #148	; 0x94
  40538e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405390:	980c      	ldr	r0, [sp, #48]	; 0x30
  405392:	f002 fa6b 	bl	40786c <__ssprint_r>
  405396:	2800      	cmp	r0, #0
  405398:	f47f a9d2 	bne.w	404740 <_svfprintf_r+0x1a4>
  40539c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40539e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4053a0:	46c8      	mov	r8, r9
  4053a2:	e5f2      	b.n	404f8a <_svfprintf_r+0x9ee>
  4053a4:	aa25      	add	r2, sp, #148	; 0x94
  4053a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053aa:	f002 fa5f 	bl	40786c <__ssprint_r>
  4053ae:	2800      	cmp	r0, #0
  4053b0:	f47f a9c6 	bne.w	404740 <_svfprintf_r+0x1a4>
  4053b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4053b8:	46c8      	mov	r8, r9
  4053ba:	e5f5      	b.n	404fa8 <_svfprintf_r+0xa0c>
  4053bc:	464e      	mov	r6, r9
  4053be:	f7ff b9fd 	b.w	4047bc <_svfprintf_r+0x220>
  4053c2:	aa25      	add	r2, sp, #148	; 0x94
  4053c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053c8:	f002 fa50 	bl	40786c <__ssprint_r>
  4053cc:	2800      	cmp	r0, #0
  4053ce:	f47f a9b7 	bne.w	404740 <_svfprintf_r+0x1a4>
  4053d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053d4:	46c8      	mov	r8, r9
  4053d6:	f7ff ba72 	b.w	4048be <_svfprintf_r+0x322>
  4053da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4053dc:	4622      	mov	r2, r4
  4053de:	4620      	mov	r0, r4
  4053e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4053e2:	4623      	mov	r3, r4
  4053e4:	4621      	mov	r1, r4
  4053e6:	f002 fbe7 	bl	407bb8 <__aeabi_dcmpun>
  4053ea:	2800      	cmp	r0, #0
  4053ec:	f040 8286 	bne.w	4058fc <_svfprintf_r+0x1360>
  4053f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053f2:	3301      	adds	r3, #1
  4053f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053f6:	f023 0320 	bic.w	r3, r3, #32
  4053fa:	930e      	str	r3, [sp, #56]	; 0x38
  4053fc:	f000 81e2 	beq.w	4057c4 <_svfprintf_r+0x1228>
  405400:	2b47      	cmp	r3, #71	; 0x47
  405402:	f000 811e 	beq.w	405642 <_svfprintf_r+0x10a6>
  405406:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40540a:	9307      	str	r3, [sp, #28]
  40540c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40540e:	1e1f      	subs	r7, r3, #0
  405410:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405412:	9308      	str	r3, [sp, #32]
  405414:	bfbb      	ittet	lt
  405416:	463b      	movlt	r3, r7
  405418:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40541c:	2300      	movge	r3, #0
  40541e:	232d      	movlt	r3, #45	; 0x2d
  405420:	9310      	str	r3, [sp, #64]	; 0x40
  405422:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405424:	2b66      	cmp	r3, #102	; 0x66
  405426:	f000 81bb 	beq.w	4057a0 <_svfprintf_r+0x1204>
  40542a:	2b46      	cmp	r3, #70	; 0x46
  40542c:	f000 80df 	beq.w	4055ee <_svfprintf_r+0x1052>
  405430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405432:	9a08      	ldr	r2, [sp, #32]
  405434:	2b45      	cmp	r3, #69	; 0x45
  405436:	bf0c      	ite	eq
  405438:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40543a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40543c:	a823      	add	r0, sp, #140	; 0x8c
  40543e:	a920      	add	r1, sp, #128	; 0x80
  405440:	bf08      	it	eq
  405442:	1c5d      	addeq	r5, r3, #1
  405444:	9004      	str	r0, [sp, #16]
  405446:	9103      	str	r1, [sp, #12]
  405448:	a81f      	add	r0, sp, #124	; 0x7c
  40544a:	2102      	movs	r1, #2
  40544c:	463b      	mov	r3, r7
  40544e:	9002      	str	r0, [sp, #8]
  405450:	9501      	str	r5, [sp, #4]
  405452:	9100      	str	r1, [sp, #0]
  405454:	980c      	ldr	r0, [sp, #48]	; 0x30
  405456:	f000 fb73 	bl	405b40 <_dtoa_r>
  40545a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40545c:	2b67      	cmp	r3, #103	; 0x67
  40545e:	4606      	mov	r6, r0
  405460:	f040 81e0 	bne.w	405824 <_svfprintf_r+0x1288>
  405464:	f01b 0f01 	tst.w	fp, #1
  405468:	f000 8246 	beq.w	4058f8 <_svfprintf_r+0x135c>
  40546c:	1974      	adds	r4, r6, r5
  40546e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405470:	9808      	ldr	r0, [sp, #32]
  405472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405474:	4639      	mov	r1, r7
  405476:	f002 fb6d 	bl	407b54 <__aeabi_dcmpeq>
  40547a:	2800      	cmp	r0, #0
  40547c:	f040 8165 	bne.w	40574a <_svfprintf_r+0x11ae>
  405480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405482:	42a3      	cmp	r3, r4
  405484:	d206      	bcs.n	405494 <_svfprintf_r+0xef8>
  405486:	2130      	movs	r1, #48	; 0x30
  405488:	1c5a      	adds	r2, r3, #1
  40548a:	9223      	str	r2, [sp, #140]	; 0x8c
  40548c:	7019      	strb	r1, [r3, #0]
  40548e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405490:	429c      	cmp	r4, r3
  405492:	d8f9      	bhi.n	405488 <_svfprintf_r+0xeec>
  405494:	1b9b      	subs	r3, r3, r6
  405496:	9313      	str	r3, [sp, #76]	; 0x4c
  405498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40549a:	2b47      	cmp	r3, #71	; 0x47
  40549c:	f000 80e9 	beq.w	405672 <_svfprintf_r+0x10d6>
  4054a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4054a2:	2b65      	cmp	r3, #101	; 0x65
  4054a4:	f340 81cd 	ble.w	405842 <_svfprintf_r+0x12a6>
  4054a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4054aa:	2b66      	cmp	r3, #102	; 0x66
  4054ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4054ae:	9312      	str	r3, [sp, #72]	; 0x48
  4054b0:	f000 819e 	beq.w	4057f0 <_svfprintf_r+0x1254>
  4054b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4054b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4054b8:	4619      	mov	r1, r3
  4054ba:	4291      	cmp	r1, r2
  4054bc:	f300 818a 	bgt.w	4057d4 <_svfprintf_r+0x1238>
  4054c0:	f01b 0f01 	tst.w	fp, #1
  4054c4:	f040 8213 	bne.w	4058ee <_svfprintf_r+0x1352>
  4054c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4054cc:	9308      	str	r3, [sp, #32]
  4054ce:	2367      	movs	r3, #103	; 0x67
  4054d0:	920e      	str	r2, [sp, #56]	; 0x38
  4054d2:	9311      	str	r3, [sp, #68]	; 0x44
  4054d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4054d6:	2b00      	cmp	r3, #0
  4054d8:	f040 80c4 	bne.w	405664 <_svfprintf_r+0x10c8>
  4054dc:	930a      	str	r3, [sp, #40]	; 0x28
  4054de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4054e2:	f7ff b973 	b.w	4047cc <_svfprintf_r+0x230>
  4054e6:	4635      	mov	r5, r6
  4054e8:	460c      	mov	r4, r1
  4054ea:	4646      	mov	r6, r8
  4054ec:	4690      	mov	r8, r2
  4054ee:	3301      	adds	r3, #1
  4054f0:	443c      	add	r4, r7
  4054f2:	2b07      	cmp	r3, #7
  4054f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4054f6:	9326      	str	r3, [sp, #152]	; 0x98
  4054f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4054fc:	f73f aed1 	bgt.w	4052a2 <_svfprintf_r+0xd06>
  405500:	f108 0808 	add.w	r8, r8, #8
  405504:	e6d7      	b.n	4052b6 <_svfprintf_r+0xd1a>
  405506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405508:	6813      	ldr	r3, [r2, #0]
  40550a:	3204      	adds	r2, #4
  40550c:	920f      	str	r2, [sp, #60]	; 0x3c
  40550e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405510:	601a      	str	r2, [r3, #0]
  405512:	f7ff b86a 	b.w	4045ea <_svfprintf_r+0x4e>
  405516:	aa25      	add	r2, sp, #148	; 0x94
  405518:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40551a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40551c:	f002 f9a6 	bl	40786c <__ssprint_r>
  405520:	2800      	cmp	r0, #0
  405522:	f47f a90d 	bne.w	404740 <_svfprintf_r+0x1a4>
  405526:	46c8      	mov	r8, r9
  405528:	e48d      	b.n	404e46 <_svfprintf_r+0x8aa>
  40552a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40552c:	4a27      	ldr	r2, [pc, #156]	; (4055cc <_svfprintf_r+0x1030>)
  40552e:	f8c8 2000 	str.w	r2, [r8]
  405532:	3301      	adds	r3, #1
  405534:	3401      	adds	r4, #1
  405536:	2201      	movs	r2, #1
  405538:	2b07      	cmp	r3, #7
  40553a:	9427      	str	r4, [sp, #156]	; 0x9c
  40553c:	9326      	str	r3, [sp, #152]	; 0x98
  40553e:	f8c8 2004 	str.w	r2, [r8, #4]
  405542:	dc72      	bgt.n	40562a <_svfprintf_r+0x108e>
  405544:	f108 0808 	add.w	r8, r8, #8
  405548:	b929      	cbnz	r1, 405556 <_svfprintf_r+0xfba>
  40554a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40554c:	b91b      	cbnz	r3, 405556 <_svfprintf_r+0xfba>
  40554e:	9b07      	ldr	r3, [sp, #28]
  405550:	07d8      	lsls	r0, r3, #31
  405552:	f57f aa03 	bpl.w	40495c <_svfprintf_r+0x3c0>
  405556:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405558:	9819      	ldr	r0, [sp, #100]	; 0x64
  40555a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40555c:	f8c8 2000 	str.w	r2, [r8]
  405560:	3301      	adds	r3, #1
  405562:	4602      	mov	r2, r0
  405564:	4422      	add	r2, r4
  405566:	2b07      	cmp	r3, #7
  405568:	9227      	str	r2, [sp, #156]	; 0x9c
  40556a:	f8c8 0004 	str.w	r0, [r8, #4]
  40556e:	9326      	str	r3, [sp, #152]	; 0x98
  405570:	f300 818d 	bgt.w	40588e <_svfprintf_r+0x12f2>
  405574:	f108 0808 	add.w	r8, r8, #8
  405578:	2900      	cmp	r1, #0
  40557a:	f2c0 8165 	blt.w	405848 <_svfprintf_r+0x12ac>
  40557e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405580:	f8c8 6000 	str.w	r6, [r8]
  405584:	3301      	adds	r3, #1
  405586:	188c      	adds	r4, r1, r2
  405588:	2b07      	cmp	r3, #7
  40558a:	9427      	str	r4, [sp, #156]	; 0x9c
  40558c:	9326      	str	r3, [sp, #152]	; 0x98
  40558e:	f8c8 1004 	str.w	r1, [r8, #4]
  405592:	f77f a9e1 	ble.w	404958 <_svfprintf_r+0x3bc>
  405596:	e52c      	b.n	404ff2 <_svfprintf_r+0xa56>
  405598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40559a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40559c:	6813      	ldr	r3, [r2, #0]
  40559e:	17cd      	asrs	r5, r1, #31
  4055a0:	4608      	mov	r0, r1
  4055a2:	3204      	adds	r2, #4
  4055a4:	4629      	mov	r1, r5
  4055a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4055a8:	e9c3 0100 	strd	r0, r1, [r3]
  4055ac:	f7ff b81d 	b.w	4045ea <_svfprintf_r+0x4e>
  4055b0:	aa25      	add	r2, sp, #148	; 0x94
  4055b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055b6:	f002 f959 	bl	40786c <__ssprint_r>
  4055ba:	2800      	cmp	r0, #0
  4055bc:	f47f a8c0 	bne.w	404740 <_svfprintf_r+0x1a4>
  4055c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055c2:	46c8      	mov	r8, r9
  4055c4:	e458      	b.n	404e78 <_svfprintf_r+0x8dc>
  4055c6:	bf00      	nop
  4055c8:	00407d4c 	.word	0x00407d4c
  4055cc:	00407d38 	.word	0x00407d38
  4055d0:	2140      	movs	r1, #64	; 0x40
  4055d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055d4:	f7fe fc26 	bl	403e24 <_malloc_r>
  4055d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4055da:	6010      	str	r0, [r2, #0]
  4055dc:	6110      	str	r0, [r2, #16]
  4055de:	2800      	cmp	r0, #0
  4055e0:	f000 81f2 	beq.w	4059c8 <_svfprintf_r+0x142c>
  4055e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4055e6:	2340      	movs	r3, #64	; 0x40
  4055e8:	6153      	str	r3, [r2, #20]
  4055ea:	f7fe bfee 	b.w	4045ca <_svfprintf_r+0x2e>
  4055ee:	a823      	add	r0, sp, #140	; 0x8c
  4055f0:	a920      	add	r1, sp, #128	; 0x80
  4055f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4055f4:	9004      	str	r0, [sp, #16]
  4055f6:	9103      	str	r1, [sp, #12]
  4055f8:	a81f      	add	r0, sp, #124	; 0x7c
  4055fa:	2103      	movs	r1, #3
  4055fc:	9002      	str	r0, [sp, #8]
  4055fe:	9a08      	ldr	r2, [sp, #32]
  405600:	9401      	str	r4, [sp, #4]
  405602:	463b      	mov	r3, r7
  405604:	9100      	str	r1, [sp, #0]
  405606:	980c      	ldr	r0, [sp, #48]	; 0x30
  405608:	f000 fa9a 	bl	405b40 <_dtoa_r>
  40560c:	4625      	mov	r5, r4
  40560e:	4606      	mov	r6, r0
  405610:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405612:	2b46      	cmp	r3, #70	; 0x46
  405614:	eb06 0405 	add.w	r4, r6, r5
  405618:	f47f af29 	bne.w	40546e <_svfprintf_r+0xed2>
  40561c:	7833      	ldrb	r3, [r6, #0]
  40561e:	2b30      	cmp	r3, #48	; 0x30
  405620:	f000 8178 	beq.w	405914 <_svfprintf_r+0x1378>
  405624:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405626:	442c      	add	r4, r5
  405628:	e721      	b.n	40546e <_svfprintf_r+0xed2>
  40562a:	aa25      	add	r2, sp, #148	; 0x94
  40562c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40562e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405630:	f002 f91c 	bl	40786c <__ssprint_r>
  405634:	2800      	cmp	r0, #0
  405636:	f47f a883 	bne.w	404740 <_svfprintf_r+0x1a4>
  40563a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40563c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40563e:	46c8      	mov	r8, r9
  405640:	e782      	b.n	405548 <_svfprintf_r+0xfac>
  405642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405644:	2b00      	cmp	r3, #0
  405646:	bf08      	it	eq
  405648:	2301      	moveq	r3, #1
  40564a:	930a      	str	r3, [sp, #40]	; 0x28
  40564c:	e6db      	b.n	405406 <_svfprintf_r+0xe6a>
  40564e:	4630      	mov	r0, r6
  405650:	940a      	str	r4, [sp, #40]	; 0x28
  405652:	f7fe ff35 	bl	4044c0 <strlen>
  405656:	950f      	str	r5, [sp, #60]	; 0x3c
  405658:	900e      	str	r0, [sp, #56]	; 0x38
  40565a:	f8cd b01c 	str.w	fp, [sp, #28]
  40565e:	4603      	mov	r3, r0
  405660:	f7ff b9f9 	b.w	404a56 <_svfprintf_r+0x4ba>
  405664:	272d      	movs	r7, #45	; 0x2d
  405666:	2300      	movs	r3, #0
  405668:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40566c:	930a      	str	r3, [sp, #40]	; 0x28
  40566e:	f7ff b8ae 	b.w	4047ce <_svfprintf_r+0x232>
  405672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405674:	9312      	str	r3, [sp, #72]	; 0x48
  405676:	461a      	mov	r2, r3
  405678:	3303      	adds	r3, #3
  40567a:	db04      	blt.n	405686 <_svfprintf_r+0x10ea>
  40567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40567e:	4619      	mov	r1, r3
  405680:	4291      	cmp	r1, r2
  405682:	f6bf af17 	bge.w	4054b4 <_svfprintf_r+0xf18>
  405686:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405688:	3b02      	subs	r3, #2
  40568a:	9311      	str	r3, [sp, #68]	; 0x44
  40568c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405690:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405694:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405696:	3b01      	subs	r3, #1
  405698:	2b00      	cmp	r3, #0
  40569a:	931f      	str	r3, [sp, #124]	; 0x7c
  40569c:	bfbd      	ittte	lt
  40569e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4056a0:	f1c3 0301 	rsblt	r3, r3, #1
  4056a4:	222d      	movlt	r2, #45	; 0x2d
  4056a6:	222b      	movge	r2, #43	; 0x2b
  4056a8:	2b09      	cmp	r3, #9
  4056aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4056ae:	f340 8116 	ble.w	4058de <_svfprintf_r+0x1342>
  4056b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4056b6:	4620      	mov	r0, r4
  4056b8:	4dab      	ldr	r5, [pc, #684]	; (405968 <_svfprintf_r+0x13cc>)
  4056ba:	e000      	b.n	4056be <_svfprintf_r+0x1122>
  4056bc:	4610      	mov	r0, r2
  4056be:	fb85 1203 	smull	r1, r2, r5, r3
  4056c2:	17d9      	asrs	r1, r3, #31
  4056c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4056c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4056cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4056d0:	3230      	adds	r2, #48	; 0x30
  4056d2:	2909      	cmp	r1, #9
  4056d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4056d8:	460b      	mov	r3, r1
  4056da:	f100 32ff 	add.w	r2, r0, #4294967295
  4056de:	dced      	bgt.n	4056bc <_svfprintf_r+0x1120>
  4056e0:	3330      	adds	r3, #48	; 0x30
  4056e2:	3802      	subs	r0, #2
  4056e4:	b2d9      	uxtb	r1, r3
  4056e6:	4284      	cmp	r4, r0
  4056e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4056ec:	f240 8165 	bls.w	4059ba <_svfprintf_r+0x141e>
  4056f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4056f4:	4613      	mov	r3, r2
  4056f6:	e001      	b.n	4056fc <_svfprintf_r+0x1160>
  4056f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4056fc:	f800 1b01 	strb.w	r1, [r0], #1
  405700:	42a3      	cmp	r3, r4
  405702:	d1f9      	bne.n	4056f8 <_svfprintf_r+0x115c>
  405704:	3301      	adds	r3, #1
  405706:	1a9b      	subs	r3, r3, r2
  405708:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40570c:	4413      	add	r3, r2
  40570e:	aa21      	add	r2, sp, #132	; 0x84
  405710:	1a9b      	subs	r3, r3, r2
  405712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405714:	931b      	str	r3, [sp, #108]	; 0x6c
  405716:	2a01      	cmp	r2, #1
  405718:	4413      	add	r3, r2
  40571a:	930e      	str	r3, [sp, #56]	; 0x38
  40571c:	f340 8119 	ble.w	405952 <_svfprintf_r+0x13b6>
  405720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405722:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405724:	4413      	add	r3, r2
  405726:	930e      	str	r3, [sp, #56]	; 0x38
  405728:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40572c:	9308      	str	r3, [sp, #32]
  40572e:	2300      	movs	r3, #0
  405730:	9312      	str	r3, [sp, #72]	; 0x48
  405732:	e6cf      	b.n	4054d4 <_svfprintf_r+0xf38>
  405734:	aa25      	add	r2, sp, #148	; 0x94
  405736:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405738:	980c      	ldr	r0, [sp, #48]	; 0x30
  40573a:	f002 f897 	bl	40786c <__ssprint_r>
  40573e:	2800      	cmp	r0, #0
  405740:	f47e affe 	bne.w	404740 <_svfprintf_r+0x1a4>
  405744:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405746:	46c8      	mov	r8, r9
  405748:	e4d7      	b.n	4050fa <_svfprintf_r+0xb5e>
  40574a:	4623      	mov	r3, r4
  40574c:	e6a2      	b.n	405494 <_svfprintf_r+0xef8>
  40574e:	aa25      	add	r2, sp, #148	; 0x94
  405750:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405752:	980c      	ldr	r0, [sp, #48]	; 0x30
  405754:	f002 f88a 	bl	40786c <__ssprint_r>
  405758:	2800      	cmp	r0, #0
  40575a:	f47e aff1 	bne.w	404740 <_svfprintf_r+0x1a4>
  40575e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405760:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405762:	46c8      	mov	r8, r9
  405764:	e5ae      	b.n	4052c4 <_svfprintf_r+0xd28>
  405766:	aa25      	add	r2, sp, #148	; 0x94
  405768:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40576a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40576c:	f002 f87e 	bl	40786c <__ssprint_r>
  405770:	2800      	cmp	r0, #0
  405772:	f47e afe5 	bne.w	404740 <_svfprintf_r+0x1a4>
  405776:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40577a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40577c:	1a9a      	subs	r2, r3, r2
  40577e:	46c8      	mov	r8, r9
  405780:	e5b8      	b.n	4052f4 <_svfprintf_r+0xd58>
  405782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405784:	9612      	str	r6, [sp, #72]	; 0x48
  405786:	2b06      	cmp	r3, #6
  405788:	bf28      	it	cs
  40578a:	2306      	movcs	r3, #6
  40578c:	960a      	str	r6, [sp, #40]	; 0x28
  40578e:	4637      	mov	r7, r6
  405790:	9308      	str	r3, [sp, #32]
  405792:	950f      	str	r5, [sp, #60]	; 0x3c
  405794:	f8cd b01c 	str.w	fp, [sp, #28]
  405798:	930e      	str	r3, [sp, #56]	; 0x38
  40579a:	4e74      	ldr	r6, [pc, #464]	; (40596c <_svfprintf_r+0x13d0>)
  40579c:	f7ff b816 	b.w	4047cc <_svfprintf_r+0x230>
  4057a0:	a823      	add	r0, sp, #140	; 0x8c
  4057a2:	a920      	add	r1, sp, #128	; 0x80
  4057a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4057a6:	9004      	str	r0, [sp, #16]
  4057a8:	9103      	str	r1, [sp, #12]
  4057aa:	a81f      	add	r0, sp, #124	; 0x7c
  4057ac:	2103      	movs	r1, #3
  4057ae:	9002      	str	r0, [sp, #8]
  4057b0:	9a08      	ldr	r2, [sp, #32]
  4057b2:	9501      	str	r5, [sp, #4]
  4057b4:	463b      	mov	r3, r7
  4057b6:	9100      	str	r1, [sp, #0]
  4057b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057ba:	f000 f9c1 	bl	405b40 <_dtoa_r>
  4057be:	4606      	mov	r6, r0
  4057c0:	1944      	adds	r4, r0, r5
  4057c2:	e72b      	b.n	40561c <_svfprintf_r+0x1080>
  4057c4:	2306      	movs	r3, #6
  4057c6:	930a      	str	r3, [sp, #40]	; 0x28
  4057c8:	e61d      	b.n	405406 <_svfprintf_r+0xe6a>
  4057ca:	272d      	movs	r7, #45	; 0x2d
  4057cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4057d0:	f7ff bacd 	b.w	404d6e <_svfprintf_r+0x7d2>
  4057d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4057d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4057d8:	4413      	add	r3, r2
  4057da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4057dc:	930e      	str	r3, [sp, #56]	; 0x38
  4057de:	2a00      	cmp	r2, #0
  4057e0:	f340 80b0 	ble.w	405944 <_svfprintf_r+0x13a8>
  4057e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4057e8:	9308      	str	r3, [sp, #32]
  4057ea:	2367      	movs	r3, #103	; 0x67
  4057ec:	9311      	str	r3, [sp, #68]	; 0x44
  4057ee:	e671      	b.n	4054d4 <_svfprintf_r+0xf38>
  4057f0:	2b00      	cmp	r3, #0
  4057f2:	f340 80c3 	ble.w	40597c <_svfprintf_r+0x13e0>
  4057f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4057f8:	2a00      	cmp	r2, #0
  4057fa:	f040 8099 	bne.w	405930 <_svfprintf_r+0x1394>
  4057fe:	f01b 0f01 	tst.w	fp, #1
  405802:	f040 8095 	bne.w	405930 <_svfprintf_r+0x1394>
  405806:	9308      	str	r3, [sp, #32]
  405808:	930e      	str	r3, [sp, #56]	; 0x38
  40580a:	e663      	b.n	4054d4 <_svfprintf_r+0xf38>
  40580c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40580e:	9308      	str	r3, [sp, #32]
  405810:	930e      	str	r3, [sp, #56]	; 0x38
  405812:	900a      	str	r0, [sp, #40]	; 0x28
  405814:	950f      	str	r5, [sp, #60]	; 0x3c
  405816:	f8cd b01c 	str.w	fp, [sp, #28]
  40581a:	9012      	str	r0, [sp, #72]	; 0x48
  40581c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405820:	f7fe bfd4 	b.w	4047cc <_svfprintf_r+0x230>
  405824:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405826:	2b47      	cmp	r3, #71	; 0x47
  405828:	f47f ae20 	bne.w	40546c <_svfprintf_r+0xed0>
  40582c:	f01b 0f01 	tst.w	fp, #1
  405830:	f47f aeee 	bne.w	405610 <_svfprintf_r+0x1074>
  405834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405836:	1b9b      	subs	r3, r3, r6
  405838:	9313      	str	r3, [sp, #76]	; 0x4c
  40583a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40583c:	2b47      	cmp	r3, #71	; 0x47
  40583e:	f43f af18 	beq.w	405672 <_svfprintf_r+0x10d6>
  405842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405844:	9312      	str	r3, [sp, #72]	; 0x48
  405846:	e721      	b.n	40568c <_svfprintf_r+0x10f0>
  405848:	424f      	negs	r7, r1
  40584a:	3110      	adds	r1, #16
  40584c:	4d48      	ldr	r5, [pc, #288]	; (405970 <_svfprintf_r+0x13d4>)
  40584e:	da2f      	bge.n	4058b0 <_svfprintf_r+0x1314>
  405850:	2410      	movs	r4, #16
  405852:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405856:	e004      	b.n	405862 <_svfprintf_r+0x12c6>
  405858:	f108 0808 	add.w	r8, r8, #8
  40585c:	3f10      	subs	r7, #16
  40585e:	2f10      	cmp	r7, #16
  405860:	dd26      	ble.n	4058b0 <_svfprintf_r+0x1314>
  405862:	3301      	adds	r3, #1
  405864:	3210      	adds	r2, #16
  405866:	2b07      	cmp	r3, #7
  405868:	9227      	str	r2, [sp, #156]	; 0x9c
  40586a:	9326      	str	r3, [sp, #152]	; 0x98
  40586c:	f8c8 5000 	str.w	r5, [r8]
  405870:	f8c8 4004 	str.w	r4, [r8, #4]
  405874:	ddf0      	ble.n	405858 <_svfprintf_r+0x12bc>
  405876:	aa25      	add	r2, sp, #148	; 0x94
  405878:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40587a:	4658      	mov	r0, fp
  40587c:	f001 fff6 	bl	40786c <__ssprint_r>
  405880:	2800      	cmp	r0, #0
  405882:	f47e af5d 	bne.w	404740 <_svfprintf_r+0x1a4>
  405886:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405888:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40588a:	46c8      	mov	r8, r9
  40588c:	e7e6      	b.n	40585c <_svfprintf_r+0x12c0>
  40588e:	aa25      	add	r2, sp, #148	; 0x94
  405890:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405892:	980c      	ldr	r0, [sp, #48]	; 0x30
  405894:	f001 ffea 	bl	40786c <__ssprint_r>
  405898:	2800      	cmp	r0, #0
  40589a:	f47e af51 	bne.w	404740 <_svfprintf_r+0x1a4>
  40589e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4058a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4058a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058a4:	46c8      	mov	r8, r9
  4058a6:	e667      	b.n	405578 <_svfprintf_r+0xfdc>
  4058a8:	2000      	movs	r0, #0
  4058aa:	900a      	str	r0, [sp, #40]	; 0x28
  4058ac:	f7fe bed0 	b.w	404650 <_svfprintf_r+0xb4>
  4058b0:	3301      	adds	r3, #1
  4058b2:	443a      	add	r2, r7
  4058b4:	2b07      	cmp	r3, #7
  4058b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4058ba:	9227      	str	r2, [sp, #156]	; 0x9c
  4058bc:	9326      	str	r3, [sp, #152]	; 0x98
  4058be:	f108 0808 	add.w	r8, r8, #8
  4058c2:	f77f ae5c 	ble.w	40557e <_svfprintf_r+0xfe2>
  4058c6:	aa25      	add	r2, sp, #148	; 0x94
  4058c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058cc:	f001 ffce 	bl	40786c <__ssprint_r>
  4058d0:	2800      	cmp	r0, #0
  4058d2:	f47e af35 	bne.w	404740 <_svfprintf_r+0x1a4>
  4058d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4058d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058da:	46c8      	mov	r8, r9
  4058dc:	e64f      	b.n	40557e <_svfprintf_r+0xfe2>
  4058de:	3330      	adds	r3, #48	; 0x30
  4058e0:	2230      	movs	r2, #48	; 0x30
  4058e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4058e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4058ea:	ab22      	add	r3, sp, #136	; 0x88
  4058ec:	e70f      	b.n	40570e <_svfprintf_r+0x1172>
  4058ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4058f2:	4413      	add	r3, r2
  4058f4:	930e      	str	r3, [sp, #56]	; 0x38
  4058f6:	e775      	b.n	4057e4 <_svfprintf_r+0x1248>
  4058f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4058fa:	e5cb      	b.n	405494 <_svfprintf_r+0xef8>
  4058fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4058fe:	4e1d      	ldr	r6, [pc, #116]	; (405974 <_svfprintf_r+0x13d8>)
  405900:	2b00      	cmp	r3, #0
  405902:	bfb6      	itet	lt
  405904:	272d      	movlt	r7, #45	; 0x2d
  405906:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40590a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40590e:	4b1a      	ldr	r3, [pc, #104]	; (405978 <_svfprintf_r+0x13dc>)
  405910:	f7ff ba2f 	b.w	404d72 <_svfprintf_r+0x7d6>
  405914:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405916:	9808      	ldr	r0, [sp, #32]
  405918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40591a:	4639      	mov	r1, r7
  40591c:	f002 f91a 	bl	407b54 <__aeabi_dcmpeq>
  405920:	2800      	cmp	r0, #0
  405922:	f47f ae7f 	bne.w	405624 <_svfprintf_r+0x1088>
  405926:	f1c5 0501 	rsb	r5, r5, #1
  40592a:	951f      	str	r5, [sp, #124]	; 0x7c
  40592c:	442c      	add	r4, r5
  40592e:	e59e      	b.n	40546e <_svfprintf_r+0xed2>
  405930:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405932:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405934:	4413      	add	r3, r2
  405936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405938:	441a      	add	r2, r3
  40593a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40593e:	920e      	str	r2, [sp, #56]	; 0x38
  405940:	9308      	str	r3, [sp, #32]
  405942:	e5c7      	b.n	4054d4 <_svfprintf_r+0xf38>
  405944:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405948:	f1c3 0301 	rsb	r3, r3, #1
  40594c:	441a      	add	r2, r3
  40594e:	4613      	mov	r3, r2
  405950:	e7d0      	b.n	4058f4 <_svfprintf_r+0x1358>
  405952:	f01b 0301 	ands.w	r3, fp, #1
  405956:	9312      	str	r3, [sp, #72]	; 0x48
  405958:	f47f aee2 	bne.w	405720 <_svfprintf_r+0x1184>
  40595c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40595e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405962:	9308      	str	r3, [sp, #32]
  405964:	e5b6      	b.n	4054d4 <_svfprintf_r+0xf38>
  405966:	bf00      	nop
  405968:	66666667 	.word	0x66666667
  40596c:	00407d30 	.word	0x00407d30
  405970:	00407d4c 	.word	0x00407d4c
  405974:	00407d04 	.word	0x00407d04
  405978:	00407d00 	.word	0x00407d00
  40597c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40597e:	b913      	cbnz	r3, 405986 <_svfprintf_r+0x13ea>
  405980:	f01b 0f01 	tst.w	fp, #1
  405984:	d002      	beq.n	40598c <_svfprintf_r+0x13f0>
  405986:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405988:	3301      	adds	r3, #1
  40598a:	e7d4      	b.n	405936 <_svfprintf_r+0x139a>
  40598c:	2301      	movs	r3, #1
  40598e:	e73a      	b.n	405806 <_svfprintf_r+0x126a>
  405990:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405992:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405996:	6828      	ldr	r0, [r5, #0]
  405998:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40599c:	900a      	str	r0, [sp, #40]	; 0x28
  40599e:	4628      	mov	r0, r5
  4059a0:	3004      	adds	r0, #4
  4059a2:	46a2      	mov	sl, r4
  4059a4:	900f      	str	r0, [sp, #60]	; 0x3c
  4059a6:	f7fe be51 	b.w	40464c <_svfprintf_r+0xb0>
  4059aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4059ae:	f7ff b867 	b.w	404a80 <_svfprintf_r+0x4e4>
  4059b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4059b6:	f7ff ba15 	b.w	404de4 <_svfprintf_r+0x848>
  4059ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4059be:	e6a6      	b.n	40570e <_svfprintf_r+0x1172>
  4059c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4059c4:	f7ff b8eb 	b.w	404b9e <_svfprintf_r+0x602>
  4059c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4059ca:	230c      	movs	r3, #12
  4059cc:	6013      	str	r3, [r2, #0]
  4059ce:	f04f 33ff 	mov.w	r3, #4294967295
  4059d2:	9309      	str	r3, [sp, #36]	; 0x24
  4059d4:	f7fe bebd 	b.w	404752 <_svfprintf_r+0x1b6>
  4059d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4059dc:	f7ff b99a 	b.w	404d14 <_svfprintf_r+0x778>
  4059e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4059e4:	f7ff b976 	b.w	404cd4 <_svfprintf_r+0x738>
  4059e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4059ec:	f7ff b959 	b.w	404ca2 <_svfprintf_r+0x706>
  4059f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4059f4:	f7ff b912 	b.w	404c1c <_svfprintf_r+0x680>

004059f8 <register_fini>:
  4059f8:	4b02      	ldr	r3, [pc, #8]	; (405a04 <register_fini+0xc>)
  4059fa:	b113      	cbz	r3, 405a02 <register_fini+0xa>
  4059fc:	4802      	ldr	r0, [pc, #8]	; (405a08 <register_fini+0x10>)
  4059fe:	f000 b805 	b.w	405a0c <atexit>
  405a02:	4770      	bx	lr
  405a04:	00000000 	.word	0x00000000
  405a08:	00406995 	.word	0x00406995

00405a0c <atexit>:
  405a0c:	2300      	movs	r3, #0
  405a0e:	4601      	mov	r1, r0
  405a10:	461a      	mov	r2, r3
  405a12:	4618      	mov	r0, r3
  405a14:	f001 bfb6 	b.w	407984 <__register_exitproc>

00405a18 <quorem>:
  405a18:	6902      	ldr	r2, [r0, #16]
  405a1a:	690b      	ldr	r3, [r1, #16]
  405a1c:	4293      	cmp	r3, r2
  405a1e:	f300 808d 	bgt.w	405b3c <quorem+0x124>
  405a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a26:	f103 38ff 	add.w	r8, r3, #4294967295
  405a2a:	f101 0714 	add.w	r7, r1, #20
  405a2e:	f100 0b14 	add.w	fp, r0, #20
  405a32:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405a36:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405a3a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405a3e:	b083      	sub	sp, #12
  405a40:	3201      	adds	r2, #1
  405a42:	fbb3 f9f2 	udiv	r9, r3, r2
  405a46:	eb0b 0304 	add.w	r3, fp, r4
  405a4a:	9400      	str	r4, [sp, #0]
  405a4c:	eb07 0a04 	add.w	sl, r7, r4
  405a50:	9301      	str	r3, [sp, #4]
  405a52:	f1b9 0f00 	cmp.w	r9, #0
  405a56:	d039      	beq.n	405acc <quorem+0xb4>
  405a58:	2500      	movs	r5, #0
  405a5a:	462e      	mov	r6, r5
  405a5c:	46bc      	mov	ip, r7
  405a5e:	46de      	mov	lr, fp
  405a60:	f85c 4b04 	ldr.w	r4, [ip], #4
  405a64:	f8de 3000 	ldr.w	r3, [lr]
  405a68:	b2a2      	uxth	r2, r4
  405a6a:	fb09 5502 	mla	r5, r9, r2, r5
  405a6e:	0c22      	lsrs	r2, r4, #16
  405a70:	0c2c      	lsrs	r4, r5, #16
  405a72:	fb09 4202 	mla	r2, r9, r2, r4
  405a76:	b2ad      	uxth	r5, r5
  405a78:	1b75      	subs	r5, r6, r5
  405a7a:	b296      	uxth	r6, r2
  405a7c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405a80:	fa15 f383 	uxtah	r3, r5, r3
  405a84:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405a88:	b29b      	uxth	r3, r3
  405a8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405a8e:	45e2      	cmp	sl, ip
  405a90:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405a94:	f84e 3b04 	str.w	r3, [lr], #4
  405a98:	ea4f 4626 	mov.w	r6, r6, asr #16
  405a9c:	d2e0      	bcs.n	405a60 <quorem+0x48>
  405a9e:	9b00      	ldr	r3, [sp, #0]
  405aa0:	f85b 3003 	ldr.w	r3, [fp, r3]
  405aa4:	b993      	cbnz	r3, 405acc <quorem+0xb4>
  405aa6:	9c01      	ldr	r4, [sp, #4]
  405aa8:	1f23      	subs	r3, r4, #4
  405aaa:	459b      	cmp	fp, r3
  405aac:	d20c      	bcs.n	405ac8 <quorem+0xb0>
  405aae:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405ab2:	b94b      	cbnz	r3, 405ac8 <quorem+0xb0>
  405ab4:	f1a4 0308 	sub.w	r3, r4, #8
  405ab8:	e002      	b.n	405ac0 <quorem+0xa8>
  405aba:	681a      	ldr	r2, [r3, #0]
  405abc:	3b04      	subs	r3, #4
  405abe:	b91a      	cbnz	r2, 405ac8 <quorem+0xb0>
  405ac0:	459b      	cmp	fp, r3
  405ac2:	f108 38ff 	add.w	r8, r8, #4294967295
  405ac6:	d3f8      	bcc.n	405aba <quorem+0xa2>
  405ac8:	f8c0 8010 	str.w	r8, [r0, #16]
  405acc:	4604      	mov	r4, r0
  405ace:	f001 fc2b 	bl	407328 <__mcmp>
  405ad2:	2800      	cmp	r0, #0
  405ad4:	db2e      	blt.n	405b34 <quorem+0x11c>
  405ad6:	f109 0901 	add.w	r9, r9, #1
  405ada:	465d      	mov	r5, fp
  405adc:	2300      	movs	r3, #0
  405ade:	f857 1b04 	ldr.w	r1, [r7], #4
  405ae2:	6828      	ldr	r0, [r5, #0]
  405ae4:	b28a      	uxth	r2, r1
  405ae6:	1a9a      	subs	r2, r3, r2
  405ae8:	0c0b      	lsrs	r3, r1, #16
  405aea:	fa12 f280 	uxtah	r2, r2, r0
  405aee:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405af2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405af6:	b292      	uxth	r2, r2
  405af8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405afc:	45ba      	cmp	sl, r7
  405afe:	f845 2b04 	str.w	r2, [r5], #4
  405b02:	ea4f 4323 	mov.w	r3, r3, asr #16
  405b06:	d2ea      	bcs.n	405ade <quorem+0xc6>
  405b08:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405b0c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405b10:	b982      	cbnz	r2, 405b34 <quorem+0x11c>
  405b12:	1f1a      	subs	r2, r3, #4
  405b14:	4593      	cmp	fp, r2
  405b16:	d20b      	bcs.n	405b30 <quorem+0x118>
  405b18:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405b1c:	b942      	cbnz	r2, 405b30 <quorem+0x118>
  405b1e:	3b08      	subs	r3, #8
  405b20:	e002      	b.n	405b28 <quorem+0x110>
  405b22:	681a      	ldr	r2, [r3, #0]
  405b24:	3b04      	subs	r3, #4
  405b26:	b91a      	cbnz	r2, 405b30 <quorem+0x118>
  405b28:	459b      	cmp	fp, r3
  405b2a:	f108 38ff 	add.w	r8, r8, #4294967295
  405b2e:	d3f8      	bcc.n	405b22 <quorem+0x10a>
  405b30:	f8c4 8010 	str.w	r8, [r4, #16]
  405b34:	4648      	mov	r0, r9
  405b36:	b003      	add	sp, #12
  405b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b3c:	2000      	movs	r0, #0
  405b3e:	4770      	bx	lr

00405b40 <_dtoa_r>:
  405b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b44:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405b46:	b09b      	sub	sp, #108	; 0x6c
  405b48:	4604      	mov	r4, r0
  405b4a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405b4c:	4692      	mov	sl, r2
  405b4e:	469b      	mov	fp, r3
  405b50:	b141      	cbz	r1, 405b64 <_dtoa_r+0x24>
  405b52:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405b54:	604a      	str	r2, [r1, #4]
  405b56:	2301      	movs	r3, #1
  405b58:	4093      	lsls	r3, r2
  405b5a:	608b      	str	r3, [r1, #8]
  405b5c:	f001 fa0c 	bl	406f78 <_Bfree>
  405b60:	2300      	movs	r3, #0
  405b62:	6423      	str	r3, [r4, #64]	; 0x40
  405b64:	f1bb 0f00 	cmp.w	fp, #0
  405b68:	465d      	mov	r5, fp
  405b6a:	db35      	blt.n	405bd8 <_dtoa_r+0x98>
  405b6c:	2300      	movs	r3, #0
  405b6e:	6033      	str	r3, [r6, #0]
  405b70:	4b9d      	ldr	r3, [pc, #628]	; (405de8 <_dtoa_r+0x2a8>)
  405b72:	43ab      	bics	r3, r5
  405b74:	d015      	beq.n	405ba2 <_dtoa_r+0x62>
  405b76:	4650      	mov	r0, sl
  405b78:	4659      	mov	r1, fp
  405b7a:	2200      	movs	r2, #0
  405b7c:	2300      	movs	r3, #0
  405b7e:	f001 ffe9 	bl	407b54 <__aeabi_dcmpeq>
  405b82:	4680      	mov	r8, r0
  405b84:	2800      	cmp	r0, #0
  405b86:	d02d      	beq.n	405be4 <_dtoa_r+0xa4>
  405b88:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b8a:	2301      	movs	r3, #1
  405b8c:	6013      	str	r3, [r2, #0]
  405b8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b90:	2b00      	cmp	r3, #0
  405b92:	f000 80bd 	beq.w	405d10 <_dtoa_r+0x1d0>
  405b96:	4895      	ldr	r0, [pc, #596]	; (405dec <_dtoa_r+0x2ac>)
  405b98:	6018      	str	r0, [r3, #0]
  405b9a:	3801      	subs	r0, #1
  405b9c:	b01b      	add	sp, #108	; 0x6c
  405b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ba2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405ba4:	f242 730f 	movw	r3, #9999	; 0x270f
  405ba8:	6013      	str	r3, [r2, #0]
  405baa:	f1ba 0f00 	cmp.w	sl, #0
  405bae:	d10d      	bne.n	405bcc <_dtoa_r+0x8c>
  405bb0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405bb4:	b955      	cbnz	r5, 405bcc <_dtoa_r+0x8c>
  405bb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405bb8:	488d      	ldr	r0, [pc, #564]	; (405df0 <_dtoa_r+0x2b0>)
  405bba:	2b00      	cmp	r3, #0
  405bbc:	d0ee      	beq.n	405b9c <_dtoa_r+0x5c>
  405bbe:	f100 0308 	add.w	r3, r0, #8
  405bc2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405bc4:	6013      	str	r3, [r2, #0]
  405bc6:	b01b      	add	sp, #108	; 0x6c
  405bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405bce:	4889      	ldr	r0, [pc, #548]	; (405df4 <_dtoa_r+0x2b4>)
  405bd0:	2b00      	cmp	r3, #0
  405bd2:	d0e3      	beq.n	405b9c <_dtoa_r+0x5c>
  405bd4:	1cc3      	adds	r3, r0, #3
  405bd6:	e7f4      	b.n	405bc2 <_dtoa_r+0x82>
  405bd8:	2301      	movs	r3, #1
  405bda:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405bde:	6033      	str	r3, [r6, #0]
  405be0:	46ab      	mov	fp, r5
  405be2:	e7c5      	b.n	405b70 <_dtoa_r+0x30>
  405be4:	aa18      	add	r2, sp, #96	; 0x60
  405be6:	ab19      	add	r3, sp, #100	; 0x64
  405be8:	9201      	str	r2, [sp, #4]
  405bea:	9300      	str	r3, [sp, #0]
  405bec:	4652      	mov	r2, sl
  405bee:	465b      	mov	r3, fp
  405bf0:	4620      	mov	r0, r4
  405bf2:	f001 fc39 	bl	407468 <__d2b>
  405bf6:	0d2b      	lsrs	r3, r5, #20
  405bf8:	4681      	mov	r9, r0
  405bfa:	d071      	beq.n	405ce0 <_dtoa_r+0x1a0>
  405bfc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405c00:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405c04:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405c06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405c0a:	4650      	mov	r0, sl
  405c0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405c10:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405c14:	2200      	movs	r2, #0
  405c16:	4b78      	ldr	r3, [pc, #480]	; (405df8 <_dtoa_r+0x2b8>)
  405c18:	f7fd fb5e 	bl	4032d8 <__aeabi_dsub>
  405c1c:	a36c      	add	r3, pc, #432	; (adr r3, 405dd0 <_dtoa_r+0x290>)
  405c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c22:	f7fd fd0d 	bl	403640 <__aeabi_dmul>
  405c26:	a36c      	add	r3, pc, #432	; (adr r3, 405dd8 <_dtoa_r+0x298>)
  405c28:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c2c:	f7fd fb56 	bl	4032dc <__adddf3>
  405c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405c34:	4630      	mov	r0, r6
  405c36:	f7fd fc9d 	bl	403574 <__aeabi_i2d>
  405c3a:	a369      	add	r3, pc, #420	; (adr r3, 405de0 <_dtoa_r+0x2a0>)
  405c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c40:	f7fd fcfe 	bl	403640 <__aeabi_dmul>
  405c44:	4602      	mov	r2, r0
  405c46:	460b      	mov	r3, r1
  405c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405c4c:	f7fd fb46 	bl	4032dc <__adddf3>
  405c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405c54:	f001 ffc6 	bl	407be4 <__aeabi_d2iz>
  405c58:	2200      	movs	r2, #0
  405c5a:	9002      	str	r0, [sp, #8]
  405c5c:	2300      	movs	r3, #0
  405c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405c62:	f001 ff81 	bl	407b68 <__aeabi_dcmplt>
  405c66:	2800      	cmp	r0, #0
  405c68:	f040 8173 	bne.w	405f52 <_dtoa_r+0x412>
  405c6c:	9d02      	ldr	r5, [sp, #8]
  405c6e:	2d16      	cmp	r5, #22
  405c70:	f200 815d 	bhi.w	405f2e <_dtoa_r+0x3ee>
  405c74:	4b61      	ldr	r3, [pc, #388]	; (405dfc <_dtoa_r+0x2bc>)
  405c76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
  405c7e:	4652      	mov	r2, sl
  405c80:	465b      	mov	r3, fp
  405c82:	f001 ff8f 	bl	407ba4 <__aeabi_dcmpgt>
  405c86:	2800      	cmp	r0, #0
  405c88:	f000 81c5 	beq.w	406016 <_dtoa_r+0x4d6>
  405c8c:	1e6b      	subs	r3, r5, #1
  405c8e:	9302      	str	r3, [sp, #8]
  405c90:	2300      	movs	r3, #0
  405c92:	930e      	str	r3, [sp, #56]	; 0x38
  405c94:	1bbf      	subs	r7, r7, r6
  405c96:	1e7b      	subs	r3, r7, #1
  405c98:	9306      	str	r3, [sp, #24]
  405c9a:	f100 8154 	bmi.w	405f46 <_dtoa_r+0x406>
  405c9e:	2300      	movs	r3, #0
  405ca0:	9308      	str	r3, [sp, #32]
  405ca2:	9b02      	ldr	r3, [sp, #8]
  405ca4:	2b00      	cmp	r3, #0
  405ca6:	f2c0 8145 	blt.w	405f34 <_dtoa_r+0x3f4>
  405caa:	9a06      	ldr	r2, [sp, #24]
  405cac:	930d      	str	r3, [sp, #52]	; 0x34
  405cae:	4611      	mov	r1, r2
  405cb0:	4419      	add	r1, r3
  405cb2:	2300      	movs	r3, #0
  405cb4:	9106      	str	r1, [sp, #24]
  405cb6:	930c      	str	r3, [sp, #48]	; 0x30
  405cb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405cba:	2b09      	cmp	r3, #9
  405cbc:	d82a      	bhi.n	405d14 <_dtoa_r+0x1d4>
  405cbe:	2b05      	cmp	r3, #5
  405cc0:	f340 865b 	ble.w	40697a <_dtoa_r+0xe3a>
  405cc4:	3b04      	subs	r3, #4
  405cc6:	9324      	str	r3, [sp, #144]	; 0x90
  405cc8:	2500      	movs	r5, #0
  405cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ccc:	3b02      	subs	r3, #2
  405cce:	2b03      	cmp	r3, #3
  405cd0:	f200 8642 	bhi.w	406958 <_dtoa_r+0xe18>
  405cd4:	e8df f013 	tbh	[pc, r3, lsl #1]
  405cd8:	02c903d4 	.word	0x02c903d4
  405cdc:	046103df 	.word	0x046103df
  405ce0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405ce2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405ce4:	443e      	add	r6, r7
  405ce6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405cea:	2b20      	cmp	r3, #32
  405cec:	f340 818e 	ble.w	40600c <_dtoa_r+0x4cc>
  405cf0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405cf4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405cf8:	409d      	lsls	r5, r3
  405cfa:	fa2a f000 	lsr.w	r0, sl, r0
  405cfe:	4328      	orrs	r0, r5
  405d00:	f7fd fc28 	bl	403554 <__aeabi_ui2d>
  405d04:	2301      	movs	r3, #1
  405d06:	3e01      	subs	r6, #1
  405d08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405d0c:	9314      	str	r3, [sp, #80]	; 0x50
  405d0e:	e781      	b.n	405c14 <_dtoa_r+0xd4>
  405d10:	483b      	ldr	r0, [pc, #236]	; (405e00 <_dtoa_r+0x2c0>)
  405d12:	e743      	b.n	405b9c <_dtoa_r+0x5c>
  405d14:	2100      	movs	r1, #0
  405d16:	6461      	str	r1, [r4, #68]	; 0x44
  405d18:	4620      	mov	r0, r4
  405d1a:	9125      	str	r1, [sp, #148]	; 0x94
  405d1c:	f001 f906 	bl	406f2c <_Balloc>
  405d20:	f04f 33ff 	mov.w	r3, #4294967295
  405d24:	930a      	str	r3, [sp, #40]	; 0x28
  405d26:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405d28:	930f      	str	r3, [sp, #60]	; 0x3c
  405d2a:	2301      	movs	r3, #1
  405d2c:	9004      	str	r0, [sp, #16]
  405d2e:	6420      	str	r0, [r4, #64]	; 0x40
  405d30:	9224      	str	r2, [sp, #144]	; 0x90
  405d32:	930b      	str	r3, [sp, #44]	; 0x2c
  405d34:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405d36:	2b00      	cmp	r3, #0
  405d38:	f2c0 80d9 	blt.w	405eee <_dtoa_r+0x3ae>
  405d3c:	9a02      	ldr	r2, [sp, #8]
  405d3e:	2a0e      	cmp	r2, #14
  405d40:	f300 80d5 	bgt.w	405eee <_dtoa_r+0x3ae>
  405d44:	4b2d      	ldr	r3, [pc, #180]	; (405dfc <_dtoa_r+0x2bc>)
  405d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405d52:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405d54:	2b00      	cmp	r3, #0
  405d56:	f2c0 83ba 	blt.w	4064ce <_dtoa_r+0x98e>
  405d5a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405d5e:	4650      	mov	r0, sl
  405d60:	462a      	mov	r2, r5
  405d62:	4633      	mov	r3, r6
  405d64:	4659      	mov	r1, fp
  405d66:	f7fd fd95 	bl	403894 <__aeabi_ddiv>
  405d6a:	f001 ff3b 	bl	407be4 <__aeabi_d2iz>
  405d6e:	4680      	mov	r8, r0
  405d70:	f7fd fc00 	bl	403574 <__aeabi_i2d>
  405d74:	462a      	mov	r2, r5
  405d76:	4633      	mov	r3, r6
  405d78:	f7fd fc62 	bl	403640 <__aeabi_dmul>
  405d7c:	460b      	mov	r3, r1
  405d7e:	4602      	mov	r2, r0
  405d80:	4659      	mov	r1, fp
  405d82:	4650      	mov	r0, sl
  405d84:	f7fd faa8 	bl	4032d8 <__aeabi_dsub>
  405d88:	9d04      	ldr	r5, [sp, #16]
  405d8a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405d8e:	702b      	strb	r3, [r5, #0]
  405d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d92:	2b01      	cmp	r3, #1
  405d94:	4606      	mov	r6, r0
  405d96:	460f      	mov	r7, r1
  405d98:	f105 0501 	add.w	r5, r5, #1
  405d9c:	d068      	beq.n	405e70 <_dtoa_r+0x330>
  405d9e:	2200      	movs	r2, #0
  405da0:	4b18      	ldr	r3, [pc, #96]	; (405e04 <_dtoa_r+0x2c4>)
  405da2:	f7fd fc4d 	bl	403640 <__aeabi_dmul>
  405da6:	2200      	movs	r2, #0
  405da8:	2300      	movs	r3, #0
  405daa:	4606      	mov	r6, r0
  405dac:	460f      	mov	r7, r1
  405dae:	f001 fed1 	bl	407b54 <__aeabi_dcmpeq>
  405db2:	2800      	cmp	r0, #0
  405db4:	f040 8088 	bne.w	405ec8 <_dtoa_r+0x388>
  405db8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405dbc:	f04f 0a00 	mov.w	sl, #0
  405dc0:	f8df b040 	ldr.w	fp, [pc, #64]	; 405e04 <_dtoa_r+0x2c4>
  405dc4:	940c      	str	r4, [sp, #48]	; 0x30
  405dc6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405dca:	e028      	b.n	405e1e <_dtoa_r+0x2de>
  405dcc:	f3af 8000 	nop.w
  405dd0:	636f4361 	.word	0x636f4361
  405dd4:	3fd287a7 	.word	0x3fd287a7
  405dd8:	8b60c8b3 	.word	0x8b60c8b3
  405ddc:	3fc68a28 	.word	0x3fc68a28
  405de0:	509f79fb 	.word	0x509f79fb
  405de4:	3fd34413 	.word	0x3fd34413
  405de8:	7ff00000 	.word	0x7ff00000
  405dec:	00407d39 	.word	0x00407d39
  405df0:	00407d5c 	.word	0x00407d5c
  405df4:	00407d68 	.word	0x00407d68
  405df8:	3ff80000 	.word	0x3ff80000
  405dfc:	00407da8 	.word	0x00407da8
  405e00:	00407d38 	.word	0x00407d38
  405e04:	40240000 	.word	0x40240000
  405e08:	f7fd fc1a 	bl	403640 <__aeabi_dmul>
  405e0c:	2200      	movs	r2, #0
  405e0e:	2300      	movs	r3, #0
  405e10:	4606      	mov	r6, r0
  405e12:	460f      	mov	r7, r1
  405e14:	f001 fe9e 	bl	407b54 <__aeabi_dcmpeq>
  405e18:	2800      	cmp	r0, #0
  405e1a:	f040 83c1 	bne.w	4065a0 <_dtoa_r+0xa60>
  405e1e:	4642      	mov	r2, r8
  405e20:	464b      	mov	r3, r9
  405e22:	4630      	mov	r0, r6
  405e24:	4639      	mov	r1, r7
  405e26:	f7fd fd35 	bl	403894 <__aeabi_ddiv>
  405e2a:	f001 fedb 	bl	407be4 <__aeabi_d2iz>
  405e2e:	4604      	mov	r4, r0
  405e30:	f7fd fba0 	bl	403574 <__aeabi_i2d>
  405e34:	4642      	mov	r2, r8
  405e36:	464b      	mov	r3, r9
  405e38:	f7fd fc02 	bl	403640 <__aeabi_dmul>
  405e3c:	4602      	mov	r2, r0
  405e3e:	460b      	mov	r3, r1
  405e40:	4630      	mov	r0, r6
  405e42:	4639      	mov	r1, r7
  405e44:	f7fd fa48 	bl	4032d8 <__aeabi_dsub>
  405e48:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405e4c:	9e04      	ldr	r6, [sp, #16]
  405e4e:	f805 eb01 	strb.w	lr, [r5], #1
  405e52:	eba5 0e06 	sub.w	lr, r5, r6
  405e56:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405e58:	45b6      	cmp	lr, r6
  405e5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405e5e:	4652      	mov	r2, sl
  405e60:	465b      	mov	r3, fp
  405e62:	d1d1      	bne.n	405e08 <_dtoa_r+0x2c8>
  405e64:	46a0      	mov	r8, r4
  405e66:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405e6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405e6c:	4606      	mov	r6, r0
  405e6e:	460f      	mov	r7, r1
  405e70:	4632      	mov	r2, r6
  405e72:	463b      	mov	r3, r7
  405e74:	4630      	mov	r0, r6
  405e76:	4639      	mov	r1, r7
  405e78:	f7fd fa30 	bl	4032dc <__adddf3>
  405e7c:	4606      	mov	r6, r0
  405e7e:	460f      	mov	r7, r1
  405e80:	4602      	mov	r2, r0
  405e82:	460b      	mov	r3, r1
  405e84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e88:	f001 fe6e 	bl	407b68 <__aeabi_dcmplt>
  405e8c:	b948      	cbnz	r0, 405ea2 <_dtoa_r+0x362>
  405e8e:	4632      	mov	r2, r6
  405e90:	463b      	mov	r3, r7
  405e92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e96:	f001 fe5d 	bl	407b54 <__aeabi_dcmpeq>
  405e9a:	b1a8      	cbz	r0, 405ec8 <_dtoa_r+0x388>
  405e9c:	f018 0f01 	tst.w	r8, #1
  405ea0:	d012      	beq.n	405ec8 <_dtoa_r+0x388>
  405ea2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405ea6:	9a04      	ldr	r2, [sp, #16]
  405ea8:	1e6b      	subs	r3, r5, #1
  405eaa:	e004      	b.n	405eb6 <_dtoa_r+0x376>
  405eac:	429a      	cmp	r2, r3
  405eae:	f000 8401 	beq.w	4066b4 <_dtoa_r+0xb74>
  405eb2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405eb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405eba:	f103 0501 	add.w	r5, r3, #1
  405ebe:	d0f5      	beq.n	405eac <_dtoa_r+0x36c>
  405ec0:	f108 0801 	add.w	r8, r8, #1
  405ec4:	f883 8000 	strb.w	r8, [r3]
  405ec8:	4649      	mov	r1, r9
  405eca:	4620      	mov	r0, r4
  405ecc:	f001 f854 	bl	406f78 <_Bfree>
  405ed0:	2200      	movs	r2, #0
  405ed2:	9b02      	ldr	r3, [sp, #8]
  405ed4:	702a      	strb	r2, [r5, #0]
  405ed6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405ed8:	3301      	adds	r3, #1
  405eda:	6013      	str	r3, [r2, #0]
  405edc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405ede:	2b00      	cmp	r3, #0
  405ee0:	f000 839e 	beq.w	406620 <_dtoa_r+0xae0>
  405ee4:	9804      	ldr	r0, [sp, #16]
  405ee6:	601d      	str	r5, [r3, #0]
  405ee8:	b01b      	add	sp, #108	; 0x6c
  405eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405eee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405ef0:	2a00      	cmp	r2, #0
  405ef2:	d03e      	beq.n	405f72 <_dtoa_r+0x432>
  405ef4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405ef6:	2a01      	cmp	r2, #1
  405ef8:	f340 8311 	ble.w	40651e <_dtoa_r+0x9de>
  405efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405f00:	1e5f      	subs	r7, r3, #1
  405f02:	42ba      	cmp	r2, r7
  405f04:	f2c0 838f 	blt.w	406626 <_dtoa_r+0xae6>
  405f08:	1bd7      	subs	r7, r2, r7
  405f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f0c:	2b00      	cmp	r3, #0
  405f0e:	f2c0 848b 	blt.w	406828 <_dtoa_r+0xce8>
  405f12:	9d08      	ldr	r5, [sp, #32]
  405f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f16:	9a08      	ldr	r2, [sp, #32]
  405f18:	441a      	add	r2, r3
  405f1a:	9208      	str	r2, [sp, #32]
  405f1c:	9a06      	ldr	r2, [sp, #24]
  405f1e:	2101      	movs	r1, #1
  405f20:	441a      	add	r2, r3
  405f22:	4620      	mov	r0, r4
  405f24:	9206      	str	r2, [sp, #24]
  405f26:	f001 f8c1 	bl	4070ac <__i2b>
  405f2a:	4606      	mov	r6, r0
  405f2c:	e024      	b.n	405f78 <_dtoa_r+0x438>
  405f2e:	2301      	movs	r3, #1
  405f30:	930e      	str	r3, [sp, #56]	; 0x38
  405f32:	e6af      	b.n	405c94 <_dtoa_r+0x154>
  405f34:	9a08      	ldr	r2, [sp, #32]
  405f36:	9b02      	ldr	r3, [sp, #8]
  405f38:	1ad2      	subs	r2, r2, r3
  405f3a:	425b      	negs	r3, r3
  405f3c:	930c      	str	r3, [sp, #48]	; 0x30
  405f3e:	2300      	movs	r3, #0
  405f40:	9208      	str	r2, [sp, #32]
  405f42:	930d      	str	r3, [sp, #52]	; 0x34
  405f44:	e6b8      	b.n	405cb8 <_dtoa_r+0x178>
  405f46:	f1c7 0301 	rsb	r3, r7, #1
  405f4a:	9308      	str	r3, [sp, #32]
  405f4c:	2300      	movs	r3, #0
  405f4e:	9306      	str	r3, [sp, #24]
  405f50:	e6a7      	b.n	405ca2 <_dtoa_r+0x162>
  405f52:	9d02      	ldr	r5, [sp, #8]
  405f54:	4628      	mov	r0, r5
  405f56:	f7fd fb0d 	bl	403574 <__aeabi_i2d>
  405f5a:	4602      	mov	r2, r0
  405f5c:	460b      	mov	r3, r1
  405f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405f62:	f001 fdf7 	bl	407b54 <__aeabi_dcmpeq>
  405f66:	2800      	cmp	r0, #0
  405f68:	f47f ae80 	bne.w	405c6c <_dtoa_r+0x12c>
  405f6c:	1e6b      	subs	r3, r5, #1
  405f6e:	9302      	str	r3, [sp, #8]
  405f70:	e67c      	b.n	405c6c <_dtoa_r+0x12c>
  405f72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405f74:	9d08      	ldr	r5, [sp, #32]
  405f76:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405f78:	2d00      	cmp	r5, #0
  405f7a:	dd0c      	ble.n	405f96 <_dtoa_r+0x456>
  405f7c:	9906      	ldr	r1, [sp, #24]
  405f7e:	2900      	cmp	r1, #0
  405f80:	460b      	mov	r3, r1
  405f82:	dd08      	ble.n	405f96 <_dtoa_r+0x456>
  405f84:	42a9      	cmp	r1, r5
  405f86:	9a08      	ldr	r2, [sp, #32]
  405f88:	bfa8      	it	ge
  405f8a:	462b      	movge	r3, r5
  405f8c:	1ad2      	subs	r2, r2, r3
  405f8e:	1aed      	subs	r5, r5, r3
  405f90:	1acb      	subs	r3, r1, r3
  405f92:	9208      	str	r2, [sp, #32]
  405f94:	9306      	str	r3, [sp, #24]
  405f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f98:	b1d3      	cbz	r3, 405fd0 <_dtoa_r+0x490>
  405f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405f9c:	2b00      	cmp	r3, #0
  405f9e:	f000 82b7 	beq.w	406510 <_dtoa_r+0x9d0>
  405fa2:	2f00      	cmp	r7, #0
  405fa4:	dd10      	ble.n	405fc8 <_dtoa_r+0x488>
  405fa6:	4631      	mov	r1, r6
  405fa8:	463a      	mov	r2, r7
  405faa:	4620      	mov	r0, r4
  405fac:	f001 f91a 	bl	4071e4 <__pow5mult>
  405fb0:	464a      	mov	r2, r9
  405fb2:	4601      	mov	r1, r0
  405fb4:	4606      	mov	r6, r0
  405fb6:	4620      	mov	r0, r4
  405fb8:	f001 f882 	bl	4070c0 <__multiply>
  405fbc:	4649      	mov	r1, r9
  405fbe:	4680      	mov	r8, r0
  405fc0:	4620      	mov	r0, r4
  405fc2:	f000 ffd9 	bl	406f78 <_Bfree>
  405fc6:	46c1      	mov	r9, r8
  405fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405fca:	1bda      	subs	r2, r3, r7
  405fcc:	f040 82a1 	bne.w	406512 <_dtoa_r+0x9d2>
  405fd0:	2101      	movs	r1, #1
  405fd2:	4620      	mov	r0, r4
  405fd4:	f001 f86a 	bl	4070ac <__i2b>
  405fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405fda:	2b00      	cmp	r3, #0
  405fdc:	4680      	mov	r8, r0
  405fde:	dd1c      	ble.n	40601a <_dtoa_r+0x4da>
  405fe0:	4601      	mov	r1, r0
  405fe2:	461a      	mov	r2, r3
  405fe4:	4620      	mov	r0, r4
  405fe6:	f001 f8fd 	bl	4071e4 <__pow5mult>
  405fea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fec:	2b01      	cmp	r3, #1
  405fee:	4680      	mov	r8, r0
  405ff0:	f340 8254 	ble.w	40649c <_dtoa_r+0x95c>
  405ff4:	2300      	movs	r3, #0
  405ff6:	930c      	str	r3, [sp, #48]	; 0x30
  405ff8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405ffc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406000:	6918      	ldr	r0, [r3, #16]
  406002:	f001 f803 	bl	40700c <__hi0bits>
  406006:	f1c0 0020 	rsb	r0, r0, #32
  40600a:	e010      	b.n	40602e <_dtoa_r+0x4ee>
  40600c:	f1c3 0520 	rsb	r5, r3, #32
  406010:	fa0a f005 	lsl.w	r0, sl, r5
  406014:	e674      	b.n	405d00 <_dtoa_r+0x1c0>
  406016:	900e      	str	r0, [sp, #56]	; 0x38
  406018:	e63c      	b.n	405c94 <_dtoa_r+0x154>
  40601a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40601c:	2b01      	cmp	r3, #1
  40601e:	f340 8287 	ble.w	406530 <_dtoa_r+0x9f0>
  406022:	2300      	movs	r3, #0
  406024:	930c      	str	r3, [sp, #48]	; 0x30
  406026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406028:	2001      	movs	r0, #1
  40602a:	2b00      	cmp	r3, #0
  40602c:	d1e4      	bne.n	405ff8 <_dtoa_r+0x4b8>
  40602e:	9a06      	ldr	r2, [sp, #24]
  406030:	4410      	add	r0, r2
  406032:	f010 001f 	ands.w	r0, r0, #31
  406036:	f000 80a1 	beq.w	40617c <_dtoa_r+0x63c>
  40603a:	f1c0 0320 	rsb	r3, r0, #32
  40603e:	2b04      	cmp	r3, #4
  406040:	f340 849e 	ble.w	406980 <_dtoa_r+0xe40>
  406044:	9b08      	ldr	r3, [sp, #32]
  406046:	f1c0 001c 	rsb	r0, r0, #28
  40604a:	4403      	add	r3, r0
  40604c:	9308      	str	r3, [sp, #32]
  40604e:	4613      	mov	r3, r2
  406050:	4403      	add	r3, r0
  406052:	4405      	add	r5, r0
  406054:	9306      	str	r3, [sp, #24]
  406056:	9b08      	ldr	r3, [sp, #32]
  406058:	2b00      	cmp	r3, #0
  40605a:	dd05      	ble.n	406068 <_dtoa_r+0x528>
  40605c:	4649      	mov	r1, r9
  40605e:	461a      	mov	r2, r3
  406060:	4620      	mov	r0, r4
  406062:	f001 f90f 	bl	407284 <__lshift>
  406066:	4681      	mov	r9, r0
  406068:	9b06      	ldr	r3, [sp, #24]
  40606a:	2b00      	cmp	r3, #0
  40606c:	dd05      	ble.n	40607a <_dtoa_r+0x53a>
  40606e:	4641      	mov	r1, r8
  406070:	461a      	mov	r2, r3
  406072:	4620      	mov	r0, r4
  406074:	f001 f906 	bl	407284 <__lshift>
  406078:	4680      	mov	r8, r0
  40607a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40607c:	2b00      	cmp	r3, #0
  40607e:	f040 8086 	bne.w	40618e <_dtoa_r+0x64e>
  406082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406084:	2b00      	cmp	r3, #0
  406086:	f340 8266 	ble.w	406556 <_dtoa_r+0xa16>
  40608a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40608c:	2b00      	cmp	r3, #0
  40608e:	f000 8098 	beq.w	4061c2 <_dtoa_r+0x682>
  406092:	2d00      	cmp	r5, #0
  406094:	dd05      	ble.n	4060a2 <_dtoa_r+0x562>
  406096:	4631      	mov	r1, r6
  406098:	462a      	mov	r2, r5
  40609a:	4620      	mov	r0, r4
  40609c:	f001 f8f2 	bl	407284 <__lshift>
  4060a0:	4606      	mov	r6, r0
  4060a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4060a4:	2b00      	cmp	r3, #0
  4060a6:	f040 8337 	bne.w	406718 <_dtoa_r+0xbd8>
  4060aa:	9606      	str	r6, [sp, #24]
  4060ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060ae:	9a04      	ldr	r2, [sp, #16]
  4060b0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4060b4:	3b01      	subs	r3, #1
  4060b6:	18d3      	adds	r3, r2, r3
  4060b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4060ba:	f00a 0301 	and.w	r3, sl, #1
  4060be:	930c      	str	r3, [sp, #48]	; 0x30
  4060c0:	4617      	mov	r7, r2
  4060c2:	46c2      	mov	sl, r8
  4060c4:	4651      	mov	r1, sl
  4060c6:	4648      	mov	r0, r9
  4060c8:	f7ff fca6 	bl	405a18 <quorem>
  4060cc:	4631      	mov	r1, r6
  4060ce:	4605      	mov	r5, r0
  4060d0:	4648      	mov	r0, r9
  4060d2:	f001 f929 	bl	407328 <__mcmp>
  4060d6:	465a      	mov	r2, fp
  4060d8:	900a      	str	r0, [sp, #40]	; 0x28
  4060da:	4651      	mov	r1, sl
  4060dc:	4620      	mov	r0, r4
  4060de:	f001 f93f 	bl	407360 <__mdiff>
  4060e2:	68c2      	ldr	r2, [r0, #12]
  4060e4:	4680      	mov	r8, r0
  4060e6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4060ea:	2a00      	cmp	r2, #0
  4060ec:	f040 822b 	bne.w	406546 <_dtoa_r+0xa06>
  4060f0:	4601      	mov	r1, r0
  4060f2:	4648      	mov	r0, r9
  4060f4:	9308      	str	r3, [sp, #32]
  4060f6:	f001 f917 	bl	407328 <__mcmp>
  4060fa:	4641      	mov	r1, r8
  4060fc:	9006      	str	r0, [sp, #24]
  4060fe:	4620      	mov	r0, r4
  406100:	f000 ff3a 	bl	406f78 <_Bfree>
  406104:	9a06      	ldr	r2, [sp, #24]
  406106:	9b08      	ldr	r3, [sp, #32]
  406108:	b932      	cbnz	r2, 406118 <_dtoa_r+0x5d8>
  40610a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40610c:	b921      	cbnz	r1, 406118 <_dtoa_r+0x5d8>
  40610e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406110:	2a00      	cmp	r2, #0
  406112:	f000 83ef 	beq.w	4068f4 <_dtoa_r+0xdb4>
  406116:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406118:	990a      	ldr	r1, [sp, #40]	; 0x28
  40611a:	2900      	cmp	r1, #0
  40611c:	f2c0 829f 	blt.w	40665e <_dtoa_r+0xb1e>
  406120:	d105      	bne.n	40612e <_dtoa_r+0x5ee>
  406122:	9924      	ldr	r1, [sp, #144]	; 0x90
  406124:	b919      	cbnz	r1, 40612e <_dtoa_r+0x5ee>
  406126:	990c      	ldr	r1, [sp, #48]	; 0x30
  406128:	2900      	cmp	r1, #0
  40612a:	f000 8298 	beq.w	40665e <_dtoa_r+0xb1e>
  40612e:	2a00      	cmp	r2, #0
  406130:	f300 8306 	bgt.w	406740 <_dtoa_r+0xc00>
  406134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406136:	703b      	strb	r3, [r7, #0]
  406138:	f107 0801 	add.w	r8, r7, #1
  40613c:	4297      	cmp	r7, r2
  40613e:	4645      	mov	r5, r8
  406140:	f000 830c 	beq.w	40675c <_dtoa_r+0xc1c>
  406144:	4649      	mov	r1, r9
  406146:	2300      	movs	r3, #0
  406148:	220a      	movs	r2, #10
  40614a:	4620      	mov	r0, r4
  40614c:	f000 ff1e 	bl	406f8c <__multadd>
  406150:	455e      	cmp	r6, fp
  406152:	4681      	mov	r9, r0
  406154:	4631      	mov	r1, r6
  406156:	f04f 0300 	mov.w	r3, #0
  40615a:	f04f 020a 	mov.w	r2, #10
  40615e:	4620      	mov	r0, r4
  406160:	f000 81eb 	beq.w	40653a <_dtoa_r+0x9fa>
  406164:	f000 ff12 	bl	406f8c <__multadd>
  406168:	4659      	mov	r1, fp
  40616a:	4606      	mov	r6, r0
  40616c:	2300      	movs	r3, #0
  40616e:	220a      	movs	r2, #10
  406170:	4620      	mov	r0, r4
  406172:	f000 ff0b 	bl	406f8c <__multadd>
  406176:	4647      	mov	r7, r8
  406178:	4683      	mov	fp, r0
  40617a:	e7a3      	b.n	4060c4 <_dtoa_r+0x584>
  40617c:	201c      	movs	r0, #28
  40617e:	9b08      	ldr	r3, [sp, #32]
  406180:	4403      	add	r3, r0
  406182:	9308      	str	r3, [sp, #32]
  406184:	9b06      	ldr	r3, [sp, #24]
  406186:	4403      	add	r3, r0
  406188:	4405      	add	r5, r0
  40618a:	9306      	str	r3, [sp, #24]
  40618c:	e763      	b.n	406056 <_dtoa_r+0x516>
  40618e:	4641      	mov	r1, r8
  406190:	4648      	mov	r0, r9
  406192:	f001 f8c9 	bl	407328 <__mcmp>
  406196:	2800      	cmp	r0, #0
  406198:	f6bf af73 	bge.w	406082 <_dtoa_r+0x542>
  40619c:	9f02      	ldr	r7, [sp, #8]
  40619e:	4649      	mov	r1, r9
  4061a0:	2300      	movs	r3, #0
  4061a2:	220a      	movs	r2, #10
  4061a4:	4620      	mov	r0, r4
  4061a6:	3f01      	subs	r7, #1
  4061a8:	9702      	str	r7, [sp, #8]
  4061aa:	f000 feef 	bl	406f8c <__multadd>
  4061ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4061b0:	4681      	mov	r9, r0
  4061b2:	2b00      	cmp	r3, #0
  4061b4:	f040 83b6 	bne.w	406924 <_dtoa_r+0xde4>
  4061b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061ba:	2b00      	cmp	r3, #0
  4061bc:	f340 83bf 	ble.w	40693e <_dtoa_r+0xdfe>
  4061c0:	930a      	str	r3, [sp, #40]	; 0x28
  4061c2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4061c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4061c8:	465d      	mov	r5, fp
  4061ca:	e002      	b.n	4061d2 <_dtoa_r+0x692>
  4061cc:	f000 fede 	bl	406f8c <__multadd>
  4061d0:	4681      	mov	r9, r0
  4061d2:	4641      	mov	r1, r8
  4061d4:	4648      	mov	r0, r9
  4061d6:	f7ff fc1f 	bl	405a18 <quorem>
  4061da:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4061de:	f805 ab01 	strb.w	sl, [r5], #1
  4061e2:	eba5 030b 	sub.w	r3, r5, fp
  4061e6:	42bb      	cmp	r3, r7
  4061e8:	f04f 020a 	mov.w	r2, #10
  4061ec:	f04f 0300 	mov.w	r3, #0
  4061f0:	4649      	mov	r1, r9
  4061f2:	4620      	mov	r0, r4
  4061f4:	dbea      	blt.n	4061cc <_dtoa_r+0x68c>
  4061f6:	9b04      	ldr	r3, [sp, #16]
  4061f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061fa:	2a01      	cmp	r2, #1
  4061fc:	bfac      	ite	ge
  4061fe:	189b      	addge	r3, r3, r2
  406200:	3301      	addlt	r3, #1
  406202:	461d      	mov	r5, r3
  406204:	f04f 0b00 	mov.w	fp, #0
  406208:	4649      	mov	r1, r9
  40620a:	2201      	movs	r2, #1
  40620c:	4620      	mov	r0, r4
  40620e:	f001 f839 	bl	407284 <__lshift>
  406212:	4641      	mov	r1, r8
  406214:	4681      	mov	r9, r0
  406216:	f001 f887 	bl	407328 <__mcmp>
  40621a:	2800      	cmp	r0, #0
  40621c:	f340 823d 	ble.w	40669a <_dtoa_r+0xb5a>
  406220:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406224:	9904      	ldr	r1, [sp, #16]
  406226:	1e6b      	subs	r3, r5, #1
  406228:	e004      	b.n	406234 <_dtoa_r+0x6f4>
  40622a:	428b      	cmp	r3, r1
  40622c:	f000 81ae 	beq.w	40658c <_dtoa_r+0xa4c>
  406230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406234:	2a39      	cmp	r2, #57	; 0x39
  406236:	f103 0501 	add.w	r5, r3, #1
  40623a:	d0f6      	beq.n	40622a <_dtoa_r+0x6ea>
  40623c:	3201      	adds	r2, #1
  40623e:	701a      	strb	r2, [r3, #0]
  406240:	4641      	mov	r1, r8
  406242:	4620      	mov	r0, r4
  406244:	f000 fe98 	bl	406f78 <_Bfree>
  406248:	2e00      	cmp	r6, #0
  40624a:	f43f ae3d 	beq.w	405ec8 <_dtoa_r+0x388>
  40624e:	f1bb 0f00 	cmp.w	fp, #0
  406252:	d005      	beq.n	406260 <_dtoa_r+0x720>
  406254:	45b3      	cmp	fp, r6
  406256:	d003      	beq.n	406260 <_dtoa_r+0x720>
  406258:	4659      	mov	r1, fp
  40625a:	4620      	mov	r0, r4
  40625c:	f000 fe8c 	bl	406f78 <_Bfree>
  406260:	4631      	mov	r1, r6
  406262:	4620      	mov	r0, r4
  406264:	f000 fe88 	bl	406f78 <_Bfree>
  406268:	e62e      	b.n	405ec8 <_dtoa_r+0x388>
  40626a:	2300      	movs	r3, #0
  40626c:	930b      	str	r3, [sp, #44]	; 0x2c
  40626e:	9b02      	ldr	r3, [sp, #8]
  406270:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406272:	4413      	add	r3, r2
  406274:	930f      	str	r3, [sp, #60]	; 0x3c
  406276:	3301      	adds	r3, #1
  406278:	2b01      	cmp	r3, #1
  40627a:	461f      	mov	r7, r3
  40627c:	461e      	mov	r6, r3
  40627e:	930a      	str	r3, [sp, #40]	; 0x28
  406280:	bfb8      	it	lt
  406282:	2701      	movlt	r7, #1
  406284:	2100      	movs	r1, #0
  406286:	2f17      	cmp	r7, #23
  406288:	6461      	str	r1, [r4, #68]	; 0x44
  40628a:	d90a      	bls.n	4062a2 <_dtoa_r+0x762>
  40628c:	2201      	movs	r2, #1
  40628e:	2304      	movs	r3, #4
  406290:	005b      	lsls	r3, r3, #1
  406292:	f103 0014 	add.w	r0, r3, #20
  406296:	4287      	cmp	r7, r0
  406298:	4611      	mov	r1, r2
  40629a:	f102 0201 	add.w	r2, r2, #1
  40629e:	d2f7      	bcs.n	406290 <_dtoa_r+0x750>
  4062a0:	6461      	str	r1, [r4, #68]	; 0x44
  4062a2:	4620      	mov	r0, r4
  4062a4:	f000 fe42 	bl	406f2c <_Balloc>
  4062a8:	2e0e      	cmp	r6, #14
  4062aa:	9004      	str	r0, [sp, #16]
  4062ac:	6420      	str	r0, [r4, #64]	; 0x40
  4062ae:	f63f ad41 	bhi.w	405d34 <_dtoa_r+0x1f4>
  4062b2:	2d00      	cmp	r5, #0
  4062b4:	f43f ad3e 	beq.w	405d34 <_dtoa_r+0x1f4>
  4062b8:	9902      	ldr	r1, [sp, #8]
  4062ba:	2900      	cmp	r1, #0
  4062bc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4062c0:	f340 8202 	ble.w	4066c8 <_dtoa_r+0xb88>
  4062c4:	4bb8      	ldr	r3, [pc, #736]	; (4065a8 <_dtoa_r+0xa68>)
  4062c6:	f001 020f 	and.w	r2, r1, #15
  4062ca:	110d      	asrs	r5, r1, #4
  4062cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4062d0:	06e9      	lsls	r1, r5, #27
  4062d2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4062d6:	f140 81ae 	bpl.w	406636 <_dtoa_r+0xaf6>
  4062da:	4bb4      	ldr	r3, [pc, #720]	; (4065ac <_dtoa_r+0xa6c>)
  4062dc:	4650      	mov	r0, sl
  4062de:	4659      	mov	r1, fp
  4062e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4062e4:	f7fd fad6 	bl	403894 <__aeabi_ddiv>
  4062e8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4062ec:	f005 050f 	and.w	r5, r5, #15
  4062f0:	f04f 0a03 	mov.w	sl, #3
  4062f4:	b18d      	cbz	r5, 40631a <_dtoa_r+0x7da>
  4062f6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4065ac <_dtoa_r+0xa6c>
  4062fa:	07ea      	lsls	r2, r5, #31
  4062fc:	d509      	bpl.n	406312 <_dtoa_r+0x7d2>
  4062fe:	4630      	mov	r0, r6
  406300:	4639      	mov	r1, r7
  406302:	e9d8 2300 	ldrd	r2, r3, [r8]
  406306:	f7fd f99b 	bl	403640 <__aeabi_dmul>
  40630a:	f10a 0a01 	add.w	sl, sl, #1
  40630e:	4606      	mov	r6, r0
  406310:	460f      	mov	r7, r1
  406312:	106d      	asrs	r5, r5, #1
  406314:	f108 0808 	add.w	r8, r8, #8
  406318:	d1ef      	bne.n	4062fa <_dtoa_r+0x7ba>
  40631a:	463b      	mov	r3, r7
  40631c:	4632      	mov	r2, r6
  40631e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406322:	f7fd fab7 	bl	403894 <__aeabi_ddiv>
  406326:	4607      	mov	r7, r0
  406328:	4688      	mov	r8, r1
  40632a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40632c:	b143      	cbz	r3, 406340 <_dtoa_r+0x800>
  40632e:	2200      	movs	r2, #0
  406330:	4b9f      	ldr	r3, [pc, #636]	; (4065b0 <_dtoa_r+0xa70>)
  406332:	4638      	mov	r0, r7
  406334:	4641      	mov	r1, r8
  406336:	f001 fc17 	bl	407b68 <__aeabi_dcmplt>
  40633a:	2800      	cmp	r0, #0
  40633c:	f040 8286 	bne.w	40684c <_dtoa_r+0xd0c>
  406340:	4650      	mov	r0, sl
  406342:	f7fd f917 	bl	403574 <__aeabi_i2d>
  406346:	463a      	mov	r2, r7
  406348:	4643      	mov	r3, r8
  40634a:	f7fd f979 	bl	403640 <__aeabi_dmul>
  40634e:	4b99      	ldr	r3, [pc, #612]	; (4065b4 <_dtoa_r+0xa74>)
  406350:	2200      	movs	r2, #0
  406352:	f7fc ffc3 	bl	4032dc <__adddf3>
  406356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406358:	4605      	mov	r5, r0
  40635a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40635e:	2b00      	cmp	r3, #0
  406360:	f000 813e 	beq.w	4065e0 <_dtoa_r+0xaa0>
  406364:	9b02      	ldr	r3, [sp, #8]
  406366:	9315      	str	r3, [sp, #84]	; 0x54
  406368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40636a:	9312      	str	r3, [sp, #72]	; 0x48
  40636c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40636e:	2b00      	cmp	r3, #0
  406370:	f000 81fa 	beq.w	406768 <_dtoa_r+0xc28>
  406374:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406376:	4b8c      	ldr	r3, [pc, #560]	; (4065a8 <_dtoa_r+0xa68>)
  406378:	498f      	ldr	r1, [pc, #572]	; (4065b8 <_dtoa_r+0xa78>)
  40637a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40637e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406382:	2000      	movs	r0, #0
  406384:	f7fd fa86 	bl	403894 <__aeabi_ddiv>
  406388:	462a      	mov	r2, r5
  40638a:	4633      	mov	r3, r6
  40638c:	f7fc ffa4 	bl	4032d8 <__aeabi_dsub>
  406390:	4682      	mov	sl, r0
  406392:	468b      	mov	fp, r1
  406394:	4638      	mov	r0, r7
  406396:	4641      	mov	r1, r8
  406398:	f001 fc24 	bl	407be4 <__aeabi_d2iz>
  40639c:	4605      	mov	r5, r0
  40639e:	f7fd f8e9 	bl	403574 <__aeabi_i2d>
  4063a2:	4602      	mov	r2, r0
  4063a4:	460b      	mov	r3, r1
  4063a6:	4638      	mov	r0, r7
  4063a8:	4641      	mov	r1, r8
  4063aa:	f7fc ff95 	bl	4032d8 <__aeabi_dsub>
  4063ae:	3530      	adds	r5, #48	; 0x30
  4063b0:	fa5f f885 	uxtb.w	r8, r5
  4063b4:	9d04      	ldr	r5, [sp, #16]
  4063b6:	4606      	mov	r6, r0
  4063b8:	460f      	mov	r7, r1
  4063ba:	f885 8000 	strb.w	r8, [r5]
  4063be:	4602      	mov	r2, r0
  4063c0:	460b      	mov	r3, r1
  4063c2:	4650      	mov	r0, sl
  4063c4:	4659      	mov	r1, fp
  4063c6:	3501      	adds	r5, #1
  4063c8:	f001 fbec 	bl	407ba4 <__aeabi_dcmpgt>
  4063cc:	2800      	cmp	r0, #0
  4063ce:	d154      	bne.n	40647a <_dtoa_r+0x93a>
  4063d0:	4632      	mov	r2, r6
  4063d2:	463b      	mov	r3, r7
  4063d4:	2000      	movs	r0, #0
  4063d6:	4976      	ldr	r1, [pc, #472]	; (4065b0 <_dtoa_r+0xa70>)
  4063d8:	f7fc ff7e 	bl	4032d8 <__aeabi_dsub>
  4063dc:	4602      	mov	r2, r0
  4063de:	460b      	mov	r3, r1
  4063e0:	4650      	mov	r0, sl
  4063e2:	4659      	mov	r1, fp
  4063e4:	f001 fbde 	bl	407ba4 <__aeabi_dcmpgt>
  4063e8:	2800      	cmp	r0, #0
  4063ea:	f040 8270 	bne.w	4068ce <_dtoa_r+0xd8e>
  4063ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4063f0:	2a01      	cmp	r2, #1
  4063f2:	f000 8111 	beq.w	406618 <_dtoa_r+0xad8>
  4063f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4063f8:	9a04      	ldr	r2, [sp, #16]
  4063fa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4063fe:	4413      	add	r3, r2
  406400:	4699      	mov	r9, r3
  406402:	e00d      	b.n	406420 <_dtoa_r+0x8e0>
  406404:	2000      	movs	r0, #0
  406406:	496a      	ldr	r1, [pc, #424]	; (4065b0 <_dtoa_r+0xa70>)
  406408:	f7fc ff66 	bl	4032d8 <__aeabi_dsub>
  40640c:	4652      	mov	r2, sl
  40640e:	465b      	mov	r3, fp
  406410:	f001 fbaa 	bl	407b68 <__aeabi_dcmplt>
  406414:	2800      	cmp	r0, #0
  406416:	f040 8258 	bne.w	4068ca <_dtoa_r+0xd8a>
  40641a:	454d      	cmp	r5, r9
  40641c:	f000 80fa 	beq.w	406614 <_dtoa_r+0xad4>
  406420:	4650      	mov	r0, sl
  406422:	4659      	mov	r1, fp
  406424:	2200      	movs	r2, #0
  406426:	4b65      	ldr	r3, [pc, #404]	; (4065bc <_dtoa_r+0xa7c>)
  406428:	f7fd f90a 	bl	403640 <__aeabi_dmul>
  40642c:	2200      	movs	r2, #0
  40642e:	4b63      	ldr	r3, [pc, #396]	; (4065bc <_dtoa_r+0xa7c>)
  406430:	4682      	mov	sl, r0
  406432:	468b      	mov	fp, r1
  406434:	4630      	mov	r0, r6
  406436:	4639      	mov	r1, r7
  406438:	f7fd f902 	bl	403640 <__aeabi_dmul>
  40643c:	460f      	mov	r7, r1
  40643e:	4606      	mov	r6, r0
  406440:	f001 fbd0 	bl	407be4 <__aeabi_d2iz>
  406444:	4680      	mov	r8, r0
  406446:	f7fd f895 	bl	403574 <__aeabi_i2d>
  40644a:	4602      	mov	r2, r0
  40644c:	460b      	mov	r3, r1
  40644e:	4630      	mov	r0, r6
  406450:	4639      	mov	r1, r7
  406452:	f7fc ff41 	bl	4032d8 <__aeabi_dsub>
  406456:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40645a:	fa5f f888 	uxtb.w	r8, r8
  40645e:	4652      	mov	r2, sl
  406460:	465b      	mov	r3, fp
  406462:	f805 8b01 	strb.w	r8, [r5], #1
  406466:	4606      	mov	r6, r0
  406468:	460f      	mov	r7, r1
  40646a:	f001 fb7d 	bl	407b68 <__aeabi_dcmplt>
  40646e:	4632      	mov	r2, r6
  406470:	463b      	mov	r3, r7
  406472:	2800      	cmp	r0, #0
  406474:	d0c6      	beq.n	406404 <_dtoa_r+0x8c4>
  406476:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40647a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40647c:	9302      	str	r3, [sp, #8]
  40647e:	e523      	b.n	405ec8 <_dtoa_r+0x388>
  406480:	2300      	movs	r3, #0
  406482:	930b      	str	r3, [sp, #44]	; 0x2c
  406484:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406486:	2b00      	cmp	r3, #0
  406488:	f340 80dc 	ble.w	406644 <_dtoa_r+0xb04>
  40648c:	461f      	mov	r7, r3
  40648e:	461e      	mov	r6, r3
  406490:	930f      	str	r3, [sp, #60]	; 0x3c
  406492:	930a      	str	r3, [sp, #40]	; 0x28
  406494:	e6f6      	b.n	406284 <_dtoa_r+0x744>
  406496:	2301      	movs	r3, #1
  406498:	930b      	str	r3, [sp, #44]	; 0x2c
  40649a:	e7f3      	b.n	406484 <_dtoa_r+0x944>
  40649c:	f1ba 0f00 	cmp.w	sl, #0
  4064a0:	f47f ada8 	bne.w	405ff4 <_dtoa_r+0x4b4>
  4064a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4064a8:	2b00      	cmp	r3, #0
  4064aa:	f47f adba 	bne.w	406022 <_dtoa_r+0x4e2>
  4064ae:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4064b2:	0d3f      	lsrs	r7, r7, #20
  4064b4:	053f      	lsls	r7, r7, #20
  4064b6:	2f00      	cmp	r7, #0
  4064b8:	f000 820d 	beq.w	4068d6 <_dtoa_r+0xd96>
  4064bc:	9b08      	ldr	r3, [sp, #32]
  4064be:	3301      	adds	r3, #1
  4064c0:	9308      	str	r3, [sp, #32]
  4064c2:	9b06      	ldr	r3, [sp, #24]
  4064c4:	3301      	adds	r3, #1
  4064c6:	9306      	str	r3, [sp, #24]
  4064c8:	2301      	movs	r3, #1
  4064ca:	930c      	str	r3, [sp, #48]	; 0x30
  4064cc:	e5ab      	b.n	406026 <_dtoa_r+0x4e6>
  4064ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4064d0:	2b00      	cmp	r3, #0
  4064d2:	f73f ac42 	bgt.w	405d5a <_dtoa_r+0x21a>
  4064d6:	f040 8221 	bne.w	40691c <_dtoa_r+0xddc>
  4064da:	2200      	movs	r2, #0
  4064dc:	4b38      	ldr	r3, [pc, #224]	; (4065c0 <_dtoa_r+0xa80>)
  4064de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4064e2:	f7fd f8ad 	bl	403640 <__aeabi_dmul>
  4064e6:	4652      	mov	r2, sl
  4064e8:	465b      	mov	r3, fp
  4064ea:	f001 fb51 	bl	407b90 <__aeabi_dcmpge>
  4064ee:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4064f2:	4646      	mov	r6, r8
  4064f4:	2800      	cmp	r0, #0
  4064f6:	d041      	beq.n	40657c <_dtoa_r+0xa3c>
  4064f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4064fa:	9d04      	ldr	r5, [sp, #16]
  4064fc:	43db      	mvns	r3, r3
  4064fe:	9302      	str	r3, [sp, #8]
  406500:	4641      	mov	r1, r8
  406502:	4620      	mov	r0, r4
  406504:	f000 fd38 	bl	406f78 <_Bfree>
  406508:	2e00      	cmp	r6, #0
  40650a:	f43f acdd 	beq.w	405ec8 <_dtoa_r+0x388>
  40650e:	e6a7      	b.n	406260 <_dtoa_r+0x720>
  406510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406512:	4649      	mov	r1, r9
  406514:	4620      	mov	r0, r4
  406516:	f000 fe65 	bl	4071e4 <__pow5mult>
  40651a:	4681      	mov	r9, r0
  40651c:	e558      	b.n	405fd0 <_dtoa_r+0x490>
  40651e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406520:	2a00      	cmp	r2, #0
  406522:	f000 8187 	beq.w	406834 <_dtoa_r+0xcf4>
  406526:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40652a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40652c:	9d08      	ldr	r5, [sp, #32]
  40652e:	e4f2      	b.n	405f16 <_dtoa_r+0x3d6>
  406530:	f1ba 0f00 	cmp.w	sl, #0
  406534:	f47f ad75 	bne.w	406022 <_dtoa_r+0x4e2>
  406538:	e7b4      	b.n	4064a4 <_dtoa_r+0x964>
  40653a:	f000 fd27 	bl	406f8c <__multadd>
  40653e:	4647      	mov	r7, r8
  406540:	4606      	mov	r6, r0
  406542:	4683      	mov	fp, r0
  406544:	e5be      	b.n	4060c4 <_dtoa_r+0x584>
  406546:	4601      	mov	r1, r0
  406548:	4620      	mov	r0, r4
  40654a:	9306      	str	r3, [sp, #24]
  40654c:	f000 fd14 	bl	406f78 <_Bfree>
  406550:	2201      	movs	r2, #1
  406552:	9b06      	ldr	r3, [sp, #24]
  406554:	e5e0      	b.n	406118 <_dtoa_r+0x5d8>
  406556:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406558:	2b02      	cmp	r3, #2
  40655a:	f77f ad96 	ble.w	40608a <_dtoa_r+0x54a>
  40655e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406560:	2b00      	cmp	r3, #0
  406562:	d1c9      	bne.n	4064f8 <_dtoa_r+0x9b8>
  406564:	4641      	mov	r1, r8
  406566:	2205      	movs	r2, #5
  406568:	4620      	mov	r0, r4
  40656a:	f000 fd0f 	bl	406f8c <__multadd>
  40656e:	4601      	mov	r1, r0
  406570:	4680      	mov	r8, r0
  406572:	4648      	mov	r0, r9
  406574:	f000 fed8 	bl	407328 <__mcmp>
  406578:	2800      	cmp	r0, #0
  40657a:	ddbd      	ble.n	4064f8 <_dtoa_r+0x9b8>
  40657c:	9a02      	ldr	r2, [sp, #8]
  40657e:	9904      	ldr	r1, [sp, #16]
  406580:	2331      	movs	r3, #49	; 0x31
  406582:	3201      	adds	r2, #1
  406584:	9202      	str	r2, [sp, #8]
  406586:	700b      	strb	r3, [r1, #0]
  406588:	1c4d      	adds	r5, r1, #1
  40658a:	e7b9      	b.n	406500 <_dtoa_r+0x9c0>
  40658c:	9a02      	ldr	r2, [sp, #8]
  40658e:	3201      	adds	r2, #1
  406590:	9202      	str	r2, [sp, #8]
  406592:	9a04      	ldr	r2, [sp, #16]
  406594:	2331      	movs	r3, #49	; 0x31
  406596:	7013      	strb	r3, [r2, #0]
  406598:	e652      	b.n	406240 <_dtoa_r+0x700>
  40659a:	2301      	movs	r3, #1
  40659c:	930b      	str	r3, [sp, #44]	; 0x2c
  40659e:	e666      	b.n	40626e <_dtoa_r+0x72e>
  4065a0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4065a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4065a6:	e48f      	b.n	405ec8 <_dtoa_r+0x388>
  4065a8:	00407da8 	.word	0x00407da8
  4065ac:	00407d80 	.word	0x00407d80
  4065b0:	3ff00000 	.word	0x3ff00000
  4065b4:	401c0000 	.word	0x401c0000
  4065b8:	3fe00000 	.word	0x3fe00000
  4065bc:	40240000 	.word	0x40240000
  4065c0:	40140000 	.word	0x40140000
  4065c4:	4650      	mov	r0, sl
  4065c6:	f7fc ffd5 	bl	403574 <__aeabi_i2d>
  4065ca:	463a      	mov	r2, r7
  4065cc:	4643      	mov	r3, r8
  4065ce:	f7fd f837 	bl	403640 <__aeabi_dmul>
  4065d2:	2200      	movs	r2, #0
  4065d4:	4bc1      	ldr	r3, [pc, #772]	; (4068dc <_dtoa_r+0xd9c>)
  4065d6:	f7fc fe81 	bl	4032dc <__adddf3>
  4065da:	4605      	mov	r5, r0
  4065dc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4065e0:	4641      	mov	r1, r8
  4065e2:	2200      	movs	r2, #0
  4065e4:	4bbe      	ldr	r3, [pc, #760]	; (4068e0 <_dtoa_r+0xda0>)
  4065e6:	4638      	mov	r0, r7
  4065e8:	f7fc fe76 	bl	4032d8 <__aeabi_dsub>
  4065ec:	462a      	mov	r2, r5
  4065ee:	4633      	mov	r3, r6
  4065f0:	4682      	mov	sl, r0
  4065f2:	468b      	mov	fp, r1
  4065f4:	f001 fad6 	bl	407ba4 <__aeabi_dcmpgt>
  4065f8:	4680      	mov	r8, r0
  4065fa:	2800      	cmp	r0, #0
  4065fc:	f040 8110 	bne.w	406820 <_dtoa_r+0xce0>
  406600:	462a      	mov	r2, r5
  406602:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406606:	4650      	mov	r0, sl
  406608:	4659      	mov	r1, fp
  40660a:	f001 faad 	bl	407b68 <__aeabi_dcmplt>
  40660e:	b118      	cbz	r0, 406618 <_dtoa_r+0xad8>
  406610:	4646      	mov	r6, r8
  406612:	e771      	b.n	4064f8 <_dtoa_r+0x9b8>
  406614:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406618:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40661c:	f7ff bb8a 	b.w	405d34 <_dtoa_r+0x1f4>
  406620:	9804      	ldr	r0, [sp, #16]
  406622:	f7ff babb 	b.w	405b9c <_dtoa_r+0x5c>
  406626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40662a:	970c      	str	r7, [sp, #48]	; 0x30
  40662c:	1afb      	subs	r3, r7, r3
  40662e:	441a      	add	r2, r3
  406630:	920d      	str	r2, [sp, #52]	; 0x34
  406632:	2700      	movs	r7, #0
  406634:	e469      	b.n	405f0a <_dtoa_r+0x3ca>
  406636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40663a:	f04f 0a02 	mov.w	sl, #2
  40663e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406642:	e657      	b.n	4062f4 <_dtoa_r+0x7b4>
  406644:	2100      	movs	r1, #0
  406646:	2301      	movs	r3, #1
  406648:	6461      	str	r1, [r4, #68]	; 0x44
  40664a:	4620      	mov	r0, r4
  40664c:	9325      	str	r3, [sp, #148]	; 0x94
  40664e:	f000 fc6d 	bl	406f2c <_Balloc>
  406652:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406654:	9004      	str	r0, [sp, #16]
  406656:	6420      	str	r0, [r4, #64]	; 0x40
  406658:	930a      	str	r3, [sp, #40]	; 0x28
  40665a:	930f      	str	r3, [sp, #60]	; 0x3c
  40665c:	e629      	b.n	4062b2 <_dtoa_r+0x772>
  40665e:	2a00      	cmp	r2, #0
  406660:	46d0      	mov	r8, sl
  406662:	f8cd b018 	str.w	fp, [sp, #24]
  406666:	469a      	mov	sl, r3
  406668:	dd11      	ble.n	40668e <_dtoa_r+0xb4e>
  40666a:	4649      	mov	r1, r9
  40666c:	2201      	movs	r2, #1
  40666e:	4620      	mov	r0, r4
  406670:	f000 fe08 	bl	407284 <__lshift>
  406674:	4641      	mov	r1, r8
  406676:	4681      	mov	r9, r0
  406678:	f000 fe56 	bl	407328 <__mcmp>
  40667c:	2800      	cmp	r0, #0
  40667e:	f340 8146 	ble.w	40690e <_dtoa_r+0xdce>
  406682:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406686:	f000 8106 	beq.w	406896 <_dtoa_r+0xd56>
  40668a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40668e:	46b3      	mov	fp, r6
  406690:	f887 a000 	strb.w	sl, [r7]
  406694:	1c7d      	adds	r5, r7, #1
  406696:	9e06      	ldr	r6, [sp, #24]
  406698:	e5d2      	b.n	406240 <_dtoa_r+0x700>
  40669a:	d104      	bne.n	4066a6 <_dtoa_r+0xb66>
  40669c:	f01a 0f01 	tst.w	sl, #1
  4066a0:	d001      	beq.n	4066a6 <_dtoa_r+0xb66>
  4066a2:	e5bd      	b.n	406220 <_dtoa_r+0x6e0>
  4066a4:	4615      	mov	r5, r2
  4066a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4066aa:	2b30      	cmp	r3, #48	; 0x30
  4066ac:	f105 32ff 	add.w	r2, r5, #4294967295
  4066b0:	d0f8      	beq.n	4066a4 <_dtoa_r+0xb64>
  4066b2:	e5c5      	b.n	406240 <_dtoa_r+0x700>
  4066b4:	9904      	ldr	r1, [sp, #16]
  4066b6:	2230      	movs	r2, #48	; 0x30
  4066b8:	700a      	strb	r2, [r1, #0]
  4066ba:	9a02      	ldr	r2, [sp, #8]
  4066bc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4066c0:	3201      	adds	r2, #1
  4066c2:	9202      	str	r2, [sp, #8]
  4066c4:	f7ff bbfc 	b.w	405ec0 <_dtoa_r+0x380>
  4066c8:	f000 80bb 	beq.w	406842 <_dtoa_r+0xd02>
  4066cc:	9b02      	ldr	r3, [sp, #8]
  4066ce:	425d      	negs	r5, r3
  4066d0:	4b84      	ldr	r3, [pc, #528]	; (4068e4 <_dtoa_r+0xda4>)
  4066d2:	f005 020f 	and.w	r2, r5, #15
  4066d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4066da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4066e2:	f7fc ffad 	bl	403640 <__aeabi_dmul>
  4066e6:	112d      	asrs	r5, r5, #4
  4066e8:	4607      	mov	r7, r0
  4066ea:	4688      	mov	r8, r1
  4066ec:	f000 812c 	beq.w	406948 <_dtoa_r+0xe08>
  4066f0:	4e7d      	ldr	r6, [pc, #500]	; (4068e8 <_dtoa_r+0xda8>)
  4066f2:	f04f 0a02 	mov.w	sl, #2
  4066f6:	07eb      	lsls	r3, r5, #31
  4066f8:	d509      	bpl.n	40670e <_dtoa_r+0xbce>
  4066fa:	4638      	mov	r0, r7
  4066fc:	4641      	mov	r1, r8
  4066fe:	e9d6 2300 	ldrd	r2, r3, [r6]
  406702:	f7fc ff9d 	bl	403640 <__aeabi_dmul>
  406706:	f10a 0a01 	add.w	sl, sl, #1
  40670a:	4607      	mov	r7, r0
  40670c:	4688      	mov	r8, r1
  40670e:	106d      	asrs	r5, r5, #1
  406710:	f106 0608 	add.w	r6, r6, #8
  406714:	d1ef      	bne.n	4066f6 <_dtoa_r+0xbb6>
  406716:	e608      	b.n	40632a <_dtoa_r+0x7ea>
  406718:	6871      	ldr	r1, [r6, #4]
  40671a:	4620      	mov	r0, r4
  40671c:	f000 fc06 	bl	406f2c <_Balloc>
  406720:	6933      	ldr	r3, [r6, #16]
  406722:	3302      	adds	r3, #2
  406724:	009a      	lsls	r2, r3, #2
  406726:	4605      	mov	r5, r0
  406728:	f106 010c 	add.w	r1, r6, #12
  40672c:	300c      	adds	r0, #12
  40672e:	f000 faff 	bl	406d30 <memcpy>
  406732:	4629      	mov	r1, r5
  406734:	2201      	movs	r2, #1
  406736:	4620      	mov	r0, r4
  406738:	f000 fda4 	bl	407284 <__lshift>
  40673c:	9006      	str	r0, [sp, #24]
  40673e:	e4b5      	b.n	4060ac <_dtoa_r+0x56c>
  406740:	2b39      	cmp	r3, #57	; 0x39
  406742:	f8cd b018 	str.w	fp, [sp, #24]
  406746:	46d0      	mov	r8, sl
  406748:	f000 80a5 	beq.w	406896 <_dtoa_r+0xd56>
  40674c:	f103 0a01 	add.w	sl, r3, #1
  406750:	46b3      	mov	fp, r6
  406752:	f887 a000 	strb.w	sl, [r7]
  406756:	1c7d      	adds	r5, r7, #1
  406758:	9e06      	ldr	r6, [sp, #24]
  40675a:	e571      	b.n	406240 <_dtoa_r+0x700>
  40675c:	465a      	mov	r2, fp
  40675e:	46d0      	mov	r8, sl
  406760:	46b3      	mov	fp, r6
  406762:	469a      	mov	sl, r3
  406764:	4616      	mov	r6, r2
  406766:	e54f      	b.n	406208 <_dtoa_r+0x6c8>
  406768:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40676a:	495e      	ldr	r1, [pc, #376]	; (4068e4 <_dtoa_r+0xda4>)
  40676c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406770:	462a      	mov	r2, r5
  406772:	4633      	mov	r3, r6
  406774:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406778:	f7fc ff62 	bl	403640 <__aeabi_dmul>
  40677c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406780:	4638      	mov	r0, r7
  406782:	4641      	mov	r1, r8
  406784:	f001 fa2e 	bl	407be4 <__aeabi_d2iz>
  406788:	4605      	mov	r5, r0
  40678a:	f7fc fef3 	bl	403574 <__aeabi_i2d>
  40678e:	460b      	mov	r3, r1
  406790:	4602      	mov	r2, r0
  406792:	4641      	mov	r1, r8
  406794:	4638      	mov	r0, r7
  406796:	f7fc fd9f 	bl	4032d8 <__aeabi_dsub>
  40679a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40679c:	460f      	mov	r7, r1
  40679e:	9904      	ldr	r1, [sp, #16]
  4067a0:	3530      	adds	r5, #48	; 0x30
  4067a2:	2b01      	cmp	r3, #1
  4067a4:	700d      	strb	r5, [r1, #0]
  4067a6:	4606      	mov	r6, r0
  4067a8:	f101 0501 	add.w	r5, r1, #1
  4067ac:	d026      	beq.n	4067fc <_dtoa_r+0xcbc>
  4067ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4067b0:	9a04      	ldr	r2, [sp, #16]
  4067b2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4068f0 <_dtoa_r+0xdb0>
  4067b6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4067ba:	4413      	add	r3, r2
  4067bc:	f04f 0a00 	mov.w	sl, #0
  4067c0:	4699      	mov	r9, r3
  4067c2:	4652      	mov	r2, sl
  4067c4:	465b      	mov	r3, fp
  4067c6:	4630      	mov	r0, r6
  4067c8:	4639      	mov	r1, r7
  4067ca:	f7fc ff39 	bl	403640 <__aeabi_dmul>
  4067ce:	460f      	mov	r7, r1
  4067d0:	4606      	mov	r6, r0
  4067d2:	f001 fa07 	bl	407be4 <__aeabi_d2iz>
  4067d6:	4680      	mov	r8, r0
  4067d8:	f7fc fecc 	bl	403574 <__aeabi_i2d>
  4067dc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4067e0:	4602      	mov	r2, r0
  4067e2:	460b      	mov	r3, r1
  4067e4:	4630      	mov	r0, r6
  4067e6:	4639      	mov	r1, r7
  4067e8:	f7fc fd76 	bl	4032d8 <__aeabi_dsub>
  4067ec:	f805 8b01 	strb.w	r8, [r5], #1
  4067f0:	454d      	cmp	r5, r9
  4067f2:	4606      	mov	r6, r0
  4067f4:	460f      	mov	r7, r1
  4067f6:	d1e4      	bne.n	4067c2 <_dtoa_r+0xc82>
  4067f8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4067fc:	4b3b      	ldr	r3, [pc, #236]	; (4068ec <_dtoa_r+0xdac>)
  4067fe:	2200      	movs	r2, #0
  406800:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406804:	f7fc fd6a 	bl	4032dc <__adddf3>
  406808:	4632      	mov	r2, r6
  40680a:	463b      	mov	r3, r7
  40680c:	f001 f9ac 	bl	407b68 <__aeabi_dcmplt>
  406810:	2800      	cmp	r0, #0
  406812:	d046      	beq.n	4068a2 <_dtoa_r+0xd62>
  406814:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406816:	9302      	str	r3, [sp, #8]
  406818:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40681c:	f7ff bb43 	b.w	405ea6 <_dtoa_r+0x366>
  406820:	f04f 0800 	mov.w	r8, #0
  406824:	4646      	mov	r6, r8
  406826:	e6a9      	b.n	40657c <_dtoa_r+0xa3c>
  406828:	9b08      	ldr	r3, [sp, #32]
  40682a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40682c:	1a9d      	subs	r5, r3, r2
  40682e:	2300      	movs	r3, #0
  406830:	f7ff bb71 	b.w	405f16 <_dtoa_r+0x3d6>
  406834:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406836:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406838:	9d08      	ldr	r5, [sp, #32]
  40683a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40683e:	f7ff bb6a 	b.w	405f16 <_dtoa_r+0x3d6>
  406842:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406846:	f04f 0a02 	mov.w	sl, #2
  40684a:	e56e      	b.n	40632a <_dtoa_r+0x7ea>
  40684c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40684e:	2b00      	cmp	r3, #0
  406850:	f43f aeb8 	beq.w	4065c4 <_dtoa_r+0xa84>
  406854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406856:	2b00      	cmp	r3, #0
  406858:	f77f aede 	ble.w	406618 <_dtoa_r+0xad8>
  40685c:	2200      	movs	r2, #0
  40685e:	4b24      	ldr	r3, [pc, #144]	; (4068f0 <_dtoa_r+0xdb0>)
  406860:	4638      	mov	r0, r7
  406862:	4641      	mov	r1, r8
  406864:	f7fc feec 	bl	403640 <__aeabi_dmul>
  406868:	4607      	mov	r7, r0
  40686a:	4688      	mov	r8, r1
  40686c:	f10a 0001 	add.w	r0, sl, #1
  406870:	f7fc fe80 	bl	403574 <__aeabi_i2d>
  406874:	463a      	mov	r2, r7
  406876:	4643      	mov	r3, r8
  406878:	f7fc fee2 	bl	403640 <__aeabi_dmul>
  40687c:	2200      	movs	r2, #0
  40687e:	4b17      	ldr	r3, [pc, #92]	; (4068dc <_dtoa_r+0xd9c>)
  406880:	f7fc fd2c 	bl	4032dc <__adddf3>
  406884:	9a02      	ldr	r2, [sp, #8]
  406886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406888:	9312      	str	r3, [sp, #72]	; 0x48
  40688a:	3a01      	subs	r2, #1
  40688c:	4605      	mov	r5, r0
  40688e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406892:	9215      	str	r2, [sp, #84]	; 0x54
  406894:	e56a      	b.n	40636c <_dtoa_r+0x82c>
  406896:	2239      	movs	r2, #57	; 0x39
  406898:	46b3      	mov	fp, r6
  40689a:	703a      	strb	r2, [r7, #0]
  40689c:	9e06      	ldr	r6, [sp, #24]
  40689e:	1c7d      	adds	r5, r7, #1
  4068a0:	e4c0      	b.n	406224 <_dtoa_r+0x6e4>
  4068a2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4068a6:	2000      	movs	r0, #0
  4068a8:	4910      	ldr	r1, [pc, #64]	; (4068ec <_dtoa_r+0xdac>)
  4068aa:	f7fc fd15 	bl	4032d8 <__aeabi_dsub>
  4068ae:	4632      	mov	r2, r6
  4068b0:	463b      	mov	r3, r7
  4068b2:	f001 f977 	bl	407ba4 <__aeabi_dcmpgt>
  4068b6:	b908      	cbnz	r0, 4068bc <_dtoa_r+0xd7c>
  4068b8:	e6ae      	b.n	406618 <_dtoa_r+0xad8>
  4068ba:	4615      	mov	r5, r2
  4068bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4068c0:	2b30      	cmp	r3, #48	; 0x30
  4068c2:	f105 32ff 	add.w	r2, r5, #4294967295
  4068c6:	d0f8      	beq.n	4068ba <_dtoa_r+0xd7a>
  4068c8:	e5d7      	b.n	40647a <_dtoa_r+0x93a>
  4068ca:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4068ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4068d0:	9302      	str	r3, [sp, #8]
  4068d2:	f7ff bae8 	b.w	405ea6 <_dtoa_r+0x366>
  4068d6:	970c      	str	r7, [sp, #48]	; 0x30
  4068d8:	f7ff bba5 	b.w	406026 <_dtoa_r+0x4e6>
  4068dc:	401c0000 	.word	0x401c0000
  4068e0:	40140000 	.word	0x40140000
  4068e4:	00407da8 	.word	0x00407da8
  4068e8:	00407d80 	.word	0x00407d80
  4068ec:	3fe00000 	.word	0x3fe00000
  4068f0:	40240000 	.word	0x40240000
  4068f4:	2b39      	cmp	r3, #57	; 0x39
  4068f6:	f8cd b018 	str.w	fp, [sp, #24]
  4068fa:	46d0      	mov	r8, sl
  4068fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406900:	469a      	mov	sl, r3
  406902:	d0c8      	beq.n	406896 <_dtoa_r+0xd56>
  406904:	f1bb 0f00 	cmp.w	fp, #0
  406908:	f73f aebf 	bgt.w	40668a <_dtoa_r+0xb4a>
  40690c:	e6bf      	b.n	40668e <_dtoa_r+0xb4e>
  40690e:	f47f aebe 	bne.w	40668e <_dtoa_r+0xb4e>
  406912:	f01a 0f01 	tst.w	sl, #1
  406916:	f43f aeba 	beq.w	40668e <_dtoa_r+0xb4e>
  40691a:	e6b2      	b.n	406682 <_dtoa_r+0xb42>
  40691c:	f04f 0800 	mov.w	r8, #0
  406920:	4646      	mov	r6, r8
  406922:	e5e9      	b.n	4064f8 <_dtoa_r+0x9b8>
  406924:	4631      	mov	r1, r6
  406926:	2300      	movs	r3, #0
  406928:	220a      	movs	r2, #10
  40692a:	4620      	mov	r0, r4
  40692c:	f000 fb2e 	bl	406f8c <__multadd>
  406930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406932:	2b00      	cmp	r3, #0
  406934:	4606      	mov	r6, r0
  406936:	dd0a      	ble.n	40694e <_dtoa_r+0xe0e>
  406938:	930a      	str	r3, [sp, #40]	; 0x28
  40693a:	f7ff bbaa 	b.w	406092 <_dtoa_r+0x552>
  40693e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406940:	2b02      	cmp	r3, #2
  406942:	dc23      	bgt.n	40698c <_dtoa_r+0xe4c>
  406944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406946:	e43b      	b.n	4061c0 <_dtoa_r+0x680>
  406948:	f04f 0a02 	mov.w	sl, #2
  40694c:	e4ed      	b.n	40632a <_dtoa_r+0x7ea>
  40694e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406950:	2b02      	cmp	r3, #2
  406952:	dc1b      	bgt.n	40698c <_dtoa_r+0xe4c>
  406954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406956:	e7ef      	b.n	406938 <_dtoa_r+0xdf8>
  406958:	2500      	movs	r5, #0
  40695a:	6465      	str	r5, [r4, #68]	; 0x44
  40695c:	4629      	mov	r1, r5
  40695e:	4620      	mov	r0, r4
  406960:	f000 fae4 	bl	406f2c <_Balloc>
  406964:	f04f 33ff 	mov.w	r3, #4294967295
  406968:	930a      	str	r3, [sp, #40]	; 0x28
  40696a:	930f      	str	r3, [sp, #60]	; 0x3c
  40696c:	2301      	movs	r3, #1
  40696e:	9004      	str	r0, [sp, #16]
  406970:	9525      	str	r5, [sp, #148]	; 0x94
  406972:	6420      	str	r0, [r4, #64]	; 0x40
  406974:	930b      	str	r3, [sp, #44]	; 0x2c
  406976:	f7ff b9dd 	b.w	405d34 <_dtoa_r+0x1f4>
  40697a:	2501      	movs	r5, #1
  40697c:	f7ff b9a5 	b.w	405cca <_dtoa_r+0x18a>
  406980:	f43f ab69 	beq.w	406056 <_dtoa_r+0x516>
  406984:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406988:	f7ff bbf9 	b.w	40617e <_dtoa_r+0x63e>
  40698c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40698e:	930a      	str	r3, [sp, #40]	; 0x28
  406990:	e5e5      	b.n	40655e <_dtoa_r+0xa1e>
  406992:	bf00      	nop

00406994 <__libc_fini_array>:
  406994:	b538      	push	{r3, r4, r5, lr}
  406996:	4c0a      	ldr	r4, [pc, #40]	; (4069c0 <__libc_fini_array+0x2c>)
  406998:	4d0a      	ldr	r5, [pc, #40]	; (4069c4 <__libc_fini_array+0x30>)
  40699a:	1b64      	subs	r4, r4, r5
  40699c:	10a4      	asrs	r4, r4, #2
  40699e:	d00a      	beq.n	4069b6 <__libc_fini_array+0x22>
  4069a0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4069a4:	3b01      	subs	r3, #1
  4069a6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4069aa:	3c01      	subs	r4, #1
  4069ac:	f855 3904 	ldr.w	r3, [r5], #-4
  4069b0:	4798      	blx	r3
  4069b2:	2c00      	cmp	r4, #0
  4069b4:	d1f9      	bne.n	4069aa <__libc_fini_array+0x16>
  4069b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4069ba:	f001 baeb 	b.w	407f94 <_fini>
  4069be:	bf00      	nop
  4069c0:	00407fa4 	.word	0x00407fa4
  4069c4:	00407fa0 	.word	0x00407fa0

004069c8 <_malloc_trim_r>:
  4069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4069ca:	4f24      	ldr	r7, [pc, #144]	; (406a5c <_malloc_trim_r+0x94>)
  4069cc:	460c      	mov	r4, r1
  4069ce:	4606      	mov	r6, r0
  4069d0:	f7fd fd26 	bl	404420 <__malloc_lock>
  4069d4:	68bb      	ldr	r3, [r7, #8]
  4069d6:	685d      	ldr	r5, [r3, #4]
  4069d8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4069dc:	310f      	adds	r1, #15
  4069de:	f025 0503 	bic.w	r5, r5, #3
  4069e2:	4429      	add	r1, r5
  4069e4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4069e8:	f021 010f 	bic.w	r1, r1, #15
  4069ec:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4069f0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4069f4:	db07      	blt.n	406a06 <_malloc_trim_r+0x3e>
  4069f6:	2100      	movs	r1, #0
  4069f8:	4630      	mov	r0, r6
  4069fa:	f7fd fd1d 	bl	404438 <_sbrk_r>
  4069fe:	68bb      	ldr	r3, [r7, #8]
  406a00:	442b      	add	r3, r5
  406a02:	4298      	cmp	r0, r3
  406a04:	d004      	beq.n	406a10 <_malloc_trim_r+0x48>
  406a06:	4630      	mov	r0, r6
  406a08:	f7fd fd10 	bl	40442c <__malloc_unlock>
  406a0c:	2000      	movs	r0, #0
  406a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a10:	4261      	negs	r1, r4
  406a12:	4630      	mov	r0, r6
  406a14:	f7fd fd10 	bl	404438 <_sbrk_r>
  406a18:	3001      	adds	r0, #1
  406a1a:	d00d      	beq.n	406a38 <_malloc_trim_r+0x70>
  406a1c:	4b10      	ldr	r3, [pc, #64]	; (406a60 <_malloc_trim_r+0x98>)
  406a1e:	68ba      	ldr	r2, [r7, #8]
  406a20:	6819      	ldr	r1, [r3, #0]
  406a22:	1b2d      	subs	r5, r5, r4
  406a24:	f045 0501 	orr.w	r5, r5, #1
  406a28:	4630      	mov	r0, r6
  406a2a:	1b09      	subs	r1, r1, r4
  406a2c:	6055      	str	r5, [r2, #4]
  406a2e:	6019      	str	r1, [r3, #0]
  406a30:	f7fd fcfc 	bl	40442c <__malloc_unlock>
  406a34:	2001      	movs	r0, #1
  406a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a38:	2100      	movs	r1, #0
  406a3a:	4630      	mov	r0, r6
  406a3c:	f7fd fcfc 	bl	404438 <_sbrk_r>
  406a40:	68ba      	ldr	r2, [r7, #8]
  406a42:	1a83      	subs	r3, r0, r2
  406a44:	2b0f      	cmp	r3, #15
  406a46:	ddde      	ble.n	406a06 <_malloc_trim_r+0x3e>
  406a48:	4c06      	ldr	r4, [pc, #24]	; (406a64 <_malloc_trim_r+0x9c>)
  406a4a:	4905      	ldr	r1, [pc, #20]	; (406a60 <_malloc_trim_r+0x98>)
  406a4c:	6824      	ldr	r4, [r4, #0]
  406a4e:	f043 0301 	orr.w	r3, r3, #1
  406a52:	1b00      	subs	r0, r0, r4
  406a54:	6053      	str	r3, [r2, #4]
  406a56:	6008      	str	r0, [r1, #0]
  406a58:	e7d5      	b.n	406a06 <_malloc_trim_r+0x3e>
  406a5a:	bf00      	nop
  406a5c:	20000888 	.word	0x20000888
  406a60:	20001128 	.word	0x20001128
  406a64:	20000c90 	.word	0x20000c90

00406a68 <_free_r>:
  406a68:	2900      	cmp	r1, #0
  406a6a:	d044      	beq.n	406af6 <_free_r+0x8e>
  406a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a70:	460d      	mov	r5, r1
  406a72:	4680      	mov	r8, r0
  406a74:	f7fd fcd4 	bl	404420 <__malloc_lock>
  406a78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406a7c:	4969      	ldr	r1, [pc, #420]	; (406c24 <_free_r+0x1bc>)
  406a7e:	f027 0301 	bic.w	r3, r7, #1
  406a82:	f1a5 0408 	sub.w	r4, r5, #8
  406a86:	18e2      	adds	r2, r4, r3
  406a88:	688e      	ldr	r6, [r1, #8]
  406a8a:	6850      	ldr	r0, [r2, #4]
  406a8c:	42b2      	cmp	r2, r6
  406a8e:	f020 0003 	bic.w	r0, r0, #3
  406a92:	d05e      	beq.n	406b52 <_free_r+0xea>
  406a94:	07fe      	lsls	r6, r7, #31
  406a96:	6050      	str	r0, [r2, #4]
  406a98:	d40b      	bmi.n	406ab2 <_free_r+0x4a>
  406a9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406a9e:	1be4      	subs	r4, r4, r7
  406aa0:	f101 0e08 	add.w	lr, r1, #8
  406aa4:	68a5      	ldr	r5, [r4, #8]
  406aa6:	4575      	cmp	r5, lr
  406aa8:	443b      	add	r3, r7
  406aaa:	d06d      	beq.n	406b88 <_free_r+0x120>
  406aac:	68e7      	ldr	r7, [r4, #12]
  406aae:	60ef      	str	r7, [r5, #12]
  406ab0:	60bd      	str	r5, [r7, #8]
  406ab2:	1815      	adds	r5, r2, r0
  406ab4:	686d      	ldr	r5, [r5, #4]
  406ab6:	07ed      	lsls	r5, r5, #31
  406ab8:	d53e      	bpl.n	406b38 <_free_r+0xd0>
  406aba:	f043 0201 	orr.w	r2, r3, #1
  406abe:	6062      	str	r2, [r4, #4]
  406ac0:	50e3      	str	r3, [r4, r3]
  406ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406ac6:	d217      	bcs.n	406af8 <_free_r+0x90>
  406ac8:	08db      	lsrs	r3, r3, #3
  406aca:	1c58      	adds	r0, r3, #1
  406acc:	109a      	asrs	r2, r3, #2
  406ace:	684d      	ldr	r5, [r1, #4]
  406ad0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406ad4:	60a7      	str	r7, [r4, #8]
  406ad6:	2301      	movs	r3, #1
  406ad8:	4093      	lsls	r3, r2
  406ada:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406ade:	432b      	orrs	r3, r5
  406ae0:	3a08      	subs	r2, #8
  406ae2:	60e2      	str	r2, [r4, #12]
  406ae4:	604b      	str	r3, [r1, #4]
  406ae6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406aea:	60fc      	str	r4, [r7, #12]
  406aec:	4640      	mov	r0, r8
  406aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406af2:	f7fd bc9b 	b.w	40442c <__malloc_unlock>
  406af6:	4770      	bx	lr
  406af8:	0a5a      	lsrs	r2, r3, #9
  406afa:	2a04      	cmp	r2, #4
  406afc:	d852      	bhi.n	406ba4 <_free_r+0x13c>
  406afe:	099a      	lsrs	r2, r3, #6
  406b00:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406b04:	00ff      	lsls	r7, r7, #3
  406b06:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406b0a:	19c8      	adds	r0, r1, r7
  406b0c:	59ca      	ldr	r2, [r1, r7]
  406b0e:	3808      	subs	r0, #8
  406b10:	4290      	cmp	r0, r2
  406b12:	d04f      	beq.n	406bb4 <_free_r+0x14c>
  406b14:	6851      	ldr	r1, [r2, #4]
  406b16:	f021 0103 	bic.w	r1, r1, #3
  406b1a:	428b      	cmp	r3, r1
  406b1c:	d232      	bcs.n	406b84 <_free_r+0x11c>
  406b1e:	6892      	ldr	r2, [r2, #8]
  406b20:	4290      	cmp	r0, r2
  406b22:	d1f7      	bne.n	406b14 <_free_r+0xac>
  406b24:	68c3      	ldr	r3, [r0, #12]
  406b26:	60a0      	str	r0, [r4, #8]
  406b28:	60e3      	str	r3, [r4, #12]
  406b2a:	609c      	str	r4, [r3, #8]
  406b2c:	60c4      	str	r4, [r0, #12]
  406b2e:	4640      	mov	r0, r8
  406b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b34:	f7fd bc7a 	b.w	40442c <__malloc_unlock>
  406b38:	6895      	ldr	r5, [r2, #8]
  406b3a:	4f3b      	ldr	r7, [pc, #236]	; (406c28 <_free_r+0x1c0>)
  406b3c:	42bd      	cmp	r5, r7
  406b3e:	4403      	add	r3, r0
  406b40:	d040      	beq.n	406bc4 <_free_r+0x15c>
  406b42:	68d0      	ldr	r0, [r2, #12]
  406b44:	60e8      	str	r0, [r5, #12]
  406b46:	f043 0201 	orr.w	r2, r3, #1
  406b4a:	6085      	str	r5, [r0, #8]
  406b4c:	6062      	str	r2, [r4, #4]
  406b4e:	50e3      	str	r3, [r4, r3]
  406b50:	e7b7      	b.n	406ac2 <_free_r+0x5a>
  406b52:	07ff      	lsls	r7, r7, #31
  406b54:	4403      	add	r3, r0
  406b56:	d407      	bmi.n	406b68 <_free_r+0x100>
  406b58:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406b5c:	1aa4      	subs	r4, r4, r2
  406b5e:	4413      	add	r3, r2
  406b60:	68a0      	ldr	r0, [r4, #8]
  406b62:	68e2      	ldr	r2, [r4, #12]
  406b64:	60c2      	str	r2, [r0, #12]
  406b66:	6090      	str	r0, [r2, #8]
  406b68:	4a30      	ldr	r2, [pc, #192]	; (406c2c <_free_r+0x1c4>)
  406b6a:	6812      	ldr	r2, [r2, #0]
  406b6c:	f043 0001 	orr.w	r0, r3, #1
  406b70:	4293      	cmp	r3, r2
  406b72:	6060      	str	r0, [r4, #4]
  406b74:	608c      	str	r4, [r1, #8]
  406b76:	d3b9      	bcc.n	406aec <_free_r+0x84>
  406b78:	4b2d      	ldr	r3, [pc, #180]	; (406c30 <_free_r+0x1c8>)
  406b7a:	4640      	mov	r0, r8
  406b7c:	6819      	ldr	r1, [r3, #0]
  406b7e:	f7ff ff23 	bl	4069c8 <_malloc_trim_r>
  406b82:	e7b3      	b.n	406aec <_free_r+0x84>
  406b84:	4610      	mov	r0, r2
  406b86:	e7cd      	b.n	406b24 <_free_r+0xbc>
  406b88:	1811      	adds	r1, r2, r0
  406b8a:	6849      	ldr	r1, [r1, #4]
  406b8c:	07c9      	lsls	r1, r1, #31
  406b8e:	d444      	bmi.n	406c1a <_free_r+0x1b2>
  406b90:	6891      	ldr	r1, [r2, #8]
  406b92:	68d2      	ldr	r2, [r2, #12]
  406b94:	60ca      	str	r2, [r1, #12]
  406b96:	4403      	add	r3, r0
  406b98:	f043 0001 	orr.w	r0, r3, #1
  406b9c:	6091      	str	r1, [r2, #8]
  406b9e:	6060      	str	r0, [r4, #4]
  406ba0:	50e3      	str	r3, [r4, r3]
  406ba2:	e7a3      	b.n	406aec <_free_r+0x84>
  406ba4:	2a14      	cmp	r2, #20
  406ba6:	d816      	bhi.n	406bd6 <_free_r+0x16e>
  406ba8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406bac:	00ff      	lsls	r7, r7, #3
  406bae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406bb2:	e7aa      	b.n	406b0a <_free_r+0xa2>
  406bb4:	10aa      	asrs	r2, r5, #2
  406bb6:	2301      	movs	r3, #1
  406bb8:	684d      	ldr	r5, [r1, #4]
  406bba:	4093      	lsls	r3, r2
  406bbc:	432b      	orrs	r3, r5
  406bbe:	604b      	str	r3, [r1, #4]
  406bc0:	4603      	mov	r3, r0
  406bc2:	e7b0      	b.n	406b26 <_free_r+0xbe>
  406bc4:	f043 0201 	orr.w	r2, r3, #1
  406bc8:	614c      	str	r4, [r1, #20]
  406bca:	610c      	str	r4, [r1, #16]
  406bcc:	60e5      	str	r5, [r4, #12]
  406bce:	60a5      	str	r5, [r4, #8]
  406bd0:	6062      	str	r2, [r4, #4]
  406bd2:	50e3      	str	r3, [r4, r3]
  406bd4:	e78a      	b.n	406aec <_free_r+0x84>
  406bd6:	2a54      	cmp	r2, #84	; 0x54
  406bd8:	d806      	bhi.n	406be8 <_free_r+0x180>
  406bda:	0b1a      	lsrs	r2, r3, #12
  406bdc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406be0:	00ff      	lsls	r7, r7, #3
  406be2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406be6:	e790      	b.n	406b0a <_free_r+0xa2>
  406be8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406bec:	d806      	bhi.n	406bfc <_free_r+0x194>
  406bee:	0bda      	lsrs	r2, r3, #15
  406bf0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406bf4:	00ff      	lsls	r7, r7, #3
  406bf6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406bfa:	e786      	b.n	406b0a <_free_r+0xa2>
  406bfc:	f240 5054 	movw	r0, #1364	; 0x554
  406c00:	4282      	cmp	r2, r0
  406c02:	d806      	bhi.n	406c12 <_free_r+0x1aa>
  406c04:	0c9a      	lsrs	r2, r3, #18
  406c06:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406c0a:	00ff      	lsls	r7, r7, #3
  406c0c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406c10:	e77b      	b.n	406b0a <_free_r+0xa2>
  406c12:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406c16:	257e      	movs	r5, #126	; 0x7e
  406c18:	e777      	b.n	406b0a <_free_r+0xa2>
  406c1a:	f043 0101 	orr.w	r1, r3, #1
  406c1e:	6061      	str	r1, [r4, #4]
  406c20:	6013      	str	r3, [r2, #0]
  406c22:	e763      	b.n	406aec <_free_r+0x84>
  406c24:	20000888 	.word	0x20000888
  406c28:	20000890 	.word	0x20000890
  406c2c:	20000c94 	.word	0x20000c94
  406c30:	20001158 	.word	0x20001158

00406c34 <_localeconv_r>:
  406c34:	4a04      	ldr	r2, [pc, #16]	; (406c48 <_localeconv_r+0x14>)
  406c36:	4b05      	ldr	r3, [pc, #20]	; (406c4c <_localeconv_r+0x18>)
  406c38:	6812      	ldr	r2, [r2, #0]
  406c3a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406c3c:	2800      	cmp	r0, #0
  406c3e:	bf08      	it	eq
  406c40:	4618      	moveq	r0, r3
  406c42:	30f0      	adds	r0, #240	; 0xf0
  406c44:	4770      	bx	lr
  406c46:	bf00      	nop
  406c48:	20000458 	.word	0x20000458
  406c4c:	20000c9c 	.word	0x20000c9c

00406c50 <__retarget_lock_acquire_recursive>:
  406c50:	4770      	bx	lr
  406c52:	bf00      	nop

00406c54 <__retarget_lock_release_recursive>:
  406c54:	4770      	bx	lr
  406c56:	bf00      	nop

00406c58 <__ascii_mbtowc>:
  406c58:	b082      	sub	sp, #8
  406c5a:	b149      	cbz	r1, 406c70 <__ascii_mbtowc+0x18>
  406c5c:	b15a      	cbz	r2, 406c76 <__ascii_mbtowc+0x1e>
  406c5e:	b16b      	cbz	r3, 406c7c <__ascii_mbtowc+0x24>
  406c60:	7813      	ldrb	r3, [r2, #0]
  406c62:	600b      	str	r3, [r1, #0]
  406c64:	7812      	ldrb	r2, [r2, #0]
  406c66:	1c10      	adds	r0, r2, #0
  406c68:	bf18      	it	ne
  406c6a:	2001      	movne	r0, #1
  406c6c:	b002      	add	sp, #8
  406c6e:	4770      	bx	lr
  406c70:	a901      	add	r1, sp, #4
  406c72:	2a00      	cmp	r2, #0
  406c74:	d1f3      	bne.n	406c5e <__ascii_mbtowc+0x6>
  406c76:	4610      	mov	r0, r2
  406c78:	b002      	add	sp, #8
  406c7a:	4770      	bx	lr
  406c7c:	f06f 0001 	mvn.w	r0, #1
  406c80:	e7f4      	b.n	406c6c <__ascii_mbtowc+0x14>
  406c82:	bf00      	nop
	...

00406c90 <memchr>:
  406c90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406c94:	2a10      	cmp	r2, #16
  406c96:	db2b      	blt.n	406cf0 <memchr+0x60>
  406c98:	f010 0f07 	tst.w	r0, #7
  406c9c:	d008      	beq.n	406cb0 <memchr+0x20>
  406c9e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406ca2:	3a01      	subs	r2, #1
  406ca4:	428b      	cmp	r3, r1
  406ca6:	d02d      	beq.n	406d04 <memchr+0x74>
  406ca8:	f010 0f07 	tst.w	r0, #7
  406cac:	b342      	cbz	r2, 406d00 <memchr+0x70>
  406cae:	d1f6      	bne.n	406c9e <memchr+0xe>
  406cb0:	b4f0      	push	{r4, r5, r6, r7}
  406cb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406cb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406cba:	f022 0407 	bic.w	r4, r2, #7
  406cbe:	f07f 0700 	mvns.w	r7, #0
  406cc2:	2300      	movs	r3, #0
  406cc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406cc8:	3c08      	subs	r4, #8
  406cca:	ea85 0501 	eor.w	r5, r5, r1
  406cce:	ea86 0601 	eor.w	r6, r6, r1
  406cd2:	fa85 f547 	uadd8	r5, r5, r7
  406cd6:	faa3 f587 	sel	r5, r3, r7
  406cda:	fa86 f647 	uadd8	r6, r6, r7
  406cde:	faa5 f687 	sel	r6, r5, r7
  406ce2:	b98e      	cbnz	r6, 406d08 <memchr+0x78>
  406ce4:	d1ee      	bne.n	406cc4 <memchr+0x34>
  406ce6:	bcf0      	pop	{r4, r5, r6, r7}
  406ce8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406cec:	f002 0207 	and.w	r2, r2, #7
  406cf0:	b132      	cbz	r2, 406d00 <memchr+0x70>
  406cf2:	f810 3b01 	ldrb.w	r3, [r0], #1
  406cf6:	3a01      	subs	r2, #1
  406cf8:	ea83 0301 	eor.w	r3, r3, r1
  406cfc:	b113      	cbz	r3, 406d04 <memchr+0x74>
  406cfe:	d1f8      	bne.n	406cf2 <memchr+0x62>
  406d00:	2000      	movs	r0, #0
  406d02:	4770      	bx	lr
  406d04:	3801      	subs	r0, #1
  406d06:	4770      	bx	lr
  406d08:	2d00      	cmp	r5, #0
  406d0a:	bf06      	itte	eq
  406d0c:	4635      	moveq	r5, r6
  406d0e:	3803      	subeq	r0, #3
  406d10:	3807      	subne	r0, #7
  406d12:	f015 0f01 	tst.w	r5, #1
  406d16:	d107      	bne.n	406d28 <memchr+0x98>
  406d18:	3001      	adds	r0, #1
  406d1a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406d1e:	bf02      	ittt	eq
  406d20:	3001      	addeq	r0, #1
  406d22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406d26:	3001      	addeq	r0, #1
  406d28:	bcf0      	pop	{r4, r5, r6, r7}
  406d2a:	3801      	subs	r0, #1
  406d2c:	4770      	bx	lr
  406d2e:	bf00      	nop

00406d30 <memcpy>:
  406d30:	4684      	mov	ip, r0
  406d32:	ea41 0300 	orr.w	r3, r1, r0
  406d36:	f013 0303 	ands.w	r3, r3, #3
  406d3a:	d16d      	bne.n	406e18 <memcpy+0xe8>
  406d3c:	3a40      	subs	r2, #64	; 0x40
  406d3e:	d341      	bcc.n	406dc4 <memcpy+0x94>
  406d40:	f851 3b04 	ldr.w	r3, [r1], #4
  406d44:	f840 3b04 	str.w	r3, [r0], #4
  406d48:	f851 3b04 	ldr.w	r3, [r1], #4
  406d4c:	f840 3b04 	str.w	r3, [r0], #4
  406d50:	f851 3b04 	ldr.w	r3, [r1], #4
  406d54:	f840 3b04 	str.w	r3, [r0], #4
  406d58:	f851 3b04 	ldr.w	r3, [r1], #4
  406d5c:	f840 3b04 	str.w	r3, [r0], #4
  406d60:	f851 3b04 	ldr.w	r3, [r1], #4
  406d64:	f840 3b04 	str.w	r3, [r0], #4
  406d68:	f851 3b04 	ldr.w	r3, [r1], #4
  406d6c:	f840 3b04 	str.w	r3, [r0], #4
  406d70:	f851 3b04 	ldr.w	r3, [r1], #4
  406d74:	f840 3b04 	str.w	r3, [r0], #4
  406d78:	f851 3b04 	ldr.w	r3, [r1], #4
  406d7c:	f840 3b04 	str.w	r3, [r0], #4
  406d80:	f851 3b04 	ldr.w	r3, [r1], #4
  406d84:	f840 3b04 	str.w	r3, [r0], #4
  406d88:	f851 3b04 	ldr.w	r3, [r1], #4
  406d8c:	f840 3b04 	str.w	r3, [r0], #4
  406d90:	f851 3b04 	ldr.w	r3, [r1], #4
  406d94:	f840 3b04 	str.w	r3, [r0], #4
  406d98:	f851 3b04 	ldr.w	r3, [r1], #4
  406d9c:	f840 3b04 	str.w	r3, [r0], #4
  406da0:	f851 3b04 	ldr.w	r3, [r1], #4
  406da4:	f840 3b04 	str.w	r3, [r0], #4
  406da8:	f851 3b04 	ldr.w	r3, [r1], #4
  406dac:	f840 3b04 	str.w	r3, [r0], #4
  406db0:	f851 3b04 	ldr.w	r3, [r1], #4
  406db4:	f840 3b04 	str.w	r3, [r0], #4
  406db8:	f851 3b04 	ldr.w	r3, [r1], #4
  406dbc:	f840 3b04 	str.w	r3, [r0], #4
  406dc0:	3a40      	subs	r2, #64	; 0x40
  406dc2:	d2bd      	bcs.n	406d40 <memcpy+0x10>
  406dc4:	3230      	adds	r2, #48	; 0x30
  406dc6:	d311      	bcc.n	406dec <memcpy+0xbc>
  406dc8:	f851 3b04 	ldr.w	r3, [r1], #4
  406dcc:	f840 3b04 	str.w	r3, [r0], #4
  406dd0:	f851 3b04 	ldr.w	r3, [r1], #4
  406dd4:	f840 3b04 	str.w	r3, [r0], #4
  406dd8:	f851 3b04 	ldr.w	r3, [r1], #4
  406ddc:	f840 3b04 	str.w	r3, [r0], #4
  406de0:	f851 3b04 	ldr.w	r3, [r1], #4
  406de4:	f840 3b04 	str.w	r3, [r0], #4
  406de8:	3a10      	subs	r2, #16
  406dea:	d2ed      	bcs.n	406dc8 <memcpy+0x98>
  406dec:	320c      	adds	r2, #12
  406dee:	d305      	bcc.n	406dfc <memcpy+0xcc>
  406df0:	f851 3b04 	ldr.w	r3, [r1], #4
  406df4:	f840 3b04 	str.w	r3, [r0], #4
  406df8:	3a04      	subs	r2, #4
  406dfa:	d2f9      	bcs.n	406df0 <memcpy+0xc0>
  406dfc:	3204      	adds	r2, #4
  406dfe:	d008      	beq.n	406e12 <memcpy+0xe2>
  406e00:	07d2      	lsls	r2, r2, #31
  406e02:	bf1c      	itt	ne
  406e04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406e08:	f800 3b01 	strbne.w	r3, [r0], #1
  406e0c:	d301      	bcc.n	406e12 <memcpy+0xe2>
  406e0e:	880b      	ldrh	r3, [r1, #0]
  406e10:	8003      	strh	r3, [r0, #0]
  406e12:	4660      	mov	r0, ip
  406e14:	4770      	bx	lr
  406e16:	bf00      	nop
  406e18:	2a08      	cmp	r2, #8
  406e1a:	d313      	bcc.n	406e44 <memcpy+0x114>
  406e1c:	078b      	lsls	r3, r1, #30
  406e1e:	d08d      	beq.n	406d3c <memcpy+0xc>
  406e20:	f010 0303 	ands.w	r3, r0, #3
  406e24:	d08a      	beq.n	406d3c <memcpy+0xc>
  406e26:	f1c3 0304 	rsb	r3, r3, #4
  406e2a:	1ad2      	subs	r2, r2, r3
  406e2c:	07db      	lsls	r3, r3, #31
  406e2e:	bf1c      	itt	ne
  406e30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406e34:	f800 3b01 	strbne.w	r3, [r0], #1
  406e38:	d380      	bcc.n	406d3c <memcpy+0xc>
  406e3a:	f831 3b02 	ldrh.w	r3, [r1], #2
  406e3e:	f820 3b02 	strh.w	r3, [r0], #2
  406e42:	e77b      	b.n	406d3c <memcpy+0xc>
  406e44:	3a04      	subs	r2, #4
  406e46:	d3d9      	bcc.n	406dfc <memcpy+0xcc>
  406e48:	3a01      	subs	r2, #1
  406e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
  406e4e:	f800 3b01 	strb.w	r3, [r0], #1
  406e52:	d2f9      	bcs.n	406e48 <memcpy+0x118>
  406e54:	780b      	ldrb	r3, [r1, #0]
  406e56:	7003      	strb	r3, [r0, #0]
  406e58:	784b      	ldrb	r3, [r1, #1]
  406e5a:	7043      	strb	r3, [r0, #1]
  406e5c:	788b      	ldrb	r3, [r1, #2]
  406e5e:	7083      	strb	r3, [r0, #2]
  406e60:	4660      	mov	r0, ip
  406e62:	4770      	bx	lr

00406e64 <memmove>:
  406e64:	4288      	cmp	r0, r1
  406e66:	b5f0      	push	{r4, r5, r6, r7, lr}
  406e68:	d90d      	bls.n	406e86 <memmove+0x22>
  406e6a:	188b      	adds	r3, r1, r2
  406e6c:	4298      	cmp	r0, r3
  406e6e:	d20a      	bcs.n	406e86 <memmove+0x22>
  406e70:	1884      	adds	r4, r0, r2
  406e72:	2a00      	cmp	r2, #0
  406e74:	d051      	beq.n	406f1a <memmove+0xb6>
  406e76:	4622      	mov	r2, r4
  406e78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406e7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406e80:	4299      	cmp	r1, r3
  406e82:	d1f9      	bne.n	406e78 <memmove+0x14>
  406e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e86:	2a0f      	cmp	r2, #15
  406e88:	d948      	bls.n	406f1c <memmove+0xb8>
  406e8a:	ea41 0300 	orr.w	r3, r1, r0
  406e8e:	079b      	lsls	r3, r3, #30
  406e90:	d146      	bne.n	406f20 <memmove+0xbc>
  406e92:	f100 0410 	add.w	r4, r0, #16
  406e96:	f101 0310 	add.w	r3, r1, #16
  406e9a:	4615      	mov	r5, r2
  406e9c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406ea0:	f844 6c10 	str.w	r6, [r4, #-16]
  406ea4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406ea8:	f844 6c0c 	str.w	r6, [r4, #-12]
  406eac:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406eb0:	f844 6c08 	str.w	r6, [r4, #-8]
  406eb4:	3d10      	subs	r5, #16
  406eb6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406eba:	f844 6c04 	str.w	r6, [r4, #-4]
  406ebe:	2d0f      	cmp	r5, #15
  406ec0:	f103 0310 	add.w	r3, r3, #16
  406ec4:	f104 0410 	add.w	r4, r4, #16
  406ec8:	d8e8      	bhi.n	406e9c <memmove+0x38>
  406eca:	f1a2 0310 	sub.w	r3, r2, #16
  406ece:	f023 030f 	bic.w	r3, r3, #15
  406ed2:	f002 0e0f 	and.w	lr, r2, #15
  406ed6:	3310      	adds	r3, #16
  406ed8:	f1be 0f03 	cmp.w	lr, #3
  406edc:	4419      	add	r1, r3
  406ede:	4403      	add	r3, r0
  406ee0:	d921      	bls.n	406f26 <memmove+0xc2>
  406ee2:	1f1e      	subs	r6, r3, #4
  406ee4:	460d      	mov	r5, r1
  406ee6:	4674      	mov	r4, lr
  406ee8:	3c04      	subs	r4, #4
  406eea:	f855 7b04 	ldr.w	r7, [r5], #4
  406eee:	f846 7f04 	str.w	r7, [r6, #4]!
  406ef2:	2c03      	cmp	r4, #3
  406ef4:	d8f8      	bhi.n	406ee8 <memmove+0x84>
  406ef6:	f1ae 0404 	sub.w	r4, lr, #4
  406efa:	f024 0403 	bic.w	r4, r4, #3
  406efe:	3404      	adds	r4, #4
  406f00:	4421      	add	r1, r4
  406f02:	4423      	add	r3, r4
  406f04:	f002 0203 	and.w	r2, r2, #3
  406f08:	b162      	cbz	r2, 406f24 <memmove+0xc0>
  406f0a:	3b01      	subs	r3, #1
  406f0c:	440a      	add	r2, r1
  406f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406f12:	f803 4f01 	strb.w	r4, [r3, #1]!
  406f16:	428a      	cmp	r2, r1
  406f18:	d1f9      	bne.n	406f0e <memmove+0xaa>
  406f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406f1c:	4603      	mov	r3, r0
  406f1e:	e7f3      	b.n	406f08 <memmove+0xa4>
  406f20:	4603      	mov	r3, r0
  406f22:	e7f2      	b.n	406f0a <memmove+0xa6>
  406f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406f26:	4672      	mov	r2, lr
  406f28:	e7ee      	b.n	406f08 <memmove+0xa4>
  406f2a:	bf00      	nop

00406f2c <_Balloc>:
  406f2c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406f2e:	b570      	push	{r4, r5, r6, lr}
  406f30:	4605      	mov	r5, r0
  406f32:	460c      	mov	r4, r1
  406f34:	b14b      	cbz	r3, 406f4a <_Balloc+0x1e>
  406f36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406f3a:	b180      	cbz	r0, 406f5e <_Balloc+0x32>
  406f3c:	6802      	ldr	r2, [r0, #0]
  406f3e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406f42:	2300      	movs	r3, #0
  406f44:	6103      	str	r3, [r0, #16]
  406f46:	60c3      	str	r3, [r0, #12]
  406f48:	bd70      	pop	{r4, r5, r6, pc}
  406f4a:	2221      	movs	r2, #33	; 0x21
  406f4c:	2104      	movs	r1, #4
  406f4e:	f000 fd7b 	bl	407a48 <_calloc_r>
  406f52:	64e8      	str	r0, [r5, #76]	; 0x4c
  406f54:	4603      	mov	r3, r0
  406f56:	2800      	cmp	r0, #0
  406f58:	d1ed      	bne.n	406f36 <_Balloc+0xa>
  406f5a:	2000      	movs	r0, #0
  406f5c:	bd70      	pop	{r4, r5, r6, pc}
  406f5e:	2101      	movs	r1, #1
  406f60:	fa01 f604 	lsl.w	r6, r1, r4
  406f64:	1d72      	adds	r2, r6, #5
  406f66:	4628      	mov	r0, r5
  406f68:	0092      	lsls	r2, r2, #2
  406f6a:	f000 fd6d 	bl	407a48 <_calloc_r>
  406f6e:	2800      	cmp	r0, #0
  406f70:	d0f3      	beq.n	406f5a <_Balloc+0x2e>
  406f72:	6044      	str	r4, [r0, #4]
  406f74:	6086      	str	r6, [r0, #8]
  406f76:	e7e4      	b.n	406f42 <_Balloc+0x16>

00406f78 <_Bfree>:
  406f78:	b131      	cbz	r1, 406f88 <_Bfree+0x10>
  406f7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406f7c:	684a      	ldr	r2, [r1, #4]
  406f7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406f82:	6008      	str	r0, [r1, #0]
  406f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406f88:	4770      	bx	lr
  406f8a:	bf00      	nop

00406f8c <__multadd>:
  406f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406f8e:	690c      	ldr	r4, [r1, #16]
  406f90:	b083      	sub	sp, #12
  406f92:	460d      	mov	r5, r1
  406f94:	4606      	mov	r6, r0
  406f96:	f101 0e14 	add.w	lr, r1, #20
  406f9a:	2700      	movs	r7, #0
  406f9c:	f8de 0000 	ldr.w	r0, [lr]
  406fa0:	b281      	uxth	r1, r0
  406fa2:	fb02 3301 	mla	r3, r2, r1, r3
  406fa6:	0c01      	lsrs	r1, r0, #16
  406fa8:	0c18      	lsrs	r0, r3, #16
  406faa:	fb02 0101 	mla	r1, r2, r1, r0
  406fae:	b29b      	uxth	r3, r3
  406fb0:	3701      	adds	r7, #1
  406fb2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406fb6:	42bc      	cmp	r4, r7
  406fb8:	f84e 3b04 	str.w	r3, [lr], #4
  406fbc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406fc0:	dcec      	bgt.n	406f9c <__multadd+0x10>
  406fc2:	b13b      	cbz	r3, 406fd4 <__multadd+0x48>
  406fc4:	68aa      	ldr	r2, [r5, #8]
  406fc6:	4294      	cmp	r4, r2
  406fc8:	da07      	bge.n	406fda <__multadd+0x4e>
  406fca:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406fce:	3401      	adds	r4, #1
  406fd0:	6153      	str	r3, [r2, #20]
  406fd2:	612c      	str	r4, [r5, #16]
  406fd4:	4628      	mov	r0, r5
  406fd6:	b003      	add	sp, #12
  406fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406fda:	6869      	ldr	r1, [r5, #4]
  406fdc:	9301      	str	r3, [sp, #4]
  406fde:	3101      	adds	r1, #1
  406fe0:	4630      	mov	r0, r6
  406fe2:	f7ff ffa3 	bl	406f2c <_Balloc>
  406fe6:	692a      	ldr	r2, [r5, #16]
  406fe8:	3202      	adds	r2, #2
  406fea:	f105 010c 	add.w	r1, r5, #12
  406fee:	4607      	mov	r7, r0
  406ff0:	0092      	lsls	r2, r2, #2
  406ff2:	300c      	adds	r0, #12
  406ff4:	f7ff fe9c 	bl	406d30 <memcpy>
  406ff8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406ffa:	6869      	ldr	r1, [r5, #4]
  406ffc:	9b01      	ldr	r3, [sp, #4]
  406ffe:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407002:	6028      	str	r0, [r5, #0]
  407004:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407008:	463d      	mov	r5, r7
  40700a:	e7de      	b.n	406fca <__multadd+0x3e>

0040700c <__hi0bits>:
  40700c:	0c02      	lsrs	r2, r0, #16
  40700e:	0412      	lsls	r2, r2, #16
  407010:	4603      	mov	r3, r0
  407012:	b9b2      	cbnz	r2, 407042 <__hi0bits+0x36>
  407014:	0403      	lsls	r3, r0, #16
  407016:	2010      	movs	r0, #16
  407018:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40701c:	bf04      	itt	eq
  40701e:	021b      	lsleq	r3, r3, #8
  407020:	3008      	addeq	r0, #8
  407022:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407026:	bf04      	itt	eq
  407028:	011b      	lsleq	r3, r3, #4
  40702a:	3004      	addeq	r0, #4
  40702c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407030:	bf04      	itt	eq
  407032:	009b      	lsleq	r3, r3, #2
  407034:	3002      	addeq	r0, #2
  407036:	2b00      	cmp	r3, #0
  407038:	db02      	blt.n	407040 <__hi0bits+0x34>
  40703a:	005b      	lsls	r3, r3, #1
  40703c:	d403      	bmi.n	407046 <__hi0bits+0x3a>
  40703e:	2020      	movs	r0, #32
  407040:	4770      	bx	lr
  407042:	2000      	movs	r0, #0
  407044:	e7e8      	b.n	407018 <__hi0bits+0xc>
  407046:	3001      	adds	r0, #1
  407048:	4770      	bx	lr
  40704a:	bf00      	nop

0040704c <__lo0bits>:
  40704c:	6803      	ldr	r3, [r0, #0]
  40704e:	f013 0207 	ands.w	r2, r3, #7
  407052:	4601      	mov	r1, r0
  407054:	d007      	beq.n	407066 <__lo0bits+0x1a>
  407056:	07da      	lsls	r2, r3, #31
  407058:	d421      	bmi.n	40709e <__lo0bits+0x52>
  40705a:	0798      	lsls	r0, r3, #30
  40705c:	d421      	bmi.n	4070a2 <__lo0bits+0x56>
  40705e:	089b      	lsrs	r3, r3, #2
  407060:	600b      	str	r3, [r1, #0]
  407062:	2002      	movs	r0, #2
  407064:	4770      	bx	lr
  407066:	b298      	uxth	r0, r3
  407068:	b198      	cbz	r0, 407092 <__lo0bits+0x46>
  40706a:	4610      	mov	r0, r2
  40706c:	f013 0fff 	tst.w	r3, #255	; 0xff
  407070:	bf04      	itt	eq
  407072:	0a1b      	lsreq	r3, r3, #8
  407074:	3008      	addeq	r0, #8
  407076:	071a      	lsls	r2, r3, #28
  407078:	bf04      	itt	eq
  40707a:	091b      	lsreq	r3, r3, #4
  40707c:	3004      	addeq	r0, #4
  40707e:	079a      	lsls	r2, r3, #30
  407080:	bf04      	itt	eq
  407082:	089b      	lsreq	r3, r3, #2
  407084:	3002      	addeq	r0, #2
  407086:	07da      	lsls	r2, r3, #31
  407088:	d407      	bmi.n	40709a <__lo0bits+0x4e>
  40708a:	085b      	lsrs	r3, r3, #1
  40708c:	d104      	bne.n	407098 <__lo0bits+0x4c>
  40708e:	2020      	movs	r0, #32
  407090:	4770      	bx	lr
  407092:	0c1b      	lsrs	r3, r3, #16
  407094:	2010      	movs	r0, #16
  407096:	e7e9      	b.n	40706c <__lo0bits+0x20>
  407098:	3001      	adds	r0, #1
  40709a:	600b      	str	r3, [r1, #0]
  40709c:	4770      	bx	lr
  40709e:	2000      	movs	r0, #0
  4070a0:	4770      	bx	lr
  4070a2:	085b      	lsrs	r3, r3, #1
  4070a4:	600b      	str	r3, [r1, #0]
  4070a6:	2001      	movs	r0, #1
  4070a8:	4770      	bx	lr
  4070aa:	bf00      	nop

004070ac <__i2b>:
  4070ac:	b510      	push	{r4, lr}
  4070ae:	460c      	mov	r4, r1
  4070b0:	2101      	movs	r1, #1
  4070b2:	f7ff ff3b 	bl	406f2c <_Balloc>
  4070b6:	2201      	movs	r2, #1
  4070b8:	6144      	str	r4, [r0, #20]
  4070ba:	6102      	str	r2, [r0, #16]
  4070bc:	bd10      	pop	{r4, pc}
  4070be:	bf00      	nop

004070c0 <__multiply>:
  4070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070c4:	690c      	ldr	r4, [r1, #16]
  4070c6:	6915      	ldr	r5, [r2, #16]
  4070c8:	42ac      	cmp	r4, r5
  4070ca:	b083      	sub	sp, #12
  4070cc:	468b      	mov	fp, r1
  4070ce:	4616      	mov	r6, r2
  4070d0:	da04      	bge.n	4070dc <__multiply+0x1c>
  4070d2:	4622      	mov	r2, r4
  4070d4:	46b3      	mov	fp, r6
  4070d6:	462c      	mov	r4, r5
  4070d8:	460e      	mov	r6, r1
  4070da:	4615      	mov	r5, r2
  4070dc:	f8db 3008 	ldr.w	r3, [fp, #8]
  4070e0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4070e4:	eb04 0805 	add.w	r8, r4, r5
  4070e8:	4598      	cmp	r8, r3
  4070ea:	bfc8      	it	gt
  4070ec:	3101      	addgt	r1, #1
  4070ee:	f7ff ff1d 	bl	406f2c <_Balloc>
  4070f2:	f100 0914 	add.w	r9, r0, #20
  4070f6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4070fa:	45d1      	cmp	r9, sl
  4070fc:	9000      	str	r0, [sp, #0]
  4070fe:	d205      	bcs.n	40710c <__multiply+0x4c>
  407100:	464b      	mov	r3, r9
  407102:	2100      	movs	r1, #0
  407104:	f843 1b04 	str.w	r1, [r3], #4
  407108:	459a      	cmp	sl, r3
  40710a:	d8fb      	bhi.n	407104 <__multiply+0x44>
  40710c:	f106 0c14 	add.w	ip, r6, #20
  407110:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407114:	f10b 0b14 	add.w	fp, fp, #20
  407118:	459c      	cmp	ip, r3
  40711a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40711e:	d24c      	bcs.n	4071ba <__multiply+0xfa>
  407120:	f8cd a004 	str.w	sl, [sp, #4]
  407124:	469a      	mov	sl, r3
  407126:	f8dc 5000 	ldr.w	r5, [ip]
  40712a:	b2af      	uxth	r7, r5
  40712c:	b1ef      	cbz	r7, 40716a <__multiply+0xaa>
  40712e:	2100      	movs	r1, #0
  407130:	464d      	mov	r5, r9
  407132:	465e      	mov	r6, fp
  407134:	460c      	mov	r4, r1
  407136:	f856 2b04 	ldr.w	r2, [r6], #4
  40713a:	6828      	ldr	r0, [r5, #0]
  40713c:	b293      	uxth	r3, r2
  40713e:	b281      	uxth	r1, r0
  407140:	fb07 1303 	mla	r3, r7, r3, r1
  407144:	0c12      	lsrs	r2, r2, #16
  407146:	0c01      	lsrs	r1, r0, #16
  407148:	4423      	add	r3, r4
  40714a:	fb07 1102 	mla	r1, r7, r2, r1
  40714e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407152:	b29b      	uxth	r3, r3
  407154:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407158:	45b6      	cmp	lr, r6
  40715a:	f845 3b04 	str.w	r3, [r5], #4
  40715e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407162:	d8e8      	bhi.n	407136 <__multiply+0x76>
  407164:	602c      	str	r4, [r5, #0]
  407166:	f8dc 5000 	ldr.w	r5, [ip]
  40716a:	0c2d      	lsrs	r5, r5, #16
  40716c:	d01d      	beq.n	4071aa <__multiply+0xea>
  40716e:	f8d9 3000 	ldr.w	r3, [r9]
  407172:	4648      	mov	r0, r9
  407174:	461c      	mov	r4, r3
  407176:	4659      	mov	r1, fp
  407178:	2200      	movs	r2, #0
  40717a:	880e      	ldrh	r6, [r1, #0]
  40717c:	0c24      	lsrs	r4, r4, #16
  40717e:	fb05 4406 	mla	r4, r5, r6, r4
  407182:	4422      	add	r2, r4
  407184:	b29b      	uxth	r3, r3
  407186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40718a:	f840 3b04 	str.w	r3, [r0], #4
  40718e:	f851 3b04 	ldr.w	r3, [r1], #4
  407192:	6804      	ldr	r4, [r0, #0]
  407194:	0c1b      	lsrs	r3, r3, #16
  407196:	b2a6      	uxth	r6, r4
  407198:	fb05 6303 	mla	r3, r5, r3, r6
  40719c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4071a0:	458e      	cmp	lr, r1
  4071a2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4071a6:	d8e8      	bhi.n	40717a <__multiply+0xba>
  4071a8:	6003      	str	r3, [r0, #0]
  4071aa:	f10c 0c04 	add.w	ip, ip, #4
  4071ae:	45e2      	cmp	sl, ip
  4071b0:	f109 0904 	add.w	r9, r9, #4
  4071b4:	d8b7      	bhi.n	407126 <__multiply+0x66>
  4071b6:	f8dd a004 	ldr.w	sl, [sp, #4]
  4071ba:	f1b8 0f00 	cmp.w	r8, #0
  4071be:	dd0b      	ble.n	4071d8 <__multiply+0x118>
  4071c0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4071c4:	f1aa 0a04 	sub.w	sl, sl, #4
  4071c8:	b11b      	cbz	r3, 4071d2 <__multiply+0x112>
  4071ca:	e005      	b.n	4071d8 <__multiply+0x118>
  4071cc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4071d0:	b913      	cbnz	r3, 4071d8 <__multiply+0x118>
  4071d2:	f1b8 0801 	subs.w	r8, r8, #1
  4071d6:	d1f9      	bne.n	4071cc <__multiply+0x10c>
  4071d8:	9800      	ldr	r0, [sp, #0]
  4071da:	f8c0 8010 	str.w	r8, [r0, #16]
  4071de:	b003      	add	sp, #12
  4071e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004071e4 <__pow5mult>:
  4071e4:	f012 0303 	ands.w	r3, r2, #3
  4071e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4071ec:	4614      	mov	r4, r2
  4071ee:	4607      	mov	r7, r0
  4071f0:	d12e      	bne.n	407250 <__pow5mult+0x6c>
  4071f2:	460d      	mov	r5, r1
  4071f4:	10a4      	asrs	r4, r4, #2
  4071f6:	d01c      	beq.n	407232 <__pow5mult+0x4e>
  4071f8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4071fa:	b396      	cbz	r6, 407262 <__pow5mult+0x7e>
  4071fc:	07e3      	lsls	r3, r4, #31
  4071fe:	f04f 0800 	mov.w	r8, #0
  407202:	d406      	bmi.n	407212 <__pow5mult+0x2e>
  407204:	1064      	asrs	r4, r4, #1
  407206:	d014      	beq.n	407232 <__pow5mult+0x4e>
  407208:	6830      	ldr	r0, [r6, #0]
  40720a:	b1a8      	cbz	r0, 407238 <__pow5mult+0x54>
  40720c:	4606      	mov	r6, r0
  40720e:	07e3      	lsls	r3, r4, #31
  407210:	d5f8      	bpl.n	407204 <__pow5mult+0x20>
  407212:	4632      	mov	r2, r6
  407214:	4629      	mov	r1, r5
  407216:	4638      	mov	r0, r7
  407218:	f7ff ff52 	bl	4070c0 <__multiply>
  40721c:	b1b5      	cbz	r5, 40724c <__pow5mult+0x68>
  40721e:	686a      	ldr	r2, [r5, #4]
  407220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407222:	1064      	asrs	r4, r4, #1
  407224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407228:	6029      	str	r1, [r5, #0]
  40722a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40722e:	4605      	mov	r5, r0
  407230:	d1ea      	bne.n	407208 <__pow5mult+0x24>
  407232:	4628      	mov	r0, r5
  407234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407238:	4632      	mov	r2, r6
  40723a:	4631      	mov	r1, r6
  40723c:	4638      	mov	r0, r7
  40723e:	f7ff ff3f 	bl	4070c0 <__multiply>
  407242:	6030      	str	r0, [r6, #0]
  407244:	f8c0 8000 	str.w	r8, [r0]
  407248:	4606      	mov	r6, r0
  40724a:	e7e0      	b.n	40720e <__pow5mult+0x2a>
  40724c:	4605      	mov	r5, r0
  40724e:	e7d9      	b.n	407204 <__pow5mult+0x20>
  407250:	1e5a      	subs	r2, r3, #1
  407252:	4d0b      	ldr	r5, [pc, #44]	; (407280 <__pow5mult+0x9c>)
  407254:	2300      	movs	r3, #0
  407256:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40725a:	f7ff fe97 	bl	406f8c <__multadd>
  40725e:	4605      	mov	r5, r0
  407260:	e7c8      	b.n	4071f4 <__pow5mult+0x10>
  407262:	2101      	movs	r1, #1
  407264:	4638      	mov	r0, r7
  407266:	f7ff fe61 	bl	406f2c <_Balloc>
  40726a:	f240 2171 	movw	r1, #625	; 0x271
  40726e:	2201      	movs	r2, #1
  407270:	2300      	movs	r3, #0
  407272:	6141      	str	r1, [r0, #20]
  407274:	6102      	str	r2, [r0, #16]
  407276:	4606      	mov	r6, r0
  407278:	64b8      	str	r0, [r7, #72]	; 0x48
  40727a:	6003      	str	r3, [r0, #0]
  40727c:	e7be      	b.n	4071fc <__pow5mult+0x18>
  40727e:	bf00      	nop
  407280:	00407e70 	.word	0x00407e70

00407284 <__lshift>:
  407284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407288:	4691      	mov	r9, r2
  40728a:	690a      	ldr	r2, [r1, #16]
  40728c:	688b      	ldr	r3, [r1, #8]
  40728e:	ea4f 1469 	mov.w	r4, r9, asr #5
  407292:	eb04 0802 	add.w	r8, r4, r2
  407296:	f108 0501 	add.w	r5, r8, #1
  40729a:	429d      	cmp	r5, r3
  40729c:	460e      	mov	r6, r1
  40729e:	4607      	mov	r7, r0
  4072a0:	6849      	ldr	r1, [r1, #4]
  4072a2:	dd04      	ble.n	4072ae <__lshift+0x2a>
  4072a4:	005b      	lsls	r3, r3, #1
  4072a6:	429d      	cmp	r5, r3
  4072a8:	f101 0101 	add.w	r1, r1, #1
  4072ac:	dcfa      	bgt.n	4072a4 <__lshift+0x20>
  4072ae:	4638      	mov	r0, r7
  4072b0:	f7ff fe3c 	bl	406f2c <_Balloc>
  4072b4:	2c00      	cmp	r4, #0
  4072b6:	f100 0314 	add.w	r3, r0, #20
  4072ba:	dd06      	ble.n	4072ca <__lshift+0x46>
  4072bc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4072c0:	2100      	movs	r1, #0
  4072c2:	f843 1b04 	str.w	r1, [r3], #4
  4072c6:	429a      	cmp	r2, r3
  4072c8:	d1fb      	bne.n	4072c2 <__lshift+0x3e>
  4072ca:	6934      	ldr	r4, [r6, #16]
  4072cc:	f106 0114 	add.w	r1, r6, #20
  4072d0:	f019 091f 	ands.w	r9, r9, #31
  4072d4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4072d8:	d01d      	beq.n	407316 <__lshift+0x92>
  4072da:	f1c9 0c20 	rsb	ip, r9, #32
  4072de:	2200      	movs	r2, #0
  4072e0:	680c      	ldr	r4, [r1, #0]
  4072e2:	fa04 f409 	lsl.w	r4, r4, r9
  4072e6:	4314      	orrs	r4, r2
  4072e8:	f843 4b04 	str.w	r4, [r3], #4
  4072ec:	f851 2b04 	ldr.w	r2, [r1], #4
  4072f0:	458e      	cmp	lr, r1
  4072f2:	fa22 f20c 	lsr.w	r2, r2, ip
  4072f6:	d8f3      	bhi.n	4072e0 <__lshift+0x5c>
  4072f8:	601a      	str	r2, [r3, #0]
  4072fa:	b10a      	cbz	r2, 407300 <__lshift+0x7c>
  4072fc:	f108 0502 	add.w	r5, r8, #2
  407300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407302:	6872      	ldr	r2, [r6, #4]
  407304:	3d01      	subs	r5, #1
  407306:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40730a:	6105      	str	r5, [r0, #16]
  40730c:	6031      	str	r1, [r6, #0]
  40730e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407316:	3b04      	subs	r3, #4
  407318:	f851 2b04 	ldr.w	r2, [r1], #4
  40731c:	f843 2f04 	str.w	r2, [r3, #4]!
  407320:	458e      	cmp	lr, r1
  407322:	d8f9      	bhi.n	407318 <__lshift+0x94>
  407324:	e7ec      	b.n	407300 <__lshift+0x7c>
  407326:	bf00      	nop

00407328 <__mcmp>:
  407328:	b430      	push	{r4, r5}
  40732a:	690b      	ldr	r3, [r1, #16]
  40732c:	4605      	mov	r5, r0
  40732e:	6900      	ldr	r0, [r0, #16]
  407330:	1ac0      	subs	r0, r0, r3
  407332:	d10f      	bne.n	407354 <__mcmp+0x2c>
  407334:	009b      	lsls	r3, r3, #2
  407336:	3514      	adds	r5, #20
  407338:	3114      	adds	r1, #20
  40733a:	4419      	add	r1, r3
  40733c:	442b      	add	r3, r5
  40733e:	e001      	b.n	407344 <__mcmp+0x1c>
  407340:	429d      	cmp	r5, r3
  407342:	d207      	bcs.n	407354 <__mcmp+0x2c>
  407344:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40734c:	4294      	cmp	r4, r2
  40734e:	d0f7      	beq.n	407340 <__mcmp+0x18>
  407350:	d302      	bcc.n	407358 <__mcmp+0x30>
  407352:	2001      	movs	r0, #1
  407354:	bc30      	pop	{r4, r5}
  407356:	4770      	bx	lr
  407358:	f04f 30ff 	mov.w	r0, #4294967295
  40735c:	e7fa      	b.n	407354 <__mcmp+0x2c>
  40735e:	bf00      	nop

00407360 <__mdiff>:
  407360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407364:	690f      	ldr	r7, [r1, #16]
  407366:	460e      	mov	r6, r1
  407368:	6911      	ldr	r1, [r2, #16]
  40736a:	1a7f      	subs	r7, r7, r1
  40736c:	2f00      	cmp	r7, #0
  40736e:	4690      	mov	r8, r2
  407370:	d117      	bne.n	4073a2 <__mdiff+0x42>
  407372:	0089      	lsls	r1, r1, #2
  407374:	f106 0514 	add.w	r5, r6, #20
  407378:	f102 0e14 	add.w	lr, r2, #20
  40737c:	186b      	adds	r3, r5, r1
  40737e:	4471      	add	r1, lr
  407380:	e001      	b.n	407386 <__mdiff+0x26>
  407382:	429d      	cmp	r5, r3
  407384:	d25c      	bcs.n	407440 <__mdiff+0xe0>
  407386:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40738a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40738e:	42a2      	cmp	r2, r4
  407390:	d0f7      	beq.n	407382 <__mdiff+0x22>
  407392:	d25e      	bcs.n	407452 <__mdiff+0xf2>
  407394:	4633      	mov	r3, r6
  407396:	462c      	mov	r4, r5
  407398:	4646      	mov	r6, r8
  40739a:	4675      	mov	r5, lr
  40739c:	4698      	mov	r8, r3
  40739e:	2701      	movs	r7, #1
  4073a0:	e005      	b.n	4073ae <__mdiff+0x4e>
  4073a2:	db58      	blt.n	407456 <__mdiff+0xf6>
  4073a4:	f106 0514 	add.w	r5, r6, #20
  4073a8:	f108 0414 	add.w	r4, r8, #20
  4073ac:	2700      	movs	r7, #0
  4073ae:	6871      	ldr	r1, [r6, #4]
  4073b0:	f7ff fdbc 	bl	406f2c <_Balloc>
  4073b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4073b8:	6936      	ldr	r6, [r6, #16]
  4073ba:	60c7      	str	r7, [r0, #12]
  4073bc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4073c0:	46a6      	mov	lr, r4
  4073c2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4073c6:	f100 0414 	add.w	r4, r0, #20
  4073ca:	2300      	movs	r3, #0
  4073cc:	f85e 1b04 	ldr.w	r1, [lr], #4
  4073d0:	f855 8b04 	ldr.w	r8, [r5], #4
  4073d4:	b28a      	uxth	r2, r1
  4073d6:	fa13 f388 	uxtah	r3, r3, r8
  4073da:	0c09      	lsrs	r1, r1, #16
  4073dc:	1a9a      	subs	r2, r3, r2
  4073de:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4073e2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4073e6:	b292      	uxth	r2, r2
  4073e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4073ec:	45f4      	cmp	ip, lr
  4073ee:	f844 2b04 	str.w	r2, [r4], #4
  4073f2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4073f6:	d8e9      	bhi.n	4073cc <__mdiff+0x6c>
  4073f8:	42af      	cmp	r7, r5
  4073fa:	d917      	bls.n	40742c <__mdiff+0xcc>
  4073fc:	46a4      	mov	ip, r4
  4073fe:	46ae      	mov	lr, r5
  407400:	f85e 2b04 	ldr.w	r2, [lr], #4
  407404:	fa13 f382 	uxtah	r3, r3, r2
  407408:	1419      	asrs	r1, r3, #16
  40740a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40740e:	b29b      	uxth	r3, r3
  407410:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407414:	4577      	cmp	r7, lr
  407416:	f84c 2b04 	str.w	r2, [ip], #4
  40741a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40741e:	d8ef      	bhi.n	407400 <__mdiff+0xa0>
  407420:	43ed      	mvns	r5, r5
  407422:	442f      	add	r7, r5
  407424:	f027 0703 	bic.w	r7, r7, #3
  407428:	3704      	adds	r7, #4
  40742a:	443c      	add	r4, r7
  40742c:	3c04      	subs	r4, #4
  40742e:	b922      	cbnz	r2, 40743a <__mdiff+0xda>
  407430:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407434:	3e01      	subs	r6, #1
  407436:	2b00      	cmp	r3, #0
  407438:	d0fa      	beq.n	407430 <__mdiff+0xd0>
  40743a:	6106      	str	r6, [r0, #16]
  40743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407440:	2100      	movs	r1, #0
  407442:	f7ff fd73 	bl	406f2c <_Balloc>
  407446:	2201      	movs	r2, #1
  407448:	2300      	movs	r3, #0
  40744a:	6102      	str	r2, [r0, #16]
  40744c:	6143      	str	r3, [r0, #20]
  40744e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407452:	4674      	mov	r4, lr
  407454:	e7ab      	b.n	4073ae <__mdiff+0x4e>
  407456:	4633      	mov	r3, r6
  407458:	f106 0414 	add.w	r4, r6, #20
  40745c:	f102 0514 	add.w	r5, r2, #20
  407460:	4616      	mov	r6, r2
  407462:	2701      	movs	r7, #1
  407464:	4698      	mov	r8, r3
  407466:	e7a2      	b.n	4073ae <__mdiff+0x4e>

00407468 <__d2b>:
  407468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40746c:	b082      	sub	sp, #8
  40746e:	2101      	movs	r1, #1
  407470:	461c      	mov	r4, r3
  407472:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407476:	4615      	mov	r5, r2
  407478:	9e08      	ldr	r6, [sp, #32]
  40747a:	f7ff fd57 	bl	406f2c <_Balloc>
  40747e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407482:	4680      	mov	r8, r0
  407484:	b10f      	cbz	r7, 40748a <__d2b+0x22>
  407486:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40748a:	9401      	str	r4, [sp, #4]
  40748c:	b31d      	cbz	r5, 4074d6 <__d2b+0x6e>
  40748e:	a802      	add	r0, sp, #8
  407490:	f840 5d08 	str.w	r5, [r0, #-8]!
  407494:	f7ff fdda 	bl	40704c <__lo0bits>
  407498:	2800      	cmp	r0, #0
  40749a:	d134      	bne.n	407506 <__d2b+0x9e>
  40749c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4074a0:	f8c8 2014 	str.w	r2, [r8, #20]
  4074a4:	2b00      	cmp	r3, #0
  4074a6:	bf0c      	ite	eq
  4074a8:	2101      	moveq	r1, #1
  4074aa:	2102      	movne	r1, #2
  4074ac:	f8c8 3018 	str.w	r3, [r8, #24]
  4074b0:	f8c8 1010 	str.w	r1, [r8, #16]
  4074b4:	b9df      	cbnz	r7, 4074ee <__d2b+0x86>
  4074b6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4074ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4074be:	6030      	str	r0, [r6, #0]
  4074c0:	6918      	ldr	r0, [r3, #16]
  4074c2:	f7ff fda3 	bl	40700c <__hi0bits>
  4074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4074cc:	6018      	str	r0, [r3, #0]
  4074ce:	4640      	mov	r0, r8
  4074d0:	b002      	add	sp, #8
  4074d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4074d6:	a801      	add	r0, sp, #4
  4074d8:	f7ff fdb8 	bl	40704c <__lo0bits>
  4074dc:	9b01      	ldr	r3, [sp, #4]
  4074de:	f8c8 3014 	str.w	r3, [r8, #20]
  4074e2:	2101      	movs	r1, #1
  4074e4:	3020      	adds	r0, #32
  4074e6:	f8c8 1010 	str.w	r1, [r8, #16]
  4074ea:	2f00      	cmp	r7, #0
  4074ec:	d0e3      	beq.n	4074b6 <__d2b+0x4e>
  4074ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074f0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4074f4:	4407      	add	r7, r0
  4074f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4074fa:	6037      	str	r7, [r6, #0]
  4074fc:	6018      	str	r0, [r3, #0]
  4074fe:	4640      	mov	r0, r8
  407500:	b002      	add	sp, #8
  407502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407506:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40750a:	f1c0 0220 	rsb	r2, r0, #32
  40750e:	fa03 f202 	lsl.w	r2, r3, r2
  407512:	430a      	orrs	r2, r1
  407514:	40c3      	lsrs	r3, r0
  407516:	9301      	str	r3, [sp, #4]
  407518:	f8c8 2014 	str.w	r2, [r8, #20]
  40751c:	e7c2      	b.n	4074a4 <__d2b+0x3c>
  40751e:	bf00      	nop

00407520 <_realloc_r>:
  407520:	2900      	cmp	r1, #0
  407522:	f000 8095 	beq.w	407650 <_realloc_r+0x130>
  407526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40752a:	460d      	mov	r5, r1
  40752c:	4616      	mov	r6, r2
  40752e:	b083      	sub	sp, #12
  407530:	4680      	mov	r8, r0
  407532:	f106 070b 	add.w	r7, r6, #11
  407536:	f7fc ff73 	bl	404420 <__malloc_lock>
  40753a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40753e:	2f16      	cmp	r7, #22
  407540:	f02e 0403 	bic.w	r4, lr, #3
  407544:	f1a5 0908 	sub.w	r9, r5, #8
  407548:	d83c      	bhi.n	4075c4 <_realloc_r+0xa4>
  40754a:	2210      	movs	r2, #16
  40754c:	4617      	mov	r7, r2
  40754e:	42be      	cmp	r6, r7
  407550:	d83d      	bhi.n	4075ce <_realloc_r+0xae>
  407552:	4294      	cmp	r4, r2
  407554:	da43      	bge.n	4075de <_realloc_r+0xbe>
  407556:	4bc4      	ldr	r3, [pc, #784]	; (407868 <_realloc_r+0x348>)
  407558:	6899      	ldr	r1, [r3, #8]
  40755a:	eb09 0004 	add.w	r0, r9, r4
  40755e:	4288      	cmp	r0, r1
  407560:	f000 80b4 	beq.w	4076cc <_realloc_r+0x1ac>
  407564:	6843      	ldr	r3, [r0, #4]
  407566:	f023 0101 	bic.w	r1, r3, #1
  40756a:	4401      	add	r1, r0
  40756c:	6849      	ldr	r1, [r1, #4]
  40756e:	07c9      	lsls	r1, r1, #31
  407570:	d54c      	bpl.n	40760c <_realloc_r+0xec>
  407572:	f01e 0f01 	tst.w	lr, #1
  407576:	f000 809b 	beq.w	4076b0 <_realloc_r+0x190>
  40757a:	4631      	mov	r1, r6
  40757c:	4640      	mov	r0, r8
  40757e:	f7fc fc51 	bl	403e24 <_malloc_r>
  407582:	4606      	mov	r6, r0
  407584:	2800      	cmp	r0, #0
  407586:	d03a      	beq.n	4075fe <_realloc_r+0xde>
  407588:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40758c:	f023 0301 	bic.w	r3, r3, #1
  407590:	444b      	add	r3, r9
  407592:	f1a0 0208 	sub.w	r2, r0, #8
  407596:	429a      	cmp	r2, r3
  407598:	f000 8121 	beq.w	4077de <_realloc_r+0x2be>
  40759c:	1f22      	subs	r2, r4, #4
  40759e:	2a24      	cmp	r2, #36	; 0x24
  4075a0:	f200 8107 	bhi.w	4077b2 <_realloc_r+0x292>
  4075a4:	2a13      	cmp	r2, #19
  4075a6:	f200 80db 	bhi.w	407760 <_realloc_r+0x240>
  4075aa:	4603      	mov	r3, r0
  4075ac:	462a      	mov	r2, r5
  4075ae:	6811      	ldr	r1, [r2, #0]
  4075b0:	6019      	str	r1, [r3, #0]
  4075b2:	6851      	ldr	r1, [r2, #4]
  4075b4:	6059      	str	r1, [r3, #4]
  4075b6:	6892      	ldr	r2, [r2, #8]
  4075b8:	609a      	str	r2, [r3, #8]
  4075ba:	4629      	mov	r1, r5
  4075bc:	4640      	mov	r0, r8
  4075be:	f7ff fa53 	bl	406a68 <_free_r>
  4075c2:	e01c      	b.n	4075fe <_realloc_r+0xde>
  4075c4:	f027 0707 	bic.w	r7, r7, #7
  4075c8:	2f00      	cmp	r7, #0
  4075ca:	463a      	mov	r2, r7
  4075cc:	dabf      	bge.n	40754e <_realloc_r+0x2e>
  4075ce:	2600      	movs	r6, #0
  4075d0:	230c      	movs	r3, #12
  4075d2:	4630      	mov	r0, r6
  4075d4:	f8c8 3000 	str.w	r3, [r8]
  4075d8:	b003      	add	sp, #12
  4075da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4075de:	462e      	mov	r6, r5
  4075e0:	1be3      	subs	r3, r4, r7
  4075e2:	2b0f      	cmp	r3, #15
  4075e4:	d81e      	bhi.n	407624 <_realloc_r+0x104>
  4075e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4075ea:	f003 0301 	and.w	r3, r3, #1
  4075ee:	4323      	orrs	r3, r4
  4075f0:	444c      	add	r4, r9
  4075f2:	f8c9 3004 	str.w	r3, [r9, #4]
  4075f6:	6863      	ldr	r3, [r4, #4]
  4075f8:	f043 0301 	orr.w	r3, r3, #1
  4075fc:	6063      	str	r3, [r4, #4]
  4075fe:	4640      	mov	r0, r8
  407600:	f7fc ff14 	bl	40442c <__malloc_unlock>
  407604:	4630      	mov	r0, r6
  407606:	b003      	add	sp, #12
  407608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40760c:	f023 0303 	bic.w	r3, r3, #3
  407610:	18e1      	adds	r1, r4, r3
  407612:	4291      	cmp	r1, r2
  407614:	db1f      	blt.n	407656 <_realloc_r+0x136>
  407616:	68c3      	ldr	r3, [r0, #12]
  407618:	6882      	ldr	r2, [r0, #8]
  40761a:	462e      	mov	r6, r5
  40761c:	60d3      	str	r3, [r2, #12]
  40761e:	460c      	mov	r4, r1
  407620:	609a      	str	r2, [r3, #8]
  407622:	e7dd      	b.n	4075e0 <_realloc_r+0xc0>
  407624:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407628:	eb09 0107 	add.w	r1, r9, r7
  40762c:	f002 0201 	and.w	r2, r2, #1
  407630:	444c      	add	r4, r9
  407632:	f043 0301 	orr.w	r3, r3, #1
  407636:	4317      	orrs	r7, r2
  407638:	f8c9 7004 	str.w	r7, [r9, #4]
  40763c:	604b      	str	r3, [r1, #4]
  40763e:	6863      	ldr	r3, [r4, #4]
  407640:	f043 0301 	orr.w	r3, r3, #1
  407644:	3108      	adds	r1, #8
  407646:	6063      	str	r3, [r4, #4]
  407648:	4640      	mov	r0, r8
  40764a:	f7ff fa0d 	bl	406a68 <_free_r>
  40764e:	e7d6      	b.n	4075fe <_realloc_r+0xde>
  407650:	4611      	mov	r1, r2
  407652:	f7fc bbe7 	b.w	403e24 <_malloc_r>
  407656:	f01e 0f01 	tst.w	lr, #1
  40765a:	d18e      	bne.n	40757a <_realloc_r+0x5a>
  40765c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407660:	eba9 0a01 	sub.w	sl, r9, r1
  407664:	f8da 1004 	ldr.w	r1, [sl, #4]
  407668:	f021 0103 	bic.w	r1, r1, #3
  40766c:	440b      	add	r3, r1
  40766e:	4423      	add	r3, r4
  407670:	4293      	cmp	r3, r2
  407672:	db25      	blt.n	4076c0 <_realloc_r+0x1a0>
  407674:	68c2      	ldr	r2, [r0, #12]
  407676:	6881      	ldr	r1, [r0, #8]
  407678:	4656      	mov	r6, sl
  40767a:	60ca      	str	r2, [r1, #12]
  40767c:	6091      	str	r1, [r2, #8]
  40767e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407682:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407686:	1f22      	subs	r2, r4, #4
  407688:	2a24      	cmp	r2, #36	; 0x24
  40768a:	60c1      	str	r1, [r0, #12]
  40768c:	6088      	str	r0, [r1, #8]
  40768e:	f200 8094 	bhi.w	4077ba <_realloc_r+0x29a>
  407692:	2a13      	cmp	r2, #19
  407694:	d96f      	bls.n	407776 <_realloc_r+0x256>
  407696:	6829      	ldr	r1, [r5, #0]
  407698:	f8ca 1008 	str.w	r1, [sl, #8]
  40769c:	6869      	ldr	r1, [r5, #4]
  40769e:	f8ca 100c 	str.w	r1, [sl, #12]
  4076a2:	2a1b      	cmp	r2, #27
  4076a4:	f200 80a2 	bhi.w	4077ec <_realloc_r+0x2cc>
  4076a8:	3508      	adds	r5, #8
  4076aa:	f10a 0210 	add.w	r2, sl, #16
  4076ae:	e063      	b.n	407778 <_realloc_r+0x258>
  4076b0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4076b4:	eba9 0a03 	sub.w	sl, r9, r3
  4076b8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076bc:	f021 0103 	bic.w	r1, r1, #3
  4076c0:	1863      	adds	r3, r4, r1
  4076c2:	4293      	cmp	r3, r2
  4076c4:	f6ff af59 	blt.w	40757a <_realloc_r+0x5a>
  4076c8:	4656      	mov	r6, sl
  4076ca:	e7d8      	b.n	40767e <_realloc_r+0x15e>
  4076cc:	6841      	ldr	r1, [r0, #4]
  4076ce:	f021 0b03 	bic.w	fp, r1, #3
  4076d2:	44a3      	add	fp, r4
  4076d4:	f107 0010 	add.w	r0, r7, #16
  4076d8:	4583      	cmp	fp, r0
  4076da:	da56      	bge.n	40778a <_realloc_r+0x26a>
  4076dc:	f01e 0f01 	tst.w	lr, #1
  4076e0:	f47f af4b 	bne.w	40757a <_realloc_r+0x5a>
  4076e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4076e8:	eba9 0a01 	sub.w	sl, r9, r1
  4076ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076f0:	f021 0103 	bic.w	r1, r1, #3
  4076f4:	448b      	add	fp, r1
  4076f6:	4558      	cmp	r0, fp
  4076f8:	dce2      	bgt.n	4076c0 <_realloc_r+0x1a0>
  4076fa:	4656      	mov	r6, sl
  4076fc:	f8da 100c 	ldr.w	r1, [sl, #12]
  407700:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407704:	1f22      	subs	r2, r4, #4
  407706:	2a24      	cmp	r2, #36	; 0x24
  407708:	60c1      	str	r1, [r0, #12]
  40770a:	6088      	str	r0, [r1, #8]
  40770c:	f200 808f 	bhi.w	40782e <_realloc_r+0x30e>
  407710:	2a13      	cmp	r2, #19
  407712:	f240 808a 	bls.w	40782a <_realloc_r+0x30a>
  407716:	6829      	ldr	r1, [r5, #0]
  407718:	f8ca 1008 	str.w	r1, [sl, #8]
  40771c:	6869      	ldr	r1, [r5, #4]
  40771e:	f8ca 100c 	str.w	r1, [sl, #12]
  407722:	2a1b      	cmp	r2, #27
  407724:	f200 808a 	bhi.w	40783c <_realloc_r+0x31c>
  407728:	3508      	adds	r5, #8
  40772a:	f10a 0210 	add.w	r2, sl, #16
  40772e:	6829      	ldr	r1, [r5, #0]
  407730:	6011      	str	r1, [r2, #0]
  407732:	6869      	ldr	r1, [r5, #4]
  407734:	6051      	str	r1, [r2, #4]
  407736:	68a9      	ldr	r1, [r5, #8]
  407738:	6091      	str	r1, [r2, #8]
  40773a:	eb0a 0107 	add.w	r1, sl, r7
  40773e:	ebab 0207 	sub.w	r2, fp, r7
  407742:	f042 0201 	orr.w	r2, r2, #1
  407746:	6099      	str	r1, [r3, #8]
  407748:	604a      	str	r2, [r1, #4]
  40774a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40774e:	f003 0301 	and.w	r3, r3, #1
  407752:	431f      	orrs	r7, r3
  407754:	4640      	mov	r0, r8
  407756:	f8ca 7004 	str.w	r7, [sl, #4]
  40775a:	f7fc fe67 	bl	40442c <__malloc_unlock>
  40775e:	e751      	b.n	407604 <_realloc_r+0xe4>
  407760:	682b      	ldr	r3, [r5, #0]
  407762:	6003      	str	r3, [r0, #0]
  407764:	686b      	ldr	r3, [r5, #4]
  407766:	6043      	str	r3, [r0, #4]
  407768:	2a1b      	cmp	r2, #27
  40776a:	d82d      	bhi.n	4077c8 <_realloc_r+0x2a8>
  40776c:	f100 0308 	add.w	r3, r0, #8
  407770:	f105 0208 	add.w	r2, r5, #8
  407774:	e71b      	b.n	4075ae <_realloc_r+0x8e>
  407776:	4632      	mov	r2, r6
  407778:	6829      	ldr	r1, [r5, #0]
  40777a:	6011      	str	r1, [r2, #0]
  40777c:	6869      	ldr	r1, [r5, #4]
  40777e:	6051      	str	r1, [r2, #4]
  407780:	68a9      	ldr	r1, [r5, #8]
  407782:	6091      	str	r1, [r2, #8]
  407784:	461c      	mov	r4, r3
  407786:	46d1      	mov	r9, sl
  407788:	e72a      	b.n	4075e0 <_realloc_r+0xc0>
  40778a:	eb09 0107 	add.w	r1, r9, r7
  40778e:	ebab 0b07 	sub.w	fp, fp, r7
  407792:	f04b 0201 	orr.w	r2, fp, #1
  407796:	6099      	str	r1, [r3, #8]
  407798:	604a      	str	r2, [r1, #4]
  40779a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40779e:	f003 0301 	and.w	r3, r3, #1
  4077a2:	431f      	orrs	r7, r3
  4077a4:	4640      	mov	r0, r8
  4077a6:	f845 7c04 	str.w	r7, [r5, #-4]
  4077aa:	f7fc fe3f 	bl	40442c <__malloc_unlock>
  4077ae:	462e      	mov	r6, r5
  4077b0:	e728      	b.n	407604 <_realloc_r+0xe4>
  4077b2:	4629      	mov	r1, r5
  4077b4:	f7ff fb56 	bl	406e64 <memmove>
  4077b8:	e6ff      	b.n	4075ba <_realloc_r+0x9a>
  4077ba:	4629      	mov	r1, r5
  4077bc:	4630      	mov	r0, r6
  4077be:	461c      	mov	r4, r3
  4077c0:	46d1      	mov	r9, sl
  4077c2:	f7ff fb4f 	bl	406e64 <memmove>
  4077c6:	e70b      	b.n	4075e0 <_realloc_r+0xc0>
  4077c8:	68ab      	ldr	r3, [r5, #8]
  4077ca:	6083      	str	r3, [r0, #8]
  4077cc:	68eb      	ldr	r3, [r5, #12]
  4077ce:	60c3      	str	r3, [r0, #12]
  4077d0:	2a24      	cmp	r2, #36	; 0x24
  4077d2:	d017      	beq.n	407804 <_realloc_r+0x2e4>
  4077d4:	f100 0310 	add.w	r3, r0, #16
  4077d8:	f105 0210 	add.w	r2, r5, #16
  4077dc:	e6e7      	b.n	4075ae <_realloc_r+0x8e>
  4077de:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4077e2:	f023 0303 	bic.w	r3, r3, #3
  4077e6:	441c      	add	r4, r3
  4077e8:	462e      	mov	r6, r5
  4077ea:	e6f9      	b.n	4075e0 <_realloc_r+0xc0>
  4077ec:	68a9      	ldr	r1, [r5, #8]
  4077ee:	f8ca 1010 	str.w	r1, [sl, #16]
  4077f2:	68e9      	ldr	r1, [r5, #12]
  4077f4:	f8ca 1014 	str.w	r1, [sl, #20]
  4077f8:	2a24      	cmp	r2, #36	; 0x24
  4077fa:	d00c      	beq.n	407816 <_realloc_r+0x2f6>
  4077fc:	3510      	adds	r5, #16
  4077fe:	f10a 0218 	add.w	r2, sl, #24
  407802:	e7b9      	b.n	407778 <_realloc_r+0x258>
  407804:	692b      	ldr	r3, [r5, #16]
  407806:	6103      	str	r3, [r0, #16]
  407808:	696b      	ldr	r3, [r5, #20]
  40780a:	6143      	str	r3, [r0, #20]
  40780c:	f105 0218 	add.w	r2, r5, #24
  407810:	f100 0318 	add.w	r3, r0, #24
  407814:	e6cb      	b.n	4075ae <_realloc_r+0x8e>
  407816:	692a      	ldr	r2, [r5, #16]
  407818:	f8ca 2018 	str.w	r2, [sl, #24]
  40781c:	696a      	ldr	r2, [r5, #20]
  40781e:	f8ca 201c 	str.w	r2, [sl, #28]
  407822:	3518      	adds	r5, #24
  407824:	f10a 0220 	add.w	r2, sl, #32
  407828:	e7a6      	b.n	407778 <_realloc_r+0x258>
  40782a:	4632      	mov	r2, r6
  40782c:	e77f      	b.n	40772e <_realloc_r+0x20e>
  40782e:	4629      	mov	r1, r5
  407830:	4630      	mov	r0, r6
  407832:	9301      	str	r3, [sp, #4]
  407834:	f7ff fb16 	bl	406e64 <memmove>
  407838:	9b01      	ldr	r3, [sp, #4]
  40783a:	e77e      	b.n	40773a <_realloc_r+0x21a>
  40783c:	68a9      	ldr	r1, [r5, #8]
  40783e:	f8ca 1010 	str.w	r1, [sl, #16]
  407842:	68e9      	ldr	r1, [r5, #12]
  407844:	f8ca 1014 	str.w	r1, [sl, #20]
  407848:	2a24      	cmp	r2, #36	; 0x24
  40784a:	d003      	beq.n	407854 <_realloc_r+0x334>
  40784c:	3510      	adds	r5, #16
  40784e:	f10a 0218 	add.w	r2, sl, #24
  407852:	e76c      	b.n	40772e <_realloc_r+0x20e>
  407854:	692a      	ldr	r2, [r5, #16]
  407856:	f8ca 2018 	str.w	r2, [sl, #24]
  40785a:	696a      	ldr	r2, [r5, #20]
  40785c:	f8ca 201c 	str.w	r2, [sl, #28]
  407860:	3518      	adds	r5, #24
  407862:	f10a 0220 	add.w	r2, sl, #32
  407866:	e762      	b.n	40772e <_realloc_r+0x20e>
  407868:	20000888 	.word	0x20000888

0040786c <__ssprint_r>:
  40786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407870:	6893      	ldr	r3, [r2, #8]
  407872:	b083      	sub	sp, #12
  407874:	4690      	mov	r8, r2
  407876:	2b00      	cmp	r3, #0
  407878:	d070      	beq.n	40795c <__ssprint_r+0xf0>
  40787a:	4682      	mov	sl, r0
  40787c:	460c      	mov	r4, r1
  40787e:	6817      	ldr	r7, [r2, #0]
  407880:	688d      	ldr	r5, [r1, #8]
  407882:	6808      	ldr	r0, [r1, #0]
  407884:	e042      	b.n	40790c <__ssprint_r+0xa0>
  407886:	89a3      	ldrh	r3, [r4, #12]
  407888:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40788c:	d02e      	beq.n	4078ec <__ssprint_r+0x80>
  40788e:	6965      	ldr	r5, [r4, #20]
  407890:	6921      	ldr	r1, [r4, #16]
  407892:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407896:	eba0 0b01 	sub.w	fp, r0, r1
  40789a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40789e:	f10b 0001 	add.w	r0, fp, #1
  4078a2:	106d      	asrs	r5, r5, #1
  4078a4:	4430      	add	r0, r6
  4078a6:	42a8      	cmp	r0, r5
  4078a8:	462a      	mov	r2, r5
  4078aa:	bf84      	itt	hi
  4078ac:	4605      	movhi	r5, r0
  4078ae:	462a      	movhi	r2, r5
  4078b0:	055b      	lsls	r3, r3, #21
  4078b2:	d538      	bpl.n	407926 <__ssprint_r+0xba>
  4078b4:	4611      	mov	r1, r2
  4078b6:	4650      	mov	r0, sl
  4078b8:	f7fc fab4 	bl	403e24 <_malloc_r>
  4078bc:	2800      	cmp	r0, #0
  4078be:	d03c      	beq.n	40793a <__ssprint_r+0xce>
  4078c0:	465a      	mov	r2, fp
  4078c2:	6921      	ldr	r1, [r4, #16]
  4078c4:	9001      	str	r0, [sp, #4]
  4078c6:	f7ff fa33 	bl	406d30 <memcpy>
  4078ca:	89a2      	ldrh	r2, [r4, #12]
  4078cc:	9b01      	ldr	r3, [sp, #4]
  4078ce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4078d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4078d6:	81a2      	strh	r2, [r4, #12]
  4078d8:	eba5 020b 	sub.w	r2, r5, fp
  4078dc:	eb03 000b 	add.w	r0, r3, fp
  4078e0:	6165      	str	r5, [r4, #20]
  4078e2:	6123      	str	r3, [r4, #16]
  4078e4:	6020      	str	r0, [r4, #0]
  4078e6:	60a2      	str	r2, [r4, #8]
  4078e8:	4635      	mov	r5, r6
  4078ea:	46b3      	mov	fp, r6
  4078ec:	465a      	mov	r2, fp
  4078ee:	4649      	mov	r1, r9
  4078f0:	f7ff fab8 	bl	406e64 <memmove>
  4078f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4078f8:	68a2      	ldr	r2, [r4, #8]
  4078fa:	6820      	ldr	r0, [r4, #0]
  4078fc:	1b55      	subs	r5, r2, r5
  4078fe:	4458      	add	r0, fp
  407900:	1b9e      	subs	r6, r3, r6
  407902:	60a5      	str	r5, [r4, #8]
  407904:	6020      	str	r0, [r4, #0]
  407906:	f8c8 6008 	str.w	r6, [r8, #8]
  40790a:	b33e      	cbz	r6, 40795c <__ssprint_r+0xf0>
  40790c:	687e      	ldr	r6, [r7, #4]
  40790e:	463b      	mov	r3, r7
  407910:	3708      	adds	r7, #8
  407912:	2e00      	cmp	r6, #0
  407914:	d0fa      	beq.n	40790c <__ssprint_r+0xa0>
  407916:	42ae      	cmp	r6, r5
  407918:	f8d3 9000 	ldr.w	r9, [r3]
  40791c:	46ab      	mov	fp, r5
  40791e:	d2b2      	bcs.n	407886 <__ssprint_r+0x1a>
  407920:	4635      	mov	r5, r6
  407922:	46b3      	mov	fp, r6
  407924:	e7e2      	b.n	4078ec <__ssprint_r+0x80>
  407926:	4650      	mov	r0, sl
  407928:	f7ff fdfa 	bl	407520 <_realloc_r>
  40792c:	4603      	mov	r3, r0
  40792e:	2800      	cmp	r0, #0
  407930:	d1d2      	bne.n	4078d8 <__ssprint_r+0x6c>
  407932:	6921      	ldr	r1, [r4, #16]
  407934:	4650      	mov	r0, sl
  407936:	f7ff f897 	bl	406a68 <_free_r>
  40793a:	230c      	movs	r3, #12
  40793c:	f8ca 3000 	str.w	r3, [sl]
  407940:	89a3      	ldrh	r3, [r4, #12]
  407942:	2200      	movs	r2, #0
  407944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407948:	f04f 30ff 	mov.w	r0, #4294967295
  40794c:	81a3      	strh	r3, [r4, #12]
  40794e:	f8c8 2008 	str.w	r2, [r8, #8]
  407952:	f8c8 2004 	str.w	r2, [r8, #4]
  407956:	b003      	add	sp, #12
  407958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40795c:	2000      	movs	r0, #0
  40795e:	f8c8 0004 	str.w	r0, [r8, #4]
  407962:	b003      	add	sp, #12
  407964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407968 <__ascii_wctomb>:
  407968:	b121      	cbz	r1, 407974 <__ascii_wctomb+0xc>
  40796a:	2aff      	cmp	r2, #255	; 0xff
  40796c:	d804      	bhi.n	407978 <__ascii_wctomb+0x10>
  40796e:	700a      	strb	r2, [r1, #0]
  407970:	2001      	movs	r0, #1
  407972:	4770      	bx	lr
  407974:	4608      	mov	r0, r1
  407976:	4770      	bx	lr
  407978:	238a      	movs	r3, #138	; 0x8a
  40797a:	6003      	str	r3, [r0, #0]
  40797c:	f04f 30ff 	mov.w	r0, #4294967295
  407980:	4770      	bx	lr
  407982:	bf00      	nop

00407984 <__register_exitproc>:
  407984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407988:	4d2c      	ldr	r5, [pc, #176]	; (407a3c <__register_exitproc+0xb8>)
  40798a:	4606      	mov	r6, r0
  40798c:	6828      	ldr	r0, [r5, #0]
  40798e:	4698      	mov	r8, r3
  407990:	460f      	mov	r7, r1
  407992:	4691      	mov	r9, r2
  407994:	f7ff f95c 	bl	406c50 <__retarget_lock_acquire_recursive>
  407998:	4b29      	ldr	r3, [pc, #164]	; (407a40 <__register_exitproc+0xbc>)
  40799a:	681c      	ldr	r4, [r3, #0]
  40799c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4079a0:	2b00      	cmp	r3, #0
  4079a2:	d03e      	beq.n	407a22 <__register_exitproc+0x9e>
  4079a4:	685a      	ldr	r2, [r3, #4]
  4079a6:	2a1f      	cmp	r2, #31
  4079a8:	dc1c      	bgt.n	4079e4 <__register_exitproc+0x60>
  4079aa:	f102 0e01 	add.w	lr, r2, #1
  4079ae:	b176      	cbz	r6, 4079ce <__register_exitproc+0x4a>
  4079b0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4079b4:	2401      	movs	r4, #1
  4079b6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4079ba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4079be:	4094      	lsls	r4, r2
  4079c0:	4320      	orrs	r0, r4
  4079c2:	2e02      	cmp	r6, #2
  4079c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4079c8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4079cc:	d023      	beq.n	407a16 <__register_exitproc+0x92>
  4079ce:	3202      	adds	r2, #2
  4079d0:	f8c3 e004 	str.w	lr, [r3, #4]
  4079d4:	6828      	ldr	r0, [r5, #0]
  4079d6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4079da:	f7ff f93b 	bl	406c54 <__retarget_lock_release_recursive>
  4079de:	2000      	movs	r0, #0
  4079e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4079e4:	4b17      	ldr	r3, [pc, #92]	; (407a44 <__register_exitproc+0xc0>)
  4079e6:	b30b      	cbz	r3, 407a2c <__register_exitproc+0xa8>
  4079e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4079ec:	f7fc fa0a 	bl	403e04 <malloc>
  4079f0:	4603      	mov	r3, r0
  4079f2:	b1d8      	cbz	r0, 407a2c <__register_exitproc+0xa8>
  4079f4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4079f8:	6002      	str	r2, [r0, #0]
  4079fa:	2100      	movs	r1, #0
  4079fc:	6041      	str	r1, [r0, #4]
  4079fe:	460a      	mov	r2, r1
  407a00:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407a04:	f04f 0e01 	mov.w	lr, #1
  407a08:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407a0c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407a10:	2e00      	cmp	r6, #0
  407a12:	d0dc      	beq.n	4079ce <__register_exitproc+0x4a>
  407a14:	e7cc      	b.n	4079b0 <__register_exitproc+0x2c>
  407a16:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407a1a:	430c      	orrs	r4, r1
  407a1c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407a20:	e7d5      	b.n	4079ce <__register_exitproc+0x4a>
  407a22:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407a26:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407a2a:	e7bb      	b.n	4079a4 <__register_exitproc+0x20>
  407a2c:	6828      	ldr	r0, [r5, #0]
  407a2e:	f7ff f911 	bl	406c54 <__retarget_lock_release_recursive>
  407a32:	f04f 30ff 	mov.w	r0, #4294967295
  407a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a3a:	bf00      	nop
  407a3c:	20000c98 	.word	0x20000c98
  407a40:	00407cf4 	.word	0x00407cf4
  407a44:	00403e05 	.word	0x00403e05

00407a48 <_calloc_r>:
  407a48:	b510      	push	{r4, lr}
  407a4a:	fb02 f101 	mul.w	r1, r2, r1
  407a4e:	f7fc f9e9 	bl	403e24 <_malloc_r>
  407a52:	4604      	mov	r4, r0
  407a54:	b1d8      	cbz	r0, 407a8e <_calloc_r+0x46>
  407a56:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407a5a:	f022 0203 	bic.w	r2, r2, #3
  407a5e:	3a04      	subs	r2, #4
  407a60:	2a24      	cmp	r2, #36	; 0x24
  407a62:	d818      	bhi.n	407a96 <_calloc_r+0x4e>
  407a64:	2a13      	cmp	r2, #19
  407a66:	d914      	bls.n	407a92 <_calloc_r+0x4a>
  407a68:	2300      	movs	r3, #0
  407a6a:	2a1b      	cmp	r2, #27
  407a6c:	6003      	str	r3, [r0, #0]
  407a6e:	6043      	str	r3, [r0, #4]
  407a70:	d916      	bls.n	407aa0 <_calloc_r+0x58>
  407a72:	2a24      	cmp	r2, #36	; 0x24
  407a74:	6083      	str	r3, [r0, #8]
  407a76:	60c3      	str	r3, [r0, #12]
  407a78:	bf11      	iteee	ne
  407a7a:	f100 0210 	addne.w	r2, r0, #16
  407a7e:	6103      	streq	r3, [r0, #16]
  407a80:	6143      	streq	r3, [r0, #20]
  407a82:	f100 0218 	addeq.w	r2, r0, #24
  407a86:	2300      	movs	r3, #0
  407a88:	6013      	str	r3, [r2, #0]
  407a8a:	6053      	str	r3, [r2, #4]
  407a8c:	6093      	str	r3, [r2, #8]
  407a8e:	4620      	mov	r0, r4
  407a90:	bd10      	pop	{r4, pc}
  407a92:	4602      	mov	r2, r0
  407a94:	e7f7      	b.n	407a86 <_calloc_r+0x3e>
  407a96:	2100      	movs	r1, #0
  407a98:	f7fc fc74 	bl	404384 <memset>
  407a9c:	4620      	mov	r0, r4
  407a9e:	bd10      	pop	{r4, pc}
  407aa0:	f100 0208 	add.w	r2, r0, #8
  407aa4:	e7ef      	b.n	407a86 <_calloc_r+0x3e>
  407aa6:	bf00      	nop

00407aa8 <__gedf2>:
  407aa8:	f04f 3cff 	mov.w	ip, #4294967295
  407aac:	e006      	b.n	407abc <__cmpdf2+0x4>
  407aae:	bf00      	nop

00407ab0 <__ledf2>:
  407ab0:	f04f 0c01 	mov.w	ip, #1
  407ab4:	e002      	b.n	407abc <__cmpdf2+0x4>
  407ab6:	bf00      	nop

00407ab8 <__cmpdf2>:
  407ab8:	f04f 0c01 	mov.w	ip, #1
  407abc:	f84d cd04 	str.w	ip, [sp, #-4]!
  407ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407acc:	bf18      	it	ne
  407ace:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407ad2:	d01b      	beq.n	407b0c <__cmpdf2+0x54>
  407ad4:	b001      	add	sp, #4
  407ad6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407ada:	bf0c      	ite	eq
  407adc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407ae0:	ea91 0f03 	teqne	r1, r3
  407ae4:	bf02      	ittt	eq
  407ae6:	ea90 0f02 	teqeq	r0, r2
  407aea:	2000      	moveq	r0, #0
  407aec:	4770      	bxeq	lr
  407aee:	f110 0f00 	cmn.w	r0, #0
  407af2:	ea91 0f03 	teq	r1, r3
  407af6:	bf58      	it	pl
  407af8:	4299      	cmppl	r1, r3
  407afa:	bf08      	it	eq
  407afc:	4290      	cmpeq	r0, r2
  407afe:	bf2c      	ite	cs
  407b00:	17d8      	asrcs	r0, r3, #31
  407b02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407b06:	f040 0001 	orr.w	r0, r0, #1
  407b0a:	4770      	bx	lr
  407b0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407b14:	d102      	bne.n	407b1c <__cmpdf2+0x64>
  407b16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407b1a:	d107      	bne.n	407b2c <__cmpdf2+0x74>
  407b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407b24:	d1d6      	bne.n	407ad4 <__cmpdf2+0x1c>
  407b26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407b2a:	d0d3      	beq.n	407ad4 <__cmpdf2+0x1c>
  407b2c:	f85d 0b04 	ldr.w	r0, [sp], #4
  407b30:	4770      	bx	lr
  407b32:	bf00      	nop

00407b34 <__aeabi_cdrcmple>:
  407b34:	4684      	mov	ip, r0
  407b36:	4610      	mov	r0, r2
  407b38:	4662      	mov	r2, ip
  407b3a:	468c      	mov	ip, r1
  407b3c:	4619      	mov	r1, r3
  407b3e:	4663      	mov	r3, ip
  407b40:	e000      	b.n	407b44 <__aeabi_cdcmpeq>
  407b42:	bf00      	nop

00407b44 <__aeabi_cdcmpeq>:
  407b44:	b501      	push	{r0, lr}
  407b46:	f7ff ffb7 	bl	407ab8 <__cmpdf2>
  407b4a:	2800      	cmp	r0, #0
  407b4c:	bf48      	it	mi
  407b4e:	f110 0f00 	cmnmi.w	r0, #0
  407b52:	bd01      	pop	{r0, pc}

00407b54 <__aeabi_dcmpeq>:
  407b54:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b58:	f7ff fff4 	bl	407b44 <__aeabi_cdcmpeq>
  407b5c:	bf0c      	ite	eq
  407b5e:	2001      	moveq	r0, #1
  407b60:	2000      	movne	r0, #0
  407b62:	f85d fb08 	ldr.w	pc, [sp], #8
  407b66:	bf00      	nop

00407b68 <__aeabi_dcmplt>:
  407b68:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b6c:	f7ff ffea 	bl	407b44 <__aeabi_cdcmpeq>
  407b70:	bf34      	ite	cc
  407b72:	2001      	movcc	r0, #1
  407b74:	2000      	movcs	r0, #0
  407b76:	f85d fb08 	ldr.w	pc, [sp], #8
  407b7a:	bf00      	nop

00407b7c <__aeabi_dcmple>:
  407b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b80:	f7ff ffe0 	bl	407b44 <__aeabi_cdcmpeq>
  407b84:	bf94      	ite	ls
  407b86:	2001      	movls	r0, #1
  407b88:	2000      	movhi	r0, #0
  407b8a:	f85d fb08 	ldr.w	pc, [sp], #8
  407b8e:	bf00      	nop

00407b90 <__aeabi_dcmpge>:
  407b90:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b94:	f7ff ffce 	bl	407b34 <__aeabi_cdrcmple>
  407b98:	bf94      	ite	ls
  407b9a:	2001      	movls	r0, #1
  407b9c:	2000      	movhi	r0, #0
  407b9e:	f85d fb08 	ldr.w	pc, [sp], #8
  407ba2:	bf00      	nop

00407ba4 <__aeabi_dcmpgt>:
  407ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407ba8:	f7ff ffc4 	bl	407b34 <__aeabi_cdrcmple>
  407bac:	bf34      	ite	cc
  407bae:	2001      	movcc	r0, #1
  407bb0:	2000      	movcs	r0, #0
  407bb2:	f85d fb08 	ldr.w	pc, [sp], #8
  407bb6:	bf00      	nop

00407bb8 <__aeabi_dcmpun>:
  407bb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407bc0:	d102      	bne.n	407bc8 <__aeabi_dcmpun+0x10>
  407bc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407bc6:	d10a      	bne.n	407bde <__aeabi_dcmpun+0x26>
  407bc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407bcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407bd0:	d102      	bne.n	407bd8 <__aeabi_dcmpun+0x20>
  407bd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407bd6:	d102      	bne.n	407bde <__aeabi_dcmpun+0x26>
  407bd8:	f04f 0000 	mov.w	r0, #0
  407bdc:	4770      	bx	lr
  407bde:	f04f 0001 	mov.w	r0, #1
  407be2:	4770      	bx	lr

00407be4 <__aeabi_d2iz>:
  407be4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407be8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407bec:	d215      	bcs.n	407c1a <__aeabi_d2iz+0x36>
  407bee:	d511      	bpl.n	407c14 <__aeabi_d2iz+0x30>
  407bf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407bf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407bf8:	d912      	bls.n	407c20 <__aeabi_d2iz+0x3c>
  407bfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407c02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407c06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407c0a:	fa23 f002 	lsr.w	r0, r3, r2
  407c0e:	bf18      	it	ne
  407c10:	4240      	negne	r0, r0
  407c12:	4770      	bx	lr
  407c14:	f04f 0000 	mov.w	r0, #0
  407c18:	4770      	bx	lr
  407c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407c1e:	d105      	bne.n	407c2c <__aeabi_d2iz+0x48>
  407c20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407c24:	bf08      	it	eq
  407c26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407c2a:	4770      	bx	lr
  407c2c:	f04f 0000 	mov.w	r0, #0
  407c30:	4770      	bx	lr
  407c32:	bf00      	nop
  407c34:	00000000 	.word	0x00000000
  407c38:	0000000d 	.word	0x0000000d
  407c3c:	00000000 	.word	0x00000000
  407c40:	0000000e 	.word	0x0000000e
  407c44:	00000007 	.word	0x00000007
  407c48:	000007c7 	.word	0x000007c7

00407c4c <mmc_trans_multipliers>:
  407c4c:	00000000 0000000a 0000000c 0000000d     ................
  407c5c:	0000000f 00000014 0000001a 0000001e     ................
  407c6c:	00000023 00000028 0000002d 00000034     #...(...-...4...
  407c7c:	00000037 0000003c 00000046 00000050     7...<...F...P...

00407c8c <sd_mmc_trans_units>:
  407c8c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00407ca8 <sd_trans_multipliers>:
  407ca8:	00000000 0000000a 0000000c 0000000d     ................
  407cb8:	0000000f 00000014 00000019 0000001e     ................
  407cc8:	00000023 00000028 0000002d 00000032     #...(...-...2...
  407cd8:	00000037 0000003c 00000046 00000050     7...<...F...P...
  407ce8:	726f6353 25203a65 00000064              Score: %d...

00407cf4 <_global_impure_ptr>:
  407cf4:	20000460 00464e49 00666e69 004e414e     `.. INF.inf.NAN.
  407d04:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  407d14:	46454443 00000000 33323130 37363534     CDEF....01234567
  407d24:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407d34:	0000296c 00000030                       l)..0...

00407d3c <blanks.7223>:
  407d3c:	20202020 20202020 20202020 20202020                     

00407d4c <zeroes.7224>:
  407d4c:	30303030 30303030 30303030 30303030     0000000000000000
  407d5c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  407d6c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  407d7c:	00000000                                ....

00407d80 <__mprec_bigtens>:
  407d80:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407d90:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407da0:	7f73bf3c 75154fdd                       <.s..O.u

00407da8 <__mprec_tens>:
  407da8:	00000000 3ff00000 00000000 40240000     .......?......$@
  407db8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407dc8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407dd8:	00000000 412e8480 00000000 416312d0     .......A......cA
  407de8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407df8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407e08:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407e18:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407e28:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407e38:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407e48:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407e58:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407e68:	79d99db4 44ea7843                       ...yCx.D

00407e70 <p05.6055>:
  407e70:	00000005 00000019 0000007d              ........}...

00407e7c <_ctype_>:
  407e7c:	20202000 20202020 28282020 20282828     .         ((((( 
  407e8c:	20202020 20202020 20202020 20202020                     
  407e9c:	10108820 10101010 10101010 10101010      ...............
  407eac:	04040410 04040404 10040404 10101010     ................
  407ebc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407ecc:	01010101 01010101 01010101 10101010     ................
  407edc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407eec:	02020202 02020202 02020202 10101010     ................
  407efc:	00000020 00000000 00000000 00000000      ...............
	...

00407f80 <_init>:
  407f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f82:	bf00      	nop
  407f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407f86:	bc08      	pop	{r3}
  407f88:	469e      	mov	lr, r3
  407f8a:	4770      	bx	lr

00407f8c <__init_array_start>:
  407f8c:	004059f9 	.word	0x004059f9

00407f90 <__frame_dummy_init_array_entry>:
  407f90:	004000f1                                ..@.

00407f94 <_fini>:
  407f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f96:	bf00      	nop
  407f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407f9a:	bc08      	pop	{r3}
  407f9c:	469e      	mov	lr, r3
  407f9e:	4770      	bx	lr

00407fa0 <__fini_array_start>:
  407fa0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <Font08px_123>:
2000000c:	1003 826c                                   ..l.

20000010 <Font08px_124>:
20000010:	fe01 0000                                   ....

20000014 <Font08px_125>:
20000014:	8203 106c                                   ..l.

20000018 <Font08px_126>:
20000018:	1005 1008 1020 0000                         .... ...

20000020 <Font08px_32>:
20000020:	0008 0000 0000 0000 0000 0000               ............

2000002c <Font08px_33>:
2000002c:	9908 3c7e 2424 3c3c 0018 0000               ..~<$$<<....

20000038 <Font08px_34>:
20000038:	0408 66bd 3e3c bc65 0004 0000               ...f<>e.....

20000044 <Font08px_35>:
20000044:	1808 1818 0018 0000 0000 0000               ............

20000050 <Font08px_36>:
20000050:	0008 0000 1800 1818 0018 0000               ............

2000005c <Font08px_37>:
2000005c:	4605 1026 c4c8 0000                         .F&.....

20000064 <Font08px_38>:
20000064:	6c05 ac92 a040 0000                         .l..@...

2000006c <Font08px_39>:
2000006c:	0601 0000                                   ....

20000070 <Font08px_40>:
20000070:	3803 8244                                   .8D.

20000074 <Font08px_41>:
20000074:	8203 3844                                   ..D8

20000078 <Font08px_42>:
20000078:	2803 2810                                   .(.(

2000007c <Font08px_43>:
2000007c:	1003 1038                                   ..8.

20000080 <Font08px_44>:
20000080:	c001 0000                                   ....

20000084 <Font08px_45>:
20000084:	1003 1010                                   ....

20000088 <Font08px_46>:
20000088:	8001 0000                                   ....

2000008c <Font08px_47>:
2000008c:	c003 0638                                   ..8.

20000090 <Font08px_58>:
20000090:	4401 0000                                   .D..

20000094 <Font08px_59>:
20000094:	c401 0000                                   ....

20000098 <Font08px_60>:
20000098:	1004 4428 0082 0000                         ..(D....

200000a0 <Font08px_61>:
200000a0:	2804 2828 0028 0000                         .((((...

200000a8 <Font08px_62>:
200000a8:	8204 2844 0010 0000                         ..D(....

200000b0 <Font08px_63>:
200000b0:	0405 a202 0c12 0000                         ........

200000b8 <Font08px_64>:
200000b8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200000c4 <Font08px_91>:
200000c4:	fe03 8282                                   ....

200000c8 <Font08px_92>:
200000c8:	0603 c038                                   ..8.

200000cc <Font08px_93>:
200000cc:	8203 fe82                                   ....

200000d0 <Font08px_94>:
200000d0:	0403 0402                                   ....

200000d4 <Font08px_95>:
200000d4:	8003 8080                                   ....

200000d8 <Font08px_96>:
200000d8:	0202 0004                                   ....

200000dc <Font08px_N0>:
200000dc:	7c05 92a2 7c8a 0000                         .|...|..

200000e4 <Font08px_N1>:
200000e4:	0005 fe84 0080 0000                         ........

200000ec <Font08px_N2>:
200000ec:	8405 a2c2 8c92 0000                         ........

200000f4 <Font08px_N3>:
200000f4:	4405 9282 6c92 0000                         .D...l..

200000fc <Font08px_N4>:
200000fc:	3005 2428 20fe 0000                         .0($. ..

20000104 <Font08px_N5>:
20000104:	5e05 8a8a 728a 0000                         .^...r..

2000010c <Font08px_N6>:
2000010c:	7c05 9292 6492 0000                         .|...d..

20000114 <Font08px_N7>:
20000114:	0205 f202 060a 0000                         ........

2000011c <Font08px_N8>:
2000011c:	6c05 9292 6c92 0000                         .l...l..

20000124 <Font08px_N9>:
20000124:	4c05 9292 7c92 0000                         .L...|..

2000012c <Font08px_UA>:
2000012c:	f805 1214 f814 0000                         ........

20000134 <Font08px_UB>:
20000134:	fe04 9292 006c 0000                         ....l...

2000013c <Font08px_UC>:
2000013c:	7c04 8282 0044 0000                         .|..D...

20000144 <Font08px_UD>:
20000144:	fe04 8282 007c 0000                         ....|...

2000014c <Font08px_UE>:
2000014c:	fe04 9292 0082 0000                         ........

20000154 <Font08px_UF>:
20000154:	fe04 1212 0002 0000                         ........

2000015c <Font08px_UG>:
2000015c:	7c05 9282 f492 0000                         .|......

20000164 <Font08px_UH>:
20000164:	fe04 1010 00fe 0000                         ........

2000016c <Font08px_UI>:
2000016c:	8203 82fe                                   ....

20000170 <Font08px_UJ>:
20000170:	4004 8080 007e 0000                         .@..~...

20000178 <Font08px_UK>:
20000178:	fe05 2810 8244 0000                         ...(D...

20000180 <Font08px_UL>:
20000180:	fe04 8080 0080 0000                         ........

20000188 <Font08px_UM>:
20000188:	fe05 0804 fe04 0000                         ........

20000190 <Font08px_UN>:
20000190:	fe05 1804 fe60 0000                         ....`...

20000198 <Font08px_UO>:
20000198:	7c04 8282 007c 0000                         .|..|...

200001a0 <Font08px_UP>:
200001a0:	fe04 1212 000c 0000                         ........

200001a8 <Font08px_UQ>:
200001a8:	7c05 a282 bc42 0000                         .|..B...

200001b0 <Font08px_UR>:
200001b0:	fe04 3212 00cc 0000                         ...2....

200001b8 <Font08px_US>:
200001b8:	4c04 9292 0064 0000                         .L..d...

200001c0 <Font08px_UT>:
200001c0:	0205 fe02 0202 0000                         ........

200001c8 <Font08px_UU>:
200001c8:	7e04 8080 007e 0000                         .~..~...

200001d0 <Font08px_UV>:
200001d0:	0e05 c030 0e30 0000                         ..0.0...

200001d8 <Font08px_UW>:
200001d8:	3e05 38c0 3ec0 0000                         .>.8.>..

200001e0 <Font08px_UX>:
200001e0:	c605 1028 c628 0000                         ..(.(...

200001e8 <Font08px_UY>:
200001e8:	0605 f008 0608 0000                         ........

200001f0 <Font08px_UZ>:
200001f0:	c205 92a2 868a 0000                         ........

200001f8 <Font08px_la>:
200001f8:	7004 8888 00f8 0000                         .p......

20000200 <Font08px_lb>:
20000200:	fe04 8888 0070 0000                         ....p...

20000208 <Font08px_lc>:
20000208:	7004 8888 0088 0000                         .p......

20000210 <Font08px_ld>:
20000210:	7004 8888 00fe 0000                         .p......

20000218 <Font08px_le>:
20000218:	7004 a8a8 0030 0000                         .p..0...

20000220 <Font08px_lf>:
20000220:	fc03 0212                                   ....

20000224 <Font08px_lg>:
20000224:	1004 a8a8 0078 0000                         ....x...

2000022c <Font08px_lh>:
2000022c:	fe04 0810 00f0 0000                         ........

20000234 <Font08px_li>:
20000234:	fa01 0000                                   ....

20000238 <Font08px_lj>:
20000238:	8002 007a                                   ..z.

2000023c <Font08px_lk>:
2000023c:	fe04 5020 0088 0000                         .. P....

20000244 <Font08px_ll>:
20000244:	fe01 0000                                   ....

20000248 <Font08px_lm>:
20000248:	f805 f008 f008 0000                         ........

20000250 <Font08px_ln>:
20000250:	f804 0810 00f0 0000                         ........

20000258 <Font08px_lo>:
20000258:	7004 8888 0070 0000                         .p..p...

20000260 <Font08px_lp>:
20000260:	f804 2828 0010 0000                         ..((....

20000268 <Font08px_lq>:
20000268:	1004 2828 00f8 0000                         ..((....

20000270 <Font08px_lr>:
20000270:	f803 0810                                   ....

20000274 <Font08px_ls>:
20000274:	9004 a8a8 0048 0000                         ....H...

2000027c <Font08px_lt>:
2000027c:	0803 887c                                   ..|.

20000280 <Font08px_lu>:
20000280:	7804 8080 00f8 0000                         .x......

20000288 <Font08px_lv>:
20000288:	1805 8060 1860 0000                         ..`.`...

20000290 <Font08px_lw>:
20000290:	3805 30c0 38c0 0000                         .8.0.8..

20000298 <Font08px_lx>:
20000298:	8805 2050 8850 0000                         ..P P...

200002a0 <Font08px_ly>:
200002a0:	1804 a0a0 0078 0000                         ....x...

200002a8 <Font08px_lz>:
200002a8:	c803 98a8                                   ....

200002ac <font_table>:
200002ac:	0020 2000 002c 2000 0038 2000 0044 2000      .. ,.. 8.. D.. 
200002bc:	0050 2000 005c 2000 0064 2000 006c 2000     P.. \.. d.. l.. 
200002cc:	0070 2000 0074 2000 0078 2000 007c 2000     p.. t.. x.. |.. 
200002dc:	0080 2000 0084 2000 0088 2000 008c 2000     ... ... ... ... 
200002ec:	00dc 2000 00e4 2000 00ec 2000 00f4 2000     ... ... ... ... 
200002fc:	00fc 2000 0104 2000 010c 2000 0114 2000     ... ... ... ... 
2000030c:	011c 2000 0124 2000 0090 2000 0094 2000     ... $.. ... ... 
2000031c:	0098 2000 00a0 2000 00a8 2000 00b0 2000     ... ... ... ... 
2000032c:	00b8 2000 012c 2000 0134 2000 013c 2000     ... ,.. 4.. <.. 
2000033c:	0144 2000 014c 2000 0154 2000 015c 2000     D.. L.. T.. \.. 
2000034c:	0164 2000 016c 2000 0170 2000 0178 2000     d.. l.. p.. x.. 
2000035c:	0180 2000 0188 2000 0190 2000 0198 2000     ... ... ... ... 
2000036c:	01a0 2000 01a8 2000 01b0 2000 01b8 2000     ... ... ... ... 
2000037c:	01c0 2000 01c8 2000 01d0 2000 01d8 2000     ... ... ... ... 
2000038c:	01e0 2000 01e8 2000 01f0 2000 00c4 2000     ... ... ... ... 
2000039c:	00c8 2000 00cc 2000 00d0 2000 00d4 2000     ... ... ... ... 
200003ac:	00d8 2000 01f8 2000 0200 2000 0208 2000     ... ... ... ... 
200003bc:	0210 2000 0218 2000 0220 2000 0224 2000     ... ...  .. $.. 
200003cc:	022c 2000 0234 2000 0238 2000 023c 2000     ,.. 4.. 8.. <.. 
200003dc:	0244 2000 0248 2000 0250 2000 0258 2000     D.. H.. P.. X.. 
200003ec:	0260 2000 0268 2000 0270 2000 0274 2000     `.. h.. p.. t.. 
200003fc:	027c 2000 0280 2000 0288 2000 0290 2000     |.. ... ... ... 
2000040c:	0298 2000 02a0 2000 02a8 2000 000c 2000     ... ... ... ... 
2000041c:	0010 2000 0014 2000 0018 2000               ... ... ... 

20000428 <sd_mmc_cards>:
	...
20000430:	004c 0000 0000 0000 0000 0000 0000 0000     L...............
	...

2000044c <sd_mmc_spi_devices>:
2000044c:	0001 0000                                   ....

20000450 <SystemCoreClock>:
20000450:	0900 003d                                   ..=.

20000454 <aliens_at_top>:
20000454:	0001 0000                                   ....

20000458 <_impure_ptr>:
20000458:	0460 2000 0000 0000                         `.. ....

20000460 <impure_data>:
20000460:	0000 0000 074c 2000 07b4 2000 081c 2000     ....L.. ... ... 
	...
20000508:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000518:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000888 <__malloc_av_>:
	...
20000890:	0888 2000 0888 2000 0890 2000 0890 2000     ... ... ... ... 
200008a0:	0898 2000 0898 2000 08a0 2000 08a0 2000     ... ... ... ... 
200008b0:	08a8 2000 08a8 2000 08b0 2000 08b0 2000     ... ... ... ... 
200008c0:	08b8 2000 08b8 2000 08c0 2000 08c0 2000     ... ... ... ... 
200008d0:	08c8 2000 08c8 2000 08d0 2000 08d0 2000     ... ... ... ... 
200008e0:	08d8 2000 08d8 2000 08e0 2000 08e0 2000     ... ... ... ... 
200008f0:	08e8 2000 08e8 2000 08f0 2000 08f0 2000     ... ... ... ... 
20000900:	08f8 2000 08f8 2000 0900 2000 0900 2000     ... ... ... ... 
20000910:	0908 2000 0908 2000 0910 2000 0910 2000     ... ... ... ... 
20000920:	0918 2000 0918 2000 0920 2000 0920 2000     ... ...  ..  .. 
20000930:	0928 2000 0928 2000 0930 2000 0930 2000     (.. (.. 0.. 0.. 
20000940:	0938 2000 0938 2000 0940 2000 0940 2000     8.. 8.. @.. @.. 
20000950:	0948 2000 0948 2000 0950 2000 0950 2000     H.. H.. P.. P.. 
20000960:	0958 2000 0958 2000 0960 2000 0960 2000     X.. X.. `.. `.. 
20000970:	0968 2000 0968 2000 0970 2000 0970 2000     h.. h.. p.. p.. 
20000980:	0978 2000 0978 2000 0980 2000 0980 2000     x.. x.. ... ... 
20000990:	0988 2000 0988 2000 0990 2000 0990 2000     ... ... ... ... 
200009a0:	0998 2000 0998 2000 09a0 2000 09a0 2000     ... ... ... ... 
200009b0:	09a8 2000 09a8 2000 09b0 2000 09b0 2000     ... ... ... ... 
200009c0:	09b8 2000 09b8 2000 09c0 2000 09c0 2000     ... ... ... ... 
200009d0:	09c8 2000 09c8 2000 09d0 2000 09d0 2000     ... ... ... ... 
200009e0:	09d8 2000 09d8 2000 09e0 2000 09e0 2000     ... ... ... ... 
200009f0:	09e8 2000 09e8 2000 09f0 2000 09f0 2000     ... ... ... ... 
20000a00:	09f8 2000 09f8 2000 0a00 2000 0a00 2000     ... ... ... ... 
20000a10:	0a08 2000 0a08 2000 0a10 2000 0a10 2000     ... ... ... ... 
20000a20:	0a18 2000 0a18 2000 0a20 2000 0a20 2000     ... ...  ..  .. 
20000a30:	0a28 2000 0a28 2000 0a30 2000 0a30 2000     (.. (.. 0.. 0.. 
20000a40:	0a38 2000 0a38 2000 0a40 2000 0a40 2000     8.. 8.. @.. @.. 
20000a50:	0a48 2000 0a48 2000 0a50 2000 0a50 2000     H.. H.. P.. P.. 
20000a60:	0a58 2000 0a58 2000 0a60 2000 0a60 2000     X.. X.. `.. `.. 
20000a70:	0a68 2000 0a68 2000 0a70 2000 0a70 2000     h.. h.. p.. p.. 
20000a80:	0a78 2000 0a78 2000 0a80 2000 0a80 2000     x.. x.. ... ... 
20000a90:	0a88 2000 0a88 2000 0a90 2000 0a90 2000     ... ... ... ... 
20000aa0:	0a98 2000 0a98 2000 0aa0 2000 0aa0 2000     ... ... ... ... 
20000ab0:	0aa8 2000 0aa8 2000 0ab0 2000 0ab0 2000     ... ... ... ... 
20000ac0:	0ab8 2000 0ab8 2000 0ac0 2000 0ac0 2000     ... ... ... ... 
20000ad0:	0ac8 2000 0ac8 2000 0ad0 2000 0ad0 2000     ... ... ... ... 
20000ae0:	0ad8 2000 0ad8 2000 0ae0 2000 0ae0 2000     ... ... ... ... 
20000af0:	0ae8 2000 0ae8 2000 0af0 2000 0af0 2000     ... ... ... ... 
20000b00:	0af8 2000 0af8 2000 0b00 2000 0b00 2000     ... ... ... ... 
20000b10:	0b08 2000 0b08 2000 0b10 2000 0b10 2000     ... ... ... ... 
20000b20:	0b18 2000 0b18 2000 0b20 2000 0b20 2000     ... ...  ..  .. 
20000b30:	0b28 2000 0b28 2000 0b30 2000 0b30 2000     (.. (.. 0.. 0.. 
20000b40:	0b38 2000 0b38 2000 0b40 2000 0b40 2000     8.. 8.. @.. @.. 
20000b50:	0b48 2000 0b48 2000 0b50 2000 0b50 2000     H.. H.. P.. P.. 
20000b60:	0b58 2000 0b58 2000 0b60 2000 0b60 2000     X.. X.. `.. `.. 
20000b70:	0b68 2000 0b68 2000 0b70 2000 0b70 2000     h.. h.. p.. p.. 
20000b80:	0b78 2000 0b78 2000 0b80 2000 0b80 2000     x.. x.. ... ... 
20000b90:	0b88 2000 0b88 2000 0b90 2000 0b90 2000     ... ... ... ... 
20000ba0:	0b98 2000 0b98 2000 0ba0 2000 0ba0 2000     ... ... ... ... 
20000bb0:	0ba8 2000 0ba8 2000 0bb0 2000 0bb0 2000     ... ... ... ... 
20000bc0:	0bb8 2000 0bb8 2000 0bc0 2000 0bc0 2000     ... ... ... ... 
20000bd0:	0bc8 2000 0bc8 2000 0bd0 2000 0bd0 2000     ... ... ... ... 
20000be0:	0bd8 2000 0bd8 2000 0be0 2000 0be0 2000     ... ... ... ... 
20000bf0:	0be8 2000 0be8 2000 0bf0 2000 0bf0 2000     ... ... ... ... 
20000c00:	0bf8 2000 0bf8 2000 0c00 2000 0c00 2000     ... ... ... ... 
20000c10:	0c08 2000 0c08 2000 0c10 2000 0c10 2000     ... ... ... ... 
20000c20:	0c18 2000 0c18 2000 0c20 2000 0c20 2000     ... ...  ..  .. 
20000c30:	0c28 2000 0c28 2000 0c30 2000 0c30 2000     (.. (.. 0.. 0.. 
20000c40:	0c38 2000 0c38 2000 0c40 2000 0c40 2000     8.. 8.. @.. @.. 
20000c50:	0c48 2000 0c48 2000 0c50 2000 0c50 2000     H.. H.. P.. P.. 
20000c60:	0c58 2000 0c58 2000 0c60 2000 0c60 2000     X.. X.. `.. `.. 
20000c70:	0c68 2000 0c68 2000 0c70 2000 0c70 2000     h.. h.. p.. p.. 
20000c80:	0c78 2000 0c78 2000 0c80 2000 0c80 2000     x.. x.. ... ... 

20000c90 <__malloc_sbrk_base>:
20000c90:	ffff ffff                                   ....

20000c94 <__malloc_trim_threshold>:
20000c94:	0000 0002                                   ....

20000c98 <__atexit_recursive_mutex>:
20000c98:	11b0 2000                                   ... 

20000c9c <__global_locale>:
20000c9c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000cbc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000cdc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000cfc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000d1c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000d3c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000d5c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000d7c:	7969 0040 6c59 0040 0000 0000 7e7c 0040     iy@.Yl@.....|~@.
20000d8c:	7d78 0040 7d18 0040 7d18 0040 7d18 0040     x}@..}@..}@..}@.
20000d9c:	7d18 0040 7d18 0040 7d18 0040 7d18 0040     .}@..}@..}@..}@.
20000dac:	7d18 0040 7d18 0040 ffff ffff ffff ffff     .}@..}@.........
20000dbc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000de4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
